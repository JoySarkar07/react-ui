{"version":3,"sources":["/home/techmonastic/react-ui-library/react-ui/dist/index.js","../src/index.ts","../src/components/Input/Button/Button.tsx","../src/components/Input/Card/Card.tsx","../src/components/Input/BasicInput/BasicInput.tsx","../src/components/Input/CalendarInput/CalendarInput.tsx","../src/components/Input/FileInput/FileInput.tsx","../src/components/Input/Heading/Heading.tsx","../src/components/Input/MultiCheckbox/MultiCheckbox.tsx","../src/components/Input/MultiNumInput/MultiNumInput.tsx","../src/components/Input/RadioInput/RadioInput.tsx","../src/components/Input/SelectInput/SelectInput.tsx","../src/components/Input/TextArea/TextArea.tsx","../src/components/Input/ButtonCustomiser/ButtonCustomiser.tsx","../src/components/Input/FormCustomizer/FormCustomizer.tsx","../src/context/SettingContext.tsx","../src/components/Input/CheckboxCustomImg/CheckboxCustomImg.tsx","../src/components/Input/Log/Log.tsx","../src/service/apiService.ts","../src/components/Input/AutoGeneratedDefaultInput/AutoGeneratedDefaultInput.tsx","../src/components/Input/SyncMap/SyncMap.tsx","../src/components/Input/ConnectButton/ConnectButton.tsx","../src/components/Input/SubTabSection/SubTabSection.tsx","../src/components/Input/SyncNow/SyncNow.tsx","../src/components/Input/ShortCodeTable/ShortCodeTable.tsx","../src/components/Input/MultiCheckboxTable/MultiCheckboxTable.tsx","../src/components/Input/ToggleSetting/ToggleSetting.tsx","../src/components/Input/CatalogCustomizer/CatalogCustomizer.tsx","../src/components/Input/MapsInput/MapsInput.tsx","../src/components/Input/IconList/IconList.tsx","../src/components/Input/AdminForm/AdminForm.tsx","../src/context/ModuleContext.tsx","../src/components/WpEditor/WpEditor.tsx","../src/components/Input/Label/Label.tsx","../src/components/Input/Section/Section.tsx","../src/components/Input/BlockText/BlockText.tsx","../src/components/Input/FreeProFormCustomizer/FreeProFormCustomizer.tsx","../src/components/Input/RegistrationForm/RegistrationForm.tsx","../src/components/Input/RegistrationForm/Templates/Elements.tsx","../src/components/Input/RegistrationForm/Templates/MetaBox.tsx","../src/components/Input/RegistrationForm/Templates/SimpleInput.tsx","../src/components/Input/RegistrationForm/HoverInputRender.tsx","../src/components/Input/RegistrationForm/Templates/MultipleOption.tsx","../src/components/Input/RegistrationForm/Templates/OptionMetaBox.tsx","../src/components/Input/RegistrationForm/Templates/TextArea.tsx","../src/components/Input/RegistrationForm/Templates/Attachment.tsx","../src/components/Input/RegistrationForm/Templates/Recaptcha.tsx","../src/components/Input/RegistrationForm/Templates/DatePicker.tsx","../src/components/Input/RegistrationForm/Templates/TimePicker.tsx","../src/components/Input/RegistrationForm/Templates/Section.tsx","../src/components/Input/RegistrationForm/Templates/Divider.tsx","../src/components/Input/MergeComponent/MergeComponent.tsx","../src/components/Advertisement/InputMailchimpList/InputMailchimpList.tsx","../src/components/Advertisement/PopupContent/Propopup.tsx","../src/components/Advertisement/PopupContent/ModulePopup.tsx","../src/components/Advertisement/CustomTable/CustomTable.tsx","../src/components/Advertisement/DisplayButton/DisplayButton.tsx","../src/components/Advertisement/BlockText/BlockText.tsx","../src/components/Advertisement/Label/Label.tsx","../src/components/Advertisement/Section/Section.tsx","../src/components/Advertisement/WpEditor/WpEditor.tsx","../src/components/Advertisement/Tabs/Tabs.tsx","../src/components/Advertisement/AdminFooter/AdminFooter.tsx","../src/components/Advertisement/Banner/Banner.tsx","../src/components/Advertisement/Modules/Modules.tsx","../src/components/Advertisement/Support/Support.tsx","../src/components/Advertisement/FormViewer/FormViewer.tsx","../src/components/Advertisement/TableComponent/TableComponent.tsx","../src/components/Advertisement/TourSteps/TourSteps.tsx"],"names":["_g","Object","create","T","defineProperty","Pg","getOwnPropertyDescriptor","qg","getOwnPropertyNames","Kg","getPrototypeOf","$g","prototype","hasOwnProperty","gt","g","t","I","get","enumerable","bg","i","n","call","e","__esModule","value","tt","index_exports","__export","AutoGeneratedDefaultInput","BasicInput","Button","CalendarInput","Card","CheckboxCustomImg","FileInput","Heading","Log","ModulePopup","ModuleProvider","MultiCheckBox","MultiNumInput","ProPopup","RadioInput","SettingProvider","TableCell","TextArea","getApiLink","getApiResponse","sendApiResponse","useModules","useSetting","module","exports","__toCommonJS","import_react","require","wrapperClass","inputClass","type","onClick","proSetting","description","descClass","L","React","createElement","className","dangerouslySetInnerHTML","__html","title","children","width","elevation","j","style","inputLabel","id","name","placeholder","min","max","onChange","onMouseOver","onMouseOut","onFocus","parameter","rangeUnit","disabled","h","htmlFor","join","import_react_multi_date_picker","props","formattedDate","dates","split","length","includes","Date","trim","map","date","rangeDates","startDate","endDate","Q","useState","selectedDate","setSelectedDate","handleDateChange","dg","DatePicker","format","multiple","range","V","imageSrc","src","imageWidth","height","imageHeight","alt","buttonClass","onButtonClick","openUploader","blocktext","Ig","G","selectDeselect","selectDeselectClass","preventDefault","onMultiSelectDeselectChange","selectDeselectValue","options","option","checked","key","inputWrapperClass","rightContent","rightContentClass","label","inputInnerWrapperClass","tour","idPrefix","proChanged","hints","hintOuterClass","parentWrapperClass","childWrapperClass","innerInputWrapperClass","inputLabelClass","keyName","y","index","selectedValue","find","val","B","activeClass","radiSelectLabelClass","Array","isArray","color","backgroundColor","Fragment","labelImgClass","labelOverlayClass","labelOverlayText","import_react_select","maxLength","rowNumber","colNumber","k","rows","cols","import_i18n","SettingContext","v","createContext","settingReducer","state","action","payload","setting","settingName","useReducer","dispatch","setSetting","updateSetting","clearSetting","Provider","context","useContext","Error","syncDirectionsClass","syncMetaClass","labelClass","settingsMetaDescriptionClass","syncDirections","handleCheckboxChange","directionValue","isChecked","updatedValue","filter","element","x","direction","target","img1","img2","import_axios","url","headers","error","ig","axios","data","console","config","appLocalizer","nonce","post","endpoint","namespace","rootUrl","apiurl","restUrl","fetchApiLink","downloadApiLink","downloadFileName","A","logData","setLogData","copied","setCopied","useEffect","z","logcount","then","response","handleDownloadLog","event","method","file","responseType","blob","Blob","window","URL","createObjectURL","link","document","href","setAttribute","body","appendChild","click","removeChild","catch","handleClearLog","clear","handleCopyToClipboard","logText","log","regex","match","navigator","clipboard","writeText","setTimeout","tab_name","d","generateRandomKey","characters","randomIndex","Math","floor","random","charAt","hg","__","import_react_router_dom","import_react_modal","import_react_drag_listview","import_mapbox_gl_geocoder","import_mapbox_gl","ModuleContext","O","ModuleReducer","modules","insertModule","moduleName","removeModule","import_tinymce_react","import_react_sortablejs","import_react_draggable","import_material","import_DialogContent","import_DialogContentText","proUrl","safeProUrl","pro_url","X","Ug","DialogContent","wg","DialogContentText","rel","settings","plugin","modulePageUrl","module_page_url","m","Lg","kg","N","sprintf","import_react_data_table_component","U","import_Dialog","import_react_csv","import_react_date_range","import_styles","import_default","khali_dabba","export_button","fetchSubscribersDataUrl","fetchSubscribersCount","csvLink","w","useRef","dateRef","import_tour"],"mappings":"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","sourcesContent":["\"use strict\";var _g=Object.create;var T=Object.defineProperty;var Pg=Object.getOwnPropertyDescriptor;var qg=Object.getOwnPropertyNames;var Kg=Object.getPrototypeOf,$g=Object.prototype.hasOwnProperty;var gt=(g,t)=>{for(var I in t)T(g,I,{get:t[I],enumerable:!0})},bg=(g,t,I,i)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let n of qg(t))!$g.call(g,n)&&n!==I&&T(g,n,{get:()=>t[n],enumerable:!(i=Pg(t,n))||i.enumerable});return g};var e=(g,t,I)=>(I=g!=null?_g(Kg(g)):{},bg(t||!g||!g.__esModule?T(I,\"default\",{value:g,enumerable:!0}):I,g)),tt=g=>bg(T({},\"__esModule\",{value:!0}),g);var se={};gt(se,{AutoGeneratedDefaultInput:()=>Vg,BasicInput:()=>eg,Button:()=>et,CalendarInput:()=>mg,Card:()=>It,CheckboxCustomImg:()=>Ng,FileInput:()=>pg,Heading:()=>it,Log:()=>yg,ModulePopup:()=>Dg,ModuleProvider:()=>Qg,MultiCheckBox:()=>ug,MultiNumInput:()=>Gg,ProPopup:()=>Yg,RadioInput:()=>Xg,SettingProvider:()=>Zg,TableCell:()=>Tg,TextArea:()=>Bg,getApiLink:()=>F,getApiResponse:()=>ng,sendApiResponse:()=>D,useModules:()=>_,useSetting:()=>f});module.exports=tt(se);var L=e(require(\"react\")),et=({wrapperClass:g,inputClass:t,type:I=\"button\",value:i,onClick:n,proSetting:s,description:C,descClass:l})=>L.default.createElement(\"div\",{className:g},L.default.createElement(\"input\",{className:t,type:I,value:i,onClick:u=>n?.(u)}),s&&L.default.createElement(\"span\",{className:\"admin-pro-tag\"},\"pro\"),C&&L.default.createElement(\"p\",{className:l,dangerouslySetInnerHTML:{__html:C}}));var j=e(require(\"react\"));var It=({title:g,children:t,width:I=\"300px\",elevation:i=\"medium\"})=>j.default.createElement(\"div\",{className:`card card-elevation-${i}`,style:{width:I}},g&&j.default.createElement(\"div\",{className:\"card-title\"},g),j.default.createElement(\"div\",{className:\"card-content\"},t));var h=e(require(\"react\")),eg=({wrapperClass:g,inputLabel:t,inputClass:I,id:i,type:n=\"text\",name:s=\"basic-input\",value:C,placeholder:l,min:u,max:Z,onChange:c,onClick:a,onMouseOver:b,onMouseOut:o,onFocus:r,parameter:p,proSetting:Y,description:W,descClass:cg,rangeUnit:Sg,disabled:Eg=!1})=>h.default.createElement(\"div\",{className:g},t&&h.default.createElement(\"label\",{htmlFor:i},t),h.default.createElement(\"input\",{className:[\"basic-input\",I].join(\" \"),id:i,type:n,name:s,placeholder:l,...n!==\"file\"&&c?{value:C}:{},...n===\"number\"||n===\"range\"?{min:u,max:Z}:{},onChange:c,onClick:a,onMouseOver:b,onMouseOut:o,onFocus:r,disabled:Eg}),p&&h.default.createElement(\"span\",{className:\"parameter\",dangerouslySetInnerHTML:{__html:p}}),Y&&h.default.createElement(\"span\",{className:\"admin-pro-tag\"},\"pro\"),W&&h.default.createElement(\"p\",{className:cg,dangerouslySetInnerHTML:{__html:W}}),n===\"range\"&&h.default.createElement(\"output\",{className:cg},C||0,Sg));var Q=e(require(\"react\")),dg=e(require(\"react-multi-date-picker\")),mg=g=>{let t,I=g.value.split(\",\");I.length===1&&!I[0].includes(\" - \")?t=new Date(I[0].trim()):t=I.map(C=>{if(C.includes(\" - \")){let l=C.split(\" - \"),u=new Date(l[0].trim()),Z=new Date(l[1].trim());return[u,Z]}else return new Date(C.trim())});let[i,n]=(0,Q.useState)(t||\"\"),s=C=>{n(C),g.onChange?.(C)};return Q.default.createElement(\"div\",{className:g.wrapperClass},Q.default.createElement(dg.default,{className:g.inputClass,format:g.format||\"YYYY-MM-DD\",multiple:g.multiple,range:g.range,value:i,placeholder:\"YYYY-MM-DD\",onChange:s}),g.proSetting&&Q.default.createElement(\"span\",{className:\"admin-pro-tag\"},\"pro\"))};var V=e(require(\"react\")),pg=g=>V.default.createElement(\"div\",{className:g.wrapperClass},V.default.createElement(\"div\",{className:\"file-uploader\"},V.default.createElement(\"input\",{className:g.inputClass,id:g.id,type:g.type||\"file\",name:g.name||\"file-input\",value:g.value,placeholder:g.placeholder,onChange:t=>g.onChange?.(t),onClick:t=>g.onClick?.(t),onMouseOver:t=>g.onMouseOver?.(t),onMouseOut:t=>g.onMouseOut?.(t),onFocus:t=>g.onFocus?.(t)}),g.proSetting&&V.default.createElement(\"span\",{className:\"admin-pro-tag\"},\"pro\"),g.imageSrc&&V.default.createElement(\"img\",{src:g.imageSrc,width:g.imageWidth,height:g.imageHeight,alt:\"Uploaded Preview\"}),V.default.createElement(\"button\",{className:g.buttonClass,type:\"button\",onClick:t=>g.onButtonClick?.(t)},g.openUploader)),g.description&&V.default.createElement(\"p\",{className:g.descClass,dangerouslySetInnerHTML:{__html:g.description}}));var Ig=e(require(\"react\")),it=({wrapperClass:g,blocktext:t})=>Ig.default.createElement(\"div\",{className:g},t&&Ig.default.createElement(\"h5\",{dangerouslySetInnerHTML:{__html:t}}));var G=e(require(\"react\")),ug=g=>G.default.createElement(\"div\",{className:g.wrapperClass},g.selectDeselect&&G.default.createElement(\"button\",{className:g.selectDeselectClass,onClick:t=>{t.preventDefault(),g.onMultiSelectDeselectChange?.(t)}},g.selectDeselectValue),G.default.createElement(\"div\",{className:\"wrapper\"},g.options.map(t=>{let I=g.value?.includes(t.value)??!1;return G.default.createElement(\"div\",{key:t.key,className:g.inputWrapperClass},g.rightContent&&G.default.createElement(\"p\",{className:g.rightContentClass,dangerouslySetInnerHTML:{__html:t.label}}),G.default.createElement(\"div\",{className:g.inputInnerWrapperClass,\"data-tour\":g.tour},G.default.createElement(\"input\",{className:g.inputClass,id:`${g.idPrefix}-${t.key}`,type:g.type||\"checkbox\",name:t.name||\"basic-input\",value:t.value,checked:I,onChange:i=>{t.proSetting?g.proChanged?.():g.onChange?.(i)}}),G.default.createElement(\"label\",{htmlFor:`${g.idPrefix}-${t.key}`})),g.proSetting&&G.default.createElement(\"span\",{className:\"admin-pro-tag\"},\"pro\"),!g.rightContent&&G.default.createElement(\"p\",{className:g.rightContentClass,dangerouslySetInnerHTML:{__html:t.label}}),t.proSetting&&G.default.createElement(\"span\",{className:\"admin-pro-tag\"},\"pro\"),t.hints&&G.default.createElement(\"span\",{className:g.hintOuterClass,dangerouslySetInnerHTML:{__html:t.hints}}))})),g.description&&G.default.createElement(\"p\",{className:g.descClass,dangerouslySetInnerHTML:{__html:g.description}}));var y=e(require(\"react\")),Gg=({parentWrapperClass:g,childWrapperClass:t,options:I,value:i=[],inputWrapperClass:n,innerInputWrapperClass:s,inputLabelClass:C,inputClass:l,idPrefix:u=\"multi-num\",keyName:Z,proSetting:c,description:a,descClass:b,onChange:o})=>y.default.createElement(\"div\",{className:g},y.default.createElement(\"div\",{className:t},I.map((r,p)=>{let Y=i.find(W=>W.key===r.key)?.value??\"\";return y.default.createElement(\"div\",{key:r.key,className:n},y.default.createElement(\"div\",{className:s},y.default.createElement(\"div\",{className:C},r.label),y.default.createElement(\"input\",{id:`${u}-${r.key}`,className:l,type:r.type,name:r.name,value:Y,onChange:W=>o?.(W,Z,r.key,p)}),c&&y.default.createElement(\"span\",{className:\"admin-pro-tag\"},\"pro\")))})),a&&y.default.createElement(\"p\",{className:b,dangerouslySetInnerHTML:{__html:a}}));var B=e(require(\"react\")),Xg=g=>B.default.createElement(\"div\",{className:g.wrapperClass},g.options.map(t=>{let I=g.value===t.value;return B.default.createElement(\"div\",{key:t.key,className:`${g.inputWrapperClass} ${I?g.activeClass:\"\"}`},B.default.createElement(\"input\",{className:g.inputClass,id:`${g.idPrefix}-${t.key}`,type:\"radio\",name:t.name,checked:I,value:t.value,onChange:i=>g.onChange?.(i)}),B.default.createElement(\"label\",{htmlFor:`${g.idPrefix}-${t.key}`,className:g.type===\"radio-select\"?g.radiSelectLabelClass:\"\"},t.label,g.type===\"radio-color\"&&B.default.createElement(\"p\",{className:\"color-palette\"},Array.isArray(t.color)&&t.color.map((i,n)=>B.default.createElement(\"div\",{key:n,style:{backgroundColor:i}},\" \\xA0 \"))),g.type===\"radio-select\"&&typeof t.color==\"string\"&&B.default.createElement(B.default.Fragment,null,B.default.createElement(\"img\",{src:t.color,alt:t.label,className:g.labelImgClass}),B.default.createElement(\"div\",{className:g.labelOverlayClass},g.labelOverlayText))),g.proSetting&&B.default.createElement(\"span\",{className:\"admin-pro-tag\"},\"pro\"))}),g.description&&B.default.createElement(\"p\",{className:g.descClass,dangerouslySetInnerHTML:{__html:g.description}}));var nt=e(require(\"react\")),Ct=e(require(\"react-select\"));var k=e(require(\"react\")),Bg=({wrapperClass:g,inputClass:t,id:I,name:i,value:n,maxLength:s,placeholder:C,rowNumber:l=4,colNumber:u=50,proSetting:Z,description:c,descClass:a,onChange:b,onClick:o,onMouseOver:r,onMouseOut:p,onFocus:Y})=>k.default.createElement(\"div\",{className:g},k.default.createElement(\"textarea\",{className:t,id:I,name:i,value:n,maxLength:s,placeholder:C,rows:l,cols:u,onChange:b,onClick:o,onMouseOver:r,onMouseOut:p,onFocus:Y}),Z&&k.default.createElement(\"span\",{className:\"admin-pro-tag\"},\"pro\"),c&&k.default.createElement(\"p\",{className:a,dangerouslySetInnerHTML:{__html:c}}));var J=e(require(\"react\")),at=require(\"@wordpress/i18n\");var R=e(require(\"react\"));var v=e(require(\"react\")),xg=(0,v.createContext)(null),At=(g,t)=>{switch(t.type){case\"SET_SETTINGS\":return{...t.payload};case\"UPDATE_SETTINGS\":return{...g,setting:{...g.setting,[t.payload.key]:t.payload.value}};case\"CLEAR_SETTINGS\":return{settingName:\"\",setting:{}};default:return g}},Zg=({children:g})=>{let[t,I]=(0,v.useReducer)(At,{settingName:\"\",setting:{}}),i=(C,l)=>{I({type:\"SET_SETTINGS\",payload:{settingName:C,setting:l}})},n=(C,l)=>{I({type:\"UPDATE_SETTINGS\",payload:{key:C,value:l}})},s=()=>{I({type:\"CLEAR_SETTINGS\"})};return v.default.createElement(xg.Provider,{value:{...t,setSetting:i,updateSetting:n,clearSetting:s}},g)},f=()=>{let g=(0,v.useContext)(xg);if(!g)throw new Error(\"useSetting must be used within a SettingProvider\");return g};var x=e(require(\"react\")),Ng=({wrapperClass:g,syncDirectionsClass:t,syncMetaClass:I,labelClass:i,settingsMetaDescriptionClass:n,value:s=[],onChange:C,syncDirections:l,description:u,proSetting:Z})=>{let c=(a,b)=>{let o=s.filter(r=>r!==a);b&&(o=[...o,a]),C(o)};return x.default.createElement(x.default.Fragment,null,x.default.createElement(\"div\",{className:g},l.map((a,b)=>x.default.createElement(\"div\",{className:t,key:b},x.default.createElement(\"input\",{type:\"checkbox\",checked:s.includes(a.value),onChange:o=>c(a.value,o.target.checked)}),x.default.createElement(\"div\",{className:I},x.default.createElement(\"img\",{src:a.img1,alt:\"\"}),x.default.createElement(\"i\",{className:\"admin-font adminLib-arrow-right\"}),x.default.createElement(\"img\",{src:a.img2,alt:\"\"})),x.default.createElement(\"p\",{className:i},a.label))),Z&&x.default.createElement(\"span\",null,\"pro\")),u&&x.default.createElement(\"p\",{className:n,dangerouslySetInnerHTML:{__html:u}}))};var A=e(require(\"react\")),z=e(require(\"axios\"));var ig=e(require(\"axios\")),ng=async(g,t={})=>{try{return(await ig.default.get(g,t)).data}catch(I){return console.error(`\\u274C Error fetching data from ${g}`,I),null}},D=async(g,t,I={})=>{try{let i={headers:{\"X-WP-Nonce\":appLocalizer.nonce,...I.headers},...I};return(await ig.default.post(g,t,i)).data}catch(i){return console.error(`\\u274C Error sending data to ${g}`,i),null}},F=(g,t,I)=>`${I||appLocalizer.apiurl}/${t||appLocalizer.restUrl}/${g}`;var yg=({fetchApiLink:g,downloadApiLink:t,downloadFileName:I,appLocalizer:i})=>{let[n,s]=(0,A.useState)([]),[C,l]=(0,A.useState)(!1);(0,A.useEffect)(()=>{z.default.post(F(g),{logcount:100},{headers:{\"X-WP-Nonce\":i?.nonce}}).then(a=>{s(a.data)})},[g]);let u=a=>{a.preventDefault(),(0,z.default)({url:F(t),method:\"POST\",headers:{\"X-WP-Nonce\":i?.nonce},data:{file:I},responseType:\"blob\"}).then(b=>{let o=new Blob([b.data],{type:b.headers[\"content-type\"]}),r=window.URL.createObjectURL(o),p=document.createElement(\"a\");p.href=r,p.setAttribute(\"download\",I),document.body.appendChild(p),p.click(),document.body.removeChild(p)}).catch(b=>console.error(\"Error downloading file:\",b))},Z=a=>{a.preventDefault(),z.default.post(F(g),{logcount:100,clear:!0},{headers:{\"X-WP-Nonce\":i?.nonce}}).then(()=>{s([])})},c=a=>{a.preventDefault();let b=n.map(o=>{let r=/^([^:]+:[^:]+:[^:]+):(.*)$/,p=o.match(r);return p?`${p[1].trim()} : ${p[2].trim()}`:o}).join(`\n`);navigator.clipboard.writeText(b).then(()=>l(!0)).catch(o=>{l(!1),console.error(\"Error copying logs to clipboard:\",o)}),setTimeout(()=>l(!1),1e4)};return A.default.createElement(\"div\",{className:\"section-log-container\"},A.default.createElement(\"div\",{className:\"button-section\"},A.default.createElement(\"button\",{onClick:u,className:\"btn-purple download-btn\"},\"Download\"),A.default.createElement(\"button\",{className:\"btn-purple button-clear\",onClick:Z},A.default.createElement(\"span\",{className:\"text\"},\"Clear\"),A.default.createElement(\"i\",{className:\"adminLib-close\"}))),A.default.createElement(\"div\",{className:\"log-container-wrapper\"},A.default.createElement(\"div\",{className:\"wrapper-header\"},A.default.createElement(\"p\",{className:\"log-viewer-text\"},i?.tab_name,\" - log viewer\"),A.default.createElement(\"div\",{className:\"click-to-copy\"},A.default.createElement(\"button\",{className:\"copy-btn\",onClick:c},A.default.createElement(\"i\",{className:\"adminLib-vendor-form-copy\"}),A.default.createElement(\"span\",{className:C?\"tooltip\":\"tooltip tool-clip\"},C?A.default.createElement(\"i\",{className:\"adminLib-success-notification\"}):\"Copy to clipboard\",C?\"Copied\":\"\")))),A.default.createElement(\"div\",{className:\"wrapper-body\"},n.map((a,b)=>{let o=/^([^:]+:[^:]+:[^:]+):(.*)$/,r=a.match(o);return r?A.default.createElement(\"div\",{className:\"log-row\",key:b},A.default.createElement(\"span\",{className:\"log-creation-date\"},r[1].trim(),\" :\"),A.default.createElement(\"span\",{className:\"log-details\"},r[2].trim())):null}))))};var d=e(require(\"react\"));var hg=require(\"@wordpress/i18n\"),Vg=({value:g,proSetting:t,onChange:I,description:i})=>{let[n,s]=(0,d.useState)(!1),C=(c=8)=>{let a=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",b=\"\";for(let o=0;o<c;o++){let r=Math.floor(Math.random()*a.length);b+=a.charAt(r)}return b};return d.default.createElement(d.default.Fragment,null,d.default.createElement(\"div\",{className:\"sso-key-section\"},d.default.createElement(\"div\",{className:\"input-section\"},d.default.createElement(\"input\",{type:\"text\",value:g,onChange:c=>I(c.target.value)}),g!==\"\"&&d.default.createElement(\"button\",{onClick:c=>{c.preventDefault(),I(\"\")},className:\"clear-btn\"},d.default.createElement(\"i\",{className:\"adminLib-delete\"}))),g!==\"\"?d.default.createElement(\"button\",{className:\"copy-btn\",onClick:c=>{c.preventDefault(),navigator.clipboard.writeText(g).then(()=>{s(!0)}),setTimeout(()=>{s(!1)},1e4)}},d.default.createElement(\"span\",{className:\"svgIcon\"},d.default.createElement(\"i\",{className:\"adminLib-vendor-form-copy\"}),d.default.createElement(\"span\",{className:n?\"tooltip\":\"tooltip tool-clip\"},n?d.default.createElement(\"i\",{className:\"adminLib-success-notification\"}):\"\",n?\"Copied\":\"Copy to clipboard\"))):d.default.createElement(\"button\",{className:\"btn-purple generate-btn\",onClick:c=>{c.preventDefault();let a=C(8);I(a)}},d.default.createElement(\"i\",{className:\"adminLib-star_icon\"}),d.default.createElement(\"span\",{className:\"text\"},(0,hg.__)(\"Generate\",\"catalogx\"))),t&&d.default.createElement(\"span\",{className:\"admin-pro-tag\"},\"pro\")),i&&d.default.createElement(\"p\",{className:\"settings-metabox-description\",dangerouslySetInnerHTML:{__html:i}}))};var M=e(require(\"react\"));var Cg=e(require(\"react\"));var ot=require(\"react-router-dom\"),rt=require(\"@wordpress/i18n\");var vg=e(require(\"react\"));var H=e(require(\"react\")),st=e(require(\"axios\"));var lt=e(require(\"react\"));var S=e(require(\"react\")),ct=e(require(\"react-modal\"));var bt=e(require(\"react\"));var Og=e(require(\"react\")),mt=e(require(\"react-drag-listview\"));var E=e(require(\"react\")),pt=e(require(\"@mapbox/mapbox-gl-geocoder\")),ut=e(require(\"mapbox-gl\"));var Gt=e(require(\"react\"));var tg=e(require(\"react\"));var O=e(require(\"react\")),Wg=(0,O.createContext)(null),Xt=(g,t)=>{switch(t.type){case\"INSERT_MODULE\":return[...g,t.payload];case\"DELETE_MODULE\":return g.filter(I=>I!==t.payload);default:return g}},Qg=({children:g,modules:t=[]})=>{let[I,i]=(0,O.useReducer)(Xt,t),n=C=>{i({type:\"INSERT_MODULE\",payload:C})},s=C=>{i({type:\"DELETE_MODULE\",payload:C})};return O.default.createElement(Wg.Provider,{value:{modules:I,insertModule:n,removeModule:s}},g)},_=()=>{let g=(0,O.useContext)(Wg);if(!g)throw new Error(\"useModules must be used within a ModuleProvider\");return g};var Bt=e(require(\"react\")),xt=require(\"@tinymce/tinymce-react\");var Zt=e(require(\"react\"));var Ft=e(require(\"react\"));var Nt=e(require(\"react\"));var $=e(require(\"react\"));var K=e(require(\"react\")),Jt=require(\"@wordpress/i18n\");var yt=e(require(\"react\")),ht=require(\"@wordpress/i18n\");var Rt=require(\"react-sortablejs\");var ag=e(require(\"react\")),Vt=e(require(\"react-draggable\"));var vt=e(require(\"react\"));var P=e(require(\"react\"));var og=e(require(\"react\")),Wt=require(\"react-sortablejs\");var Ag=e(require(\"react\")),Ot=e(require(\"react-draggable\"));var Qt=e(require(\"react\"));var ft=require(\"@wordpress/i18n\"),Ut=e(require(\"react\"));var wt=require(\"@wordpress/i18n\"),Yt=e(require(\"react\"));var Lt=e(require(\"react\"));var kt=e(require(\"react\"));var Dt=e(require(\"react\"));var Tt=e(require(\"react\")),jt=require(\"@wordpress/i18n\");var zt=require(\"@wordpress/i18n\");var gg=e(require(\"react\"));var fg=e(require(\"react\"));var re=require(\"@mui/material\");var X=e(require(\"react\")),Ug=e(require(\"@mui/material/DialogContent\")),wg=e(require(\"@mui/material/DialogContentText\"));var Yg=({proUrl:g})=>{let t=g||typeof window<\"u\"&&window.appLocalizer?.pro_url||\"#\";return X.default.createElement(Ug.default,null,X.default.createElement(wg.default,null,X.default.createElement(\"div\",{className:\"admin-module-dialog-content\"},X.default.createElement(\"div\",{className:\"admin-image-overlay\"},X.default.createElement(\"div\",{className:\"admin-overlay-content\"},X.default.createElement(\"h1\",{className:\"banner-header\"},\"Unlock \",X.default.createElement(\"span\",{className:\"banner-pro-tag\"},\"Pro\")),X.default.createElement(\"div\",{className:\"admin-banner-content\"},X.default.createElement(\"strong\",null,\"For pro popup\"),X.default.createElement(\"p\",null,\"\\xA0\"),X.default.createElement(\"p\",null,\"1. ......\"),X.default.createElement(\"p\",null,\"2. .....\")),X.default.createElement(\"a\",{className:\"admin-go-pro-btn\",target:\"_blank\",rel:\"noopener noreferrer\",href:t},\"Upgrade to Pro\"))))))};var m=e(require(\"react\")),Lg=e(require(\"@mui/material/DialogContent\")),kg=e(require(\"@mui/material/DialogContentText\")),N=require(\"@wordpress/i18n\");var Dg=({name:g,settings:t,plugin:I})=>{let i=typeof window<\"u\"&&window.appLocalizer?.module_page_url?window.appLocalizer.module_page_url:\"#\";return m.default.createElement(Lg.default,null,m.default.createElement(kg.default,null,m.default.createElement(\"div\",{className:\"admin-module-dialog-content\"},m.default.createElement(\"div\",{className:\"admin-image-overlay\"},m.default.createElement(\"div\",{className:\"admin-overlay-content\"},m.default.createElement(\"div\",{className:\"admin-banner-content\"},g&&m.default.createElement(m.default.Fragment,null,m.default.createElement(\"h2\",null,(0,N.sprintf)((0,N.__)(\"To activate please enable the %s module first\",\"catalogx\"),g)),m.default.createElement(\"a\",{className:\"admin-go-pro-btn\",href:i},(0,N.__)(\"Enable Now\",\"catalogx\")))),t&&m.default.createElement(m.default.Fragment,null,m.default.createElement(\"h2\",null,(0,N.__)(\"Activate Sitewide Buy Mode\",\"catalogx\")),m.default.createElement(\"p\",{id:\"description\"},(0,N.__)(`The \"Sitewide Buy Mode\" is required to unlock purchase functionality across the site. Make sure it's activated to proceed.`,\"catalogx\"))),I===\"notifima\"&&m.default.createElement(\"div\",null,m.default.createElement(\"h2\",null,(0,N.__)('Download and install \"Notifima\"',\"catalogx\")),m.default.createElement(\"p\",{id:\"description\"},(0,N.__)('\"Notifima\" is a necessary product to enable notifications and other related settings. Download and install it to complete the setup.',\"catalogx\")),m.default.createElement(\"a\",{className:\"admin-go-pro-btn\",target:\"_blank\",rel:\"noopener noreferrer\",href:\"https://wordpress.org/plugins/woocommerce-product-stock-alert/\"},(0,N.__)(\"Download now\",\"catalogx\"))))))))};var U=e(require(\"react\")),Ht=e(require(\"react-data-table-component\"));var Tg=({value:g,title:t,children:I})=>U.default.createElement(\"div\",{title:g,className:\"order-status table-row-custom\"},U.default.createElement(\"h4\",{className:\"hide-title\"},t),I);var jg=e(require(\"react\"));var St=e(require(\"react\"));var Et=e(require(\"react\"));var _t=e(require(\"react\"));var Pt=require(\"@tinymce/tinymce-react\"),qt=e(require(\"react\"));var $t=require(\"react-router-dom\"),Jg=e(require(\"react\"));var Kt=e(require(\"react\"));var rg=e(require(\"react\")),ge=e(require(\"@mui/material/Dialog\"));var zg=e(require(\"react\")),te=e(require(\"@mui/material/Dialog\"));var Mg=e(require(\"react\"));var sg=e(require(\"react\")),ee=e(require(\"react-select\"));var Ie=e(require(\"axios\")),ie=require(\"react-csv\"),ne=require(\"@wordpress/i18n\"),Ce=e(require(\"@mui/material/Dialog\")),w=e(require(\"react\"));var ae=require(\"react-date-range\"),Ta=require(\"react-date-range/dist/styles.css\"),ja=require(\"react-date-range/dist/theme/default.css\"),Hg={apiurl:\"#\",khali_dabba:!0,nonce:\"nonce\",export_button:\"#\"},Ja=`${Hg.apiurl}/pluginelements/v1/get-subscriber-list`,Ra=`${Hg.apiurl}/pluginelements/v1/get-table-segment`,za=(0,w.useRef)(null),Ma=(0,w.useRef)(null);var lg=e(require(\"react\")),Ae=e(require(\"axios\")),oe=require(\"@reactour/tour\");0&&(module.exports={AutoGeneratedDefaultInput,BasicInput,Button,CalendarInput,Card,CheckboxCustomImg,FileInput,Heading,Log,ModulePopup,ModuleProvider,MultiCheckBox,MultiNumInput,ProPopup,RadioInput,SettingProvider,TableCell,TextArea,getApiLink,getApiResponse,sendApiResponse,useModules,useSetting});\n","// Export all components here\nexport * from './components';\nexport { SettingProvider, useSetting } from \"./context/SettingContext\";\nexport { ModuleProvider, useModules } from \"./context/ModuleContext\";\nexport { getApiResponse, sendApiResponse, getApiLink } from \"./service/apiService\";\n","import React, { MouseEvent } from \"react\";\n\nexport interface ButtonProps {\n    wrapperClass?: string;\n    inputClass?: string;\n    type?: \"button\" | \"submit\" | \"reset\";\n    value?: string;\n    onClick?: (e: MouseEvent<HTMLInputElement>) => void;\n    proSetting?: boolean;\n    description?: string;\n    descClass?: string;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n    wrapperClass,\n    inputClass,\n    type = \"button\",\n    value,\n    onClick,\n    proSetting,\n    description,\n    descClass\n}) => {\n    return (\n        <div className={wrapperClass}>\n            <input\n                className={inputClass}\n                type={type}\n                value={value}\n                onClick={(e) => onClick?.(e)}\n            />\n            {proSetting && <span className=\"admin-pro-tag\">pro</span>}\n            {description && (\n                <p className={descClass} dangerouslySetInnerHTML={{ __html: description }} />\n            )}\n        </div>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport './Card.css';\n\nexport interface CardProps {\n  title?: string;\n  children: React.ReactNode;\n  width?: string;\n  elevation?: 'low' | 'medium' | 'high';\n}\n\nexport const Card: React.FC<CardProps> = ({\n  title,\n  children,\n  width = '300px',\n  elevation = 'medium',\n}) => {\n  return (\n    <div className={`card card-elevation-${elevation}`} style={{ width }}>\n      {title && <div className=\"card-title\">{title}</div>}\n      <div className=\"card-content\">{children}</div>\n    </div>\n  );\n};","import React, { ChangeEvent, MouseEvent, FocusEvent } from \"react\";\n\nexport interface BasicInputProps {\n    wrapperClass?: string;\n    inputLabel?: string;\n    inputClass?: string;\n    id?: string;\n    type?: \"text\" | \"button\" | \"number\"| \"color\" | \"password\" | \"email\" | \"file\" | \"range\" |\"url\";\n    name?: string;\n    value?: string | number;\n    placeholder?: string;\n    min?: number;\n    max?: number;\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n    onClick?: (e: MouseEvent<HTMLInputElement>) => void;\n    onMouseOver?: (e: MouseEvent<HTMLInputElement>) => void;\n    onMouseOut?: (e: MouseEvent<HTMLInputElement>) => void;\n    onFocus?: (e: FocusEvent<HTMLInputElement>) => void;\n    parameter?: string;\n    proSetting?: boolean;\n    description?: string;\n    descClass?: string;\n    rangeUnit?: string;\n    disabled?: boolean;\n}\n\nexport const BasicInput: React.FC<BasicInputProps> = ({\n    wrapperClass,\n    inputLabel,\n    inputClass,\n    id,\n    type = \"text\",\n    name = \"basic-input\",\n    value,\n    placeholder,\n    min,\n    max,\n    onChange,\n    onClick,\n    onMouseOver,\n    onMouseOut,\n    onFocus,\n    parameter,\n    proSetting,\n    description,\n    descClass,\n    rangeUnit,\n    disabled = false\n}) => {\n    return (\n        <div className={wrapperClass}>\n            {inputLabel && <label htmlFor={id}>{inputLabel}</label>}\n            <input\n                className={[\"basic-input\", inputClass].join(\" \")}\n                id={id}\n                type={type}\n                name={name}\n                placeholder={placeholder}\n                {...(type !== \"file\" && onChange ? { value } : {})}\n                {...(type === \"number\" || type === \"range\" ? { min, max } : {})}\n                onChange={onChange}\n                onClick={onClick}\n                onMouseOver={onMouseOver}\n                onMouseOut={onMouseOut}\n                onFocus={onFocus}\n                disabled={disabled}\n            />\n            {parameter && <span className=\"parameter\" dangerouslySetInnerHTML={{ __html: parameter }} />}\n            {proSetting && <span className=\"admin-pro-tag\">pro</span>}\n            {description && <p className={descClass} dangerouslySetInnerHTML={{ __html: description }} />}\n            {type === \"range\" && (\n                <output className={descClass}>\n                    {value ? value : 0}\n                    {rangeUnit}\n                </output>\n            )}\n        </div>\n    );\n};\n\nexport default BasicInput;\n","import React,{ useState } from \"react\";\nimport DatePicker from \"react-multi-date-picker\";\n\nexport interface CalendarInputProps {\n    wrapperClass?: string;\n    inputClass?: string;\n    format?: string;\n    multiple?: boolean;\n    range?: boolean;\n    value: string;\n    onChange?: (date: any) => void;\n    proSetting?: boolean;\n}\n\nexport const CalendarInput: React.FC<CalendarInputProps> = (props) => {\n    let formattedDate: any;\n    const dates = props.value.split(\",\");\n\n    if (dates.length === 1 && !dates[0].includes(\" - \")) {\n        formattedDate = new Date(dates[0].trim());\n    } else {\n        formattedDate = dates.map((date) => {\n            if (date.includes(\" - \")) {\n                const rangeDates = date.split(\" - \");\n                const startDate = new Date(rangeDates[0].trim());\n                const endDate = new Date(rangeDates[1].trim());\n                return [startDate, endDate];\n            } else {\n                return new Date(date.trim());\n            }\n        });\n    }\n\n    const [selectedDate, setSelectedDate] = useState<any>(formattedDate || \"\");\n\n    const handleDateChange = (e: any) => {\n        setSelectedDate(e);\n        props.onChange?.(e);\n    };\n\n    return (\n        <div className={props.wrapperClass}>\n            <DatePicker\n                className={props.inputClass}\n                format={props.format || \"YYYY-MM-DD\"}\n                multiple={props.multiple}\n                range={props.range}\n                value={selectedDate}\n                placeholder={\"YYYY-MM-DD\"}\n                onChange={handleDateChange}\n            />\n            {props.proSetting && <span className=\"admin-pro-tag\">pro</span>}\n        </div>\n    );\n};\n\nexport default CalendarInput;\n","import React, { ChangeEvent, MouseEvent, FocusEvent } from \"react\";\n\nexport interface FileInputProps {\n    wrapperClass?: string;\n    inputClass?: string;\n    id?: string;\n    type?: string;\n    name?: string;\n    value?: string;\n    placeholder?: string;\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n    onClick?: (e: MouseEvent<HTMLInputElement>) => void;\n    onMouseOver?: (e: MouseEvent<HTMLInputElement>) => void;\n    onMouseOut?: (e: MouseEvent<HTMLInputElement>) => void;\n    onFocus?: (e: FocusEvent<HTMLInputElement>) => void;\n    proSetting?: boolean;\n    imageSrc?: string;\n    imageWidth?: number | string;\n    imageHeight?: number | string;\n    buttonClass?: string;\n    onButtonClick?: (e: MouseEvent<HTMLButtonElement>) => void;\n    openUploader?: string;\n    description?: string;\n    descClass?: string;\n}\n\nexport const FileInput: React.FC<FileInputProps> = (props) => {\n    return (\n        <div className={props.wrapperClass}>\n            <div className=\"file-uploader\">\n                <input\n                    className={props.inputClass}\n                    id={props.id}\n                    type={props.type || \"file\"}\n                    name={props.name || \"file-input\"}\n                    value={props.value}\n                    placeholder={props.placeholder}\n                    onChange={(e) => props.onChange?.(e)}\n                    onClick={(e) => props.onClick?.(e)}\n                    onMouseOver={(e) => props.onMouseOver?.(e)}\n                    onMouseOut={(e) => props.onMouseOut?.(e)}\n                    onFocus={(e) => props.onFocus?.(e)}\n                />\n                {props.proSetting && <span className=\"admin-pro-tag\">pro</span>}\n                {props.imageSrc && (\n                    <img\n                        src={props.imageSrc}\n                        width={props.imageWidth}\n                        height={props.imageHeight}\n                        alt=\"Uploaded Preview\"\n                    />\n                )}\n                <button\n                    className={props.buttonClass}\n                    type=\"button\"\n                    onClick={(e) => props.onButtonClick?.(e)}\n                >\n                    {props.openUploader}\n                </button>\n            </div>\n            {props.description && (\n                <p\n                    className={props.descClass}\n                    dangerouslySetInnerHTML={{ __html: props.description }}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default FileInput;\n","import React from \"react\";\n\nexport interface HeadingProps {\n    wrapperClass?: string;\n    blocktext?: string;\n}\n\nexport const Heading: React.FC<HeadingProps> = ({ wrapperClass, blocktext }) => {\n    return (\n        <div className={wrapperClass}>\n            {blocktext && <h5 dangerouslySetInnerHTML={{ __html: blocktext }}></h5>}\n        </div>\n    );\n};\n\nexport default Heading;\n","import React, { ChangeEvent, MouseEvent } from \"react\";\n\nexport interface Option {\n    key: string;\n    value: string;\n    label: string;\n    name?: string;\n    proSetting?: boolean;\n    hints?: string;\n}\n\nexport interface MultiCheckBoxProps {\n    wrapperClass?: string;\n    selectDeselect?: boolean;\n    selectDeselectClass?: string;\n    selectDeselectValue?: string;\n    onMultiSelectDeselectChange?: (e: MouseEvent<HTMLButtonElement>) => void;\n    options: Option[];\n    value?: string[];\n    inputWrapperClass?: string;\n    rightContent?: boolean;\n    rightContentClass?: string;\n    inputInnerWrapperClass?: string;\n    tour?: string;\n    inputClass?: string;\n    idPrefix?: string;\n    type?: \"checkbox\" | \"radio\";\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n    proChanged?: () => void;\n    proSetting?: boolean;\n    hintOuterClass?: string;\n    description?: string;\n    descClass?: string;\n    hintInnerClass?: string;\n}\n\nexport const MultiCheckBox: React.FC<MultiCheckBoxProps> = (props) => {\n    return (\n        <div className={props.wrapperClass}>\n            {props.selectDeselect && (\n                <button\n                    className={props.selectDeselectClass}\n                    onClick={(e) => {\n                        e.preventDefault();\n                        props.onMultiSelectDeselectChange?.(e);\n                    }}\n                >\n                    {props.selectDeselectValue}\n                </button>\n            )}\n            <div className=\"wrapper\">\n                {props.options.map((option) => {\n                    const checked = props.value?.includes(option.value) ?? false;\n\n                    return (\n                        <div key={option.key} className={props.inputWrapperClass}>\n                            {props.rightContent && (\n                                <p\n                                    className={props.rightContentClass}\n                                    dangerouslySetInnerHTML={{ __html: option.label }}\n                                ></p>\n                            )}\n                            <div className={props.inputInnerWrapperClass} data-tour={props.tour}>\n                                <input\n                                    className={props.inputClass}\n                                    id={`${props.idPrefix}-${option.key}`}\n                                    type={props.type || \"checkbox\"}\n                                    name={option.name || \"basic-input\"}\n                                    value={option.value}\n                                    checked={checked}\n                                    onChange={(e) => {\n                                        if (option.proSetting) {\n                                            props.proChanged?.();\n                                        } else {\n                                            props.onChange?.(e);\n                                        }\n                                    }}\n                                />\n                                <label htmlFor={`${props.idPrefix}-${option.key}`}></label>\n                            </div>\n                            {props.proSetting && <span className=\"admin-pro-tag\">pro</span>}\n                            {!props.rightContent && (\n                                <p\n                                    className={props.rightContentClass}\n                                    dangerouslySetInnerHTML={{ __html: option.label }}\n                                ></p>\n                            )}\n                            {option.proSetting && <span className=\"admin-pro-tag\">pro</span>}\n                            {option.hints && (\n                                <span\n                                    className={props.hintOuterClass}\n                                    dangerouslySetInnerHTML={{ __html: option.hints }}\n                                ></span>\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n            {props.description && (\n                <p className={props.descClass} dangerouslySetInnerHTML={{ __html: props.description }}></p>\n            )}\n        </div>\n    );\n};\n\nexport default MultiCheckBox;\n","import React, { ChangeEvent } from \"react\";\n\nexport interface MultiNumOption {\n    key: string;\n    value: string | number;\n    label: string;\n    name?: string;\n    type: string;\n}\n\nexport interface MultiNumInputProps {\n    parentWrapperClass?: string;\n    childWrapperClass?: string;\n    options: MultiNumOption[];\n    value?: { key: string; value: string | number }[];\n    inputWrapperClass?: string;\n    innerInputWrapperClass?: string;\n    inputLabelClass?: string;\n    inputClass?: string;\n    idPrefix?: string;\n    keyName?: string;\n    proSetting?: boolean;\n    description?: string;\n    descClass?: string;\n    onChange?: (\n        e: ChangeEvent<HTMLInputElement>,\n        keyName?: string,\n        optionKey?: string,\n        index?: number\n    ) => void;\n}\n\nexport const MultiNumInput: React.FC<MultiNumInputProps> = ({\n    parentWrapperClass,\n    childWrapperClass,\n    options,\n    value = [],\n    inputWrapperClass,\n    innerInputWrapperClass,\n    inputLabelClass,\n    inputClass,\n    idPrefix = \"multi-num\",\n    keyName,\n    proSetting,\n    description,\n    descClass,\n    onChange,\n}) => {\n    return (\n        <div className={parentWrapperClass}>\n            <div className={childWrapperClass}>\n                {options.map((option, index) => {\n                    const selectedValue = value.find((val) => val.key === option.key)?.value ?? \"\";\n\n                    return (\n                        <div key={option.key} className={inputWrapperClass}>\n                            <div className={innerInputWrapperClass}>\n                                <div className={inputLabelClass}>{option.label}</div>\n                                <input\n                                    id={`${idPrefix}-${option.key}`}\n                                    className={inputClass}\n                                    type={option.type}\n                                    name={option.name}\n                                    value={selectedValue}\n                                    onChange={(e) => onChange?.(e, keyName, option.key, index)}\n                                />\n                                {proSetting && <span className=\"admin-pro-tag\">pro</span>}\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n            {description && (\n                <p className={descClass} dangerouslySetInnerHTML={{ __html: description }}></p>\n            )}\n        </div>\n    );\n};\n\nexport default MultiNumInput;\n","import React, { ChangeEvent } from \"react\";\n\nexport interface RadioOption {\n    key: string;\n    keyName?: string;\n    value: string;\n    label: string;\n    name: string;\n    color?: string[] | string; // Can be an array of colors or an image URL\n}\n\nexport interface RadioInputProps {\n    name?: string;\n    wrapperClass?: string;\n    inputWrapperClass?: string;\n    activeClass?: string;\n    inputClass?: string;\n    idPrefix?: string;\n    type?: \"radio-select\" | \"radio-color\" | \"default\";\n    options: RadioOption[];\n    value?: string;\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n    radiSelectLabelClass?: string;\n    labelImgClass?: string;\n    labelOverlayClass?: string;\n    labelOverlayText?: string;\n    proSetting?: boolean;\n    description?: string;\n    descClass?: string;\n    keyName?: string;\n}\n\nexport const RadioInput: React.FC<RadioInputProps> = (props) => {\n    return (\n        <div className={props.wrapperClass}>\n            {props.options.map((option) => {\n                const checked = props.value === option.value;\n                return (\n                    <div\n                        key={option.key}\n                        className={`${props.inputWrapperClass} ${checked ? props.activeClass : \"\"}`}\n                    >\n                        <input\n                            className={props.inputClass}\n                            id={`${props.idPrefix}-${option.key}`}\n                            type=\"radio\"\n                            name={option.name}\n                            checked={checked}\n                            value={option.value}\n                            onChange={(e) => props.onChange?.(e)}\n                        />\n                        <label\n                            htmlFor={`${props.idPrefix}-${option.key}`}\n                            className={props.type === \"radio-select\" ? props.radiSelectLabelClass : \"\"}\n                        >\n                            {option.label}\n                            {props.type === \"radio-color\" && (\n                                <p className=\"color-palette\">\n                                    {Array.isArray(option.color) &&\n                                        option.color.map((color, index) => (\n                                            <div key={index} style={{ backgroundColor: color }}> &nbsp; </div>\n                                        ))}\n                                </p>\n                            )}\n                            {props.type === \"radio-select\" && typeof option.color === \"string\" && (\n                                <>\n                                    <img src={option.color} alt={option.label} className={props.labelImgClass} />\n                                    <div className={props.labelOverlayClass}>{props.labelOverlayText}</div>\n                                </>\n                            )}\n                        </label>\n                        {props.proSetting && <span className=\"admin-pro-tag\">pro</span>}\n                    </div>\n                );\n            })}\n            {props.description && (\n                <p className={props.descClass} dangerouslySetInnerHTML={{ __html: props.description }}></p>\n            )}\n        </div>\n    );\n};\n\nexport default RadioInput;\n","import React from \"react\";\nimport Select, { MultiValue, SingleValue, ActionMeta } from \"react-select\";\n\nexport interface SelectOptions {\n    value: string;\n    label: string;\n    index?: number;\n}\n\nexport interface SelectInputProps {\n    wrapperClass?: string;\n    selectDeselect?: boolean;\n    selectDeselectClass?: string;\n    selectDeselectValue?: string;\n    onMultiSelectDeselectChange?: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    options: SelectOptions[];\n    value?: string;\n    inputClass?: string;\n    type?: \"single-select\" | \"multi-select\";\n    onChange?: (newValue: SingleValue<SelectOptions> | MultiValue<SelectOptions>, actionMeta: ActionMeta<SelectOptions>) => void;\n    onClick?: (e: React.MouseEvent<HTMLInputElement>) => void;\n    proSetting?: boolean;\n    description?: string;\n    descClass?: string;\n}\n\nconst SelectInput: React.FC<SelectInputProps> = ({\n    wrapperClass,\n    selectDeselect,\n    selectDeselectClass,\n    selectDeselectValue,\n    onMultiSelectDeselectChange,\n    options,\n    value,\n    inputClass,\n    type = \"single-select\",\n    onChange,\n    onClick,\n    proSetting,\n    description,\n    descClass,\n}) => {\n    // Convert options to react-select format\n    const optionsData: SelectOptions[] = options.map((option, index) => ({\n        value: option.value,\n        label: option.label,\n        index,\n    }));\n\n    // Find default selected value\n    const defaultValue = optionsData.find((opt) => opt.value === value) || null;\n\n    return (\n        <div className={wrapperClass}>\n            {selectDeselect && (\n                <button\n                    className={selectDeselectClass}\n                    onClick={(e) => {\n                        e.preventDefault();\n                        onMultiSelectDeselectChange?.(e);\n                    }}\n                >\n                    {selectDeselectValue}\n                </button>\n            )}\n            <Select\n                className={inputClass}\n                value={defaultValue}\n                options={optionsData}\n                onChange={(newValue, actionMeta) => onChange?.(newValue, actionMeta)}\n                isMulti={type === \"multi-select\"}\n            />\n            {proSetting && <span className=\"admin-pro-tag\">pro</span>}\n            {description && (\n                <p className={descClass} dangerouslySetInnerHTML={{ __html: description }}></p>\n            )}\n        </div>\n    );\n};\n\nexport default SelectInput;\n","import React, { ChangeEvent, MouseEvent, FocusEvent } from \"react\";\n\nexport interface TextAreaProps {\n    wrapperClass?: string;\n    inputClass?: string;\n    id?: string;\n    name?: string;\n    value?: string | number;\n    maxLength?: number;\n    placeholder?: string;\n    rowNumber?: number;\n    colNumber?: number;\n    proSetting?: boolean;\n    description?: string;\n    descClass?: string;\n    onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n    onClick?: (e: MouseEvent<HTMLTextAreaElement>) => void;\n    onMouseOver?: (e: MouseEvent<HTMLTextAreaElement>) => void;\n    onMouseOut?: (e: MouseEvent<HTMLTextAreaElement>) => void;\n    onFocus?: (e: FocusEvent<HTMLTextAreaElement>) => void;\n}\n\nexport const TextArea: React.FC<TextAreaProps> = ({\n    wrapperClass,\n    inputClass,\n    id,\n    name,\n    value,\n    maxLength,\n    placeholder,\n    rowNumber = 4,\n    colNumber = 50,\n    proSetting,\n    description,\n    descClass,\n    onChange,\n    onClick,\n    onMouseOver,\n    onMouseOut,\n    onFocus,\n}) => {\n    return (\n        <div className={wrapperClass}>\n            <textarea\n                className={inputClass}\n                id={id}\n                name={name}\n                value={value}\n                maxLength={maxLength}\n                placeholder={placeholder}\n                rows={rowNumber}\n                cols={colNumber}\n                onChange={onChange}\n                onClick={onClick}\n                onMouseOver={onMouseOver}\n                onMouseOut={onMouseOut}\n                onFocus={onFocus}\n            />\n            {proSetting && <span className=\"admin-pro-tag\">pro</span>}\n            {description && (\n                <p className={descClass} dangerouslySetInnerHTML={{ __html: description }}></p>\n            )}\n        </div>\n    );\n};\n\nexport default TextArea;\n","import React,{ useState, useEffect, useRef } from \"react\";\nimport { __ } from \"@wordpress/i18n\";\nimport \"./ButtonCustomizer.scss\";\n\ninterface ButtonCustomizerProps {\n  onChange: (key: string, value: any, isRestoreDefaults?: boolean) => void;\n  setting: Record<string, any>;\n  className?: string;\n  text: string;\n  proSetting?: any; \n}\n\ninterface CustomizerProps {\n  onChange: (key: string, value: any, isRestoreDefaults?: boolean) => void;\n  setting: Record<string, any>;\n  setHoverOn: (hover: boolean) => void;\n}\n\nconst Customizer: React.FC<CustomizerProps> = ({ onChange, setting, setHoverOn }) => {\n  const [select, setSelect] = useState<string>(\"\");\n  const [buttonLink, setButtonLink] = useState<string>(setting.button_link || \"\");\n\n  useEffect(() => {\n    setButtonLink(setting.button_link || \"\");\n  }, [setting.button_link]);\n\n  return (\n    <>\n      {/* Heading section */}\n      <div className=\"btn-customizer-menu\">\n        {[\n          { title: \"Change Colors\", iconClass: \"color-img\", type: \"color\" },\n          { title: \"Border Style\", iconClass: \"adminLib-crop-free\", type: \"border\" },\n          { title: \"Text Style\", iconClass: \"adminLib-text-fields\", type: \"font\" },\n          { title: \"Change Size\", iconClass: \"adminLib-resize\", type: \"size\" },\n          { title: \"Add Url\", iconClass: \"adminLib-link\", type: \"link\" },\n          { title: \"Settings\", iconClass: \"adminLib-setting\", type: \"setting\" }\n        ].map(({ title, iconClass, type }) => (\n          <div key={type} title={title} className=\"btn-customizer-menu-items\" onClick={() => setSelect(type)}>\n            <i className={`admin-font ${iconClass}`}></i>\n          </div>\n        ))}\n      </div>\n\n      {select && (\n        <div className=\"customizer-setting-wrapper\">\n          {/* Wrapper close button */}\n          <button onClick={() => setSelect(\"\")} className=\"wrapper-close\">\n            <i className=\"admin-font adminLib-cross\"></i>\n          </button>\n\n          {/* Render selected setting */}\n          {select === \"color\" && (\n            <div className=\"section-wrapper color\">\n              <div className=\"simple\">\n                {[\n                  { label: __(\"Background Color\", \"catalogx\"), key: \"button_background_color\" },\n                  { label: __(\"Font Color\", \"catalogx\"), key: \"button_text_color\" }\n                ].map(({ label, key }) => (\n                  <div key={key} className=\"section\">\n                    <span className=\"label\">{label}</span>\n                    <div className=\"property-section\">\n                      <input type=\"color\" value={setting[key] || \"#000000\"} onChange={(e) => onChange(key, e.target.value)} />\n                      <input type=\"text\" value={setting[key] || \"#000000\"} onChange={(e) => onChange(key, e.target.value)} />\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"hover\" onMouseEnter={() => setHoverOn(true)} onMouseLeave={() => setHoverOn(false)}>\n                {[\n                  { label: __(\"Background Color On Hover\", \"catalogx\"), key: \"button_background_color_onhover\" },\n                  { label: __(\"Font Color On Hover\", \"catalogx\"), key: \"button_text_color_onhover\" }\n                ].map(({ label, key }) => (\n                  <div key={key} className=\"section\">\n                    <span className=\"label\">{label}</span>\n                    <div className=\"property-section\">\n                      <input type=\"color\" value={setting[key] || \"#000000\"} onChange={(e) => onChange(key, e.target.value)} />\n                      <input type=\"text\" value={setting[key] || \"#000000\"} onChange={(e) => onChange(key, e.target.value)} />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {select === \"link\" && (\n            <div className=\"section-wrapper link\">\n              <div className=\"simple\">\n                <div className=\"link-box\">\n                  <input\n                    className=\"link-input\"\n                    type=\"text\"\n                    value={buttonLink}\n                    onChange={(e) => setButtonLink(e.target.value)}\n                    placeholder=\"Paste your URL/link\"\n                  />\n                  <button\n                    onClick={(e) => {\n                      e.preventDefault();\n                      onChange(\"button_link\", buttonLink);\n                    }}\n                  >\n                    <i className=\"admin-font adminLib-send\"></i>\n                  </button>\n                </div>\n              </div>\n              <p><span>*</span> Keep it blank for default button behavior</p>\n            </div>\n          )}\n\n          {select === \"setting\" && (\n            <div className=\"section-wrapper settings\">\n              <div className=\"section\">\n                <span className=\"label\">{__(\"System settings\", \"catalogx\")}</span>\n                <div className=\"property-section\">\n                  <button onClick={(e) => {\n                    e.preventDefault();\n                    onChange(\"\", {}, true);\n                  }}>\n                    Restore default\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst ButtonCustomizer: React.FC<ButtonCustomizerProps> = ({ onChange, setting = {}, className, text }) => {\n  const [hoverOn, setHoverOn] = useState(false);\n  const [buttonHoverOn, setButtonHoverOn] = useState(false);\n  const buttonRef = useRef<HTMLDivElement | null>(null);\n\n  // Set button styles based on hover state\n  const style: React.CSSProperties = {\n    border: \"1px solid transparent\",\n    backgroundColor: buttonHoverOn ? setting.button_background_color_onhover : setting.button_background_color,\n    color: buttonHoverOn ? setting.button_text_color_onhover : setting.button_text_color,\n    borderColor: buttonHoverOn ? setting.button_border_color_onhover : setting.button_border_color,\n    borderRadius: setting.button_border_radious ? `${setting.button_border_radious}px` : \"0px\",\n    borderWidth: setting.button_border_size ? `${setting.button_border_size}px` : \"0px\",\n    fontSize: setting.button_font_size,\n    fontWeight: setting.button_font_width,\n    padding: setting.button_padding ? `${setting.button_padding}px` : \"0px\",\n    margin: setting.button_margin ? `${setting.button_margin}px` : \"0px\",\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (!buttonRef.current?.contains(event.target as Node)) {\n        setHoverOn(false);\n      }\n    };\n\n    document.body.addEventListener(\"click\", handleClickOutside);\n    return () => {\n      document.body.removeEventListener(\"click\", handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div ref={buttonRef} className={`${className ? `${className} ` : \"\"}btn-wrapper`}>\n      <button\n        onClick={(e) => {\n          e.preventDefault();\n          setHoverOn(!hoverOn);\n        }}\n        className={`btn-preview ${hoverOn ? \"active\" : \"\"}`}\n        style={style}\n        onMouseEnter={() => setButtonHoverOn(true)}\n        onMouseLeave={() => setButtonHoverOn(false)}\n      >\n        {text}\n      </button>\n\n      {hoverOn && (\n        <div className=\"btn-customizer\">\n          <Customizer onChange={onChange} setHoverOn={setButtonHoverOn} setting={setting} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ButtonCustomizer;\n","import React, { useEffect, useRef, useState } from 'react';\nimport './FormCustomizer.scss';\nimport { useSetting } from '../../../context/SettingContext';\nimport ButtonCustomizer from '../ButtonCustomiser/ButtonCustomiser';\n\n\ninterface FormCustomizerProps {\n    value?: string;\n    buttonText?: string;\n    proSetting?: any;\n    onChange: (key: string, value: any, isRestoreDefaults?: boolean) => void;\n}\n\nconst FormCustomizer: React.FC<FormCustomizerProps> = ({ buttonText = 'Submit', proSetting, onChange }) => {\n    const [currentHoverOn, setCurrentHoverOn] = useState<string>('');\n    const [currentEditSection, setCurrentEditSection] = useState<string>('');\n    const inputRef = useRef<HTMLInputElement | null>(null);\n    const buttonRef = useRef<HTMLDivElement | null>(null);\n\n    const { setting } = useSetting();\n\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (buttonRef.current && !buttonRef.current.contains(event.target as Node)) {\n                setCurrentHoverOn('');\n                setCurrentEditSection('');\n            }\n        };\n\n        document.body.addEventListener('click', handleClickOutside);\n        return () => {\n            document.body.removeEventListener('click', handleClickOutside);\n        };\n    }, []);\n\n    return (\n        <div className=\"formcustomizer-wrapper\">\n            <div className=\"wrapper-content\">\n                <div className=\"label-section\">\n                    <input\n                        ref={currentHoverOn === 'description' ? inputRef : null} // Use inputRef for inputs\n                        className={currentHoverOn === 'description' ? 'active' : ''}\n                        onClick={() => setCurrentHoverOn('description')}\n                        onChange={(e) => onChange('alert_text', e.target.value)}\n                        value={setting.alert_text || ''}\n                    />\n                </div>\n                <div className=\"form-section\">\n                    <div ref={currentHoverOn === 'email_input' ? buttonRef : null} className=\"input-section\">\n                        <input\n                            readOnly\n                            onClick={() => setCurrentHoverOn('email_input')}\n                            className={currentHoverOn === 'email_input' ? 'active' : ''}\n                            type=\"email\"\n                            placeholder={setting.email_placeholder_text || ''}\n                        />\n\n                        {currentHoverOn === 'email_input' && (\n                            <div className=\"input-editor\" onClick={() => setCurrentEditSection('text')}>\n                                <p>Edit</p>\n                                <span>\n                                    <i className=\"admin-font adminLib-edit\"></i>\n                                </span>\n                            </div>\n                        )}\n\n                        {currentHoverOn === 'email_input' && currentEditSection === 'text' && (\n                            <div className=\"setting-wrapper\">\n                                <div className=\"setting-nav\">...</div>\n                                <button\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        setCurrentEditSection('');\n                                    }}\n                                    className=\"wrapper-close\"\n                                >\n                                    <i className=\"admin-font adminLib-cross\"></i>\n                                </button>\n                                <div className=\"setting-section-dev\">\n                                    <span className=\"label\">Placeholder text</span>\n                                    <div className=\"property-section\">\n                                        <input\n                                            type=\"text\"\n                                            value={setting.email_placeholder_text || ''}\n                                            onChange={(e) => onChange('email_placeholder_text', e.target.value)}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"button-section\">\n                        <ButtonCustomizer\n                            text={buttonText}\n                            proSetting={proSetting}\n                            setting={setting['customize_btn']}\n                            onChange={(key, value, isRestoreDefaults = false) => {\n                                const previousSetting = setting['customize_btn'] || {};\n                                if (isRestoreDefaults) {\n                                    onChange('customize_btn', value);\n                                } else {\n                                    onChange('customize_btn', { ...previousSetting, [key]: value });\n                                }\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default FormCustomizer;\n","import React, { createContext, useReducer, useContext, ReactNode } from \"react\";\n\n// Define the type for the settings state.\ninterface SettingState {\n    settingName: string;\n    setting: Record<string, any>;\n}\n\n// Define action types.\ntype SettingAction =\n    | { type: \"SET_SETTINGS\"; payload: { settingName: string; setting: Record<string, any> } }\n    | { type: \"UPDATE_SETTINGS\"; payload: { key: string; value: any } }\n    | { type: \"CLEAR_SETTINGS\" };\n\n// Create the context with a default value.\nconst SettingContext = createContext<SettingState & {\n    setSetting: (settingName: string, setting: Record<string, any>) => void;\n    updateSetting: (key: string, value: any) => void;\n    clearSetting: () => void;\n} | null>(null);\n\n// Reducer function to manage settings state.\nconst settingReducer = (state: SettingState, action: SettingAction): SettingState => {\n    switch (action.type) {\n        case \"SET_SETTINGS\":\n            return { ...action.payload };\n        case \"UPDATE_SETTINGS\":\n            return { ...state, setting: { ...state.setting, [action.payload.key]: action.payload.value } };\n        case \"CLEAR_SETTINGS\":\n            return { settingName: \"\", setting: {} };\n        default:\n            return state;\n    }\n};\n\n// Define props for SettingProvider.\ninterface SettingProviderProps {\n    children: ReactNode;\n}\n\n// Provider component.\nexport const SettingProvider: React.FC<SettingProviderProps> = ({ children }) => {\n    const [state, dispatch] = useReducer(settingReducer, { settingName: \"\", setting: {} });\n\n    const setSetting = (settingName: string, setting: Record<string, any>) => {\n        dispatch({ type: \"SET_SETTINGS\", payload: { settingName, setting } });\n    };\n\n    const updateSetting = (key: string, value: any) => {\n        dispatch({ type: \"UPDATE_SETTINGS\", payload: { key, value } });\n    };\n\n    const clearSetting = () => {\n        dispatch({ type: \"CLEAR_SETTINGS\" });\n    };\n\n    return (\n        <SettingContext.Provider value={{ ...state, setSetting, updateSetting, clearSetting }}>\n            {children}\n        </SettingContext.Provider>\n    );\n};\n\n// Custom hook to use the settings context.\nexport const useSetting = () => {\n    const context = useContext(SettingContext);\n    if (!context) {\n        throw new Error(\"useSetting must be used within a SettingProvider\");\n    }\n    return context;\n};\n","import React, { ChangeEvent } from \"react\";\n\nexport interface CheckboxCustomImgProps {\n    wrapperClass?:string,\n    syncDirectionsClass?:string,\n    syncMetaClass?:string,\n    settingsMetaDescriptionClass?:string,\n    labelClass?:string,\n    value?: string[];\n    onChange: (updatedValue: string[]) => void;\n    syncDirections: {\n        value: string;\n        img1: string;\n        img2: string;\n        label: string;\n    }[];\n    description?: string;\n    proSetting?: boolean;\n}\n\nexport const CheckboxCustomImg: React.FC<CheckboxCustomImgProps> = ({\n    wrapperClass,\n    syncDirectionsClass,\n    syncMetaClass,\n    labelClass,\n    settingsMetaDescriptionClass,\n    value = [],\n    onChange,\n    syncDirections,\n    description,\n    proSetting,\n}) => {\n    const handleCheckboxChange = (directionValue: string, isChecked: boolean) => {\n        let updatedValue = value.filter((element) => element !== directionValue);\n\n        if (isChecked) {\n            updatedValue = [...updatedValue, directionValue];\n        }\n\n        onChange(updatedValue);\n    };\n\n    return (\n        <>\n            <div className={wrapperClass}>\n                {syncDirections.map((direction, index) => (\n                    <div className={syncDirectionsClass} key={index}>\n                        <input\n                            type=\"checkbox\"\n                            checked={value.includes(direction.value)}\n                            onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                handleCheckboxChange(direction.value, e.target.checked)\n                            }\n                        />\n                        <div className={syncMetaClass}>\n                            <img src={direction.img1} alt=\"\" />\n                            <i className=\"admin-font adminLib-arrow-right\"></i>\n                            <img src={direction.img2} alt=\"\" />\n                        </div>\n                        <p className={labelClass}>{direction.label}</p>\n                    </div>\n                ))}\n\n                {/* Render the pro tag if needed */}\n                {proSetting && <span>pro</span>}\n            </div>\n\n            {/* Render the description if provided */}\n            {description && (\n                <p\n                    className={settingsMetaDescriptionClass}\n                    dangerouslySetInnerHTML={{ __html: description }}\n                />\n            )}\n        </>\n    );\n};\n\nexport default CheckboxCustomImg;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { getApiLink } from \"../../../service/apiService\";\nimport \"./Log.scss\";\n\nexport interface LogProps {\n  fetchApiLink: string;\n  downloadApiLink: string;\n  downloadFileName: string;\n  appLocalizer?:{\n    nonce?:string,\n    tab_name?:string,\n  },\n}\n\nexport const Log: React.FC<LogProps> = ({ fetchApiLink, downloadApiLink, downloadFileName, appLocalizer }) => {\n  const [logData, setLogData] = useState<string[]>([]);\n  const [copied, setCopied] = useState<boolean>(false);\n\n  useEffect(() => {\n    axios\n      .post(getApiLink(fetchApiLink), { logcount: 100 }, { headers: { \"X-WP-Nonce\": appLocalizer?.nonce } })\n      .then((response) => {\n        setLogData(response.data);\n      });\n  }, [fetchApiLink]);\n\n  const handleDownloadLog = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    axios({\n      url: getApiLink(downloadApiLink),\n      method: \"POST\",\n      headers: { \"X-WP-Nonce\": appLocalizer?.nonce },\n      data: { file: downloadFileName },\n      responseType: \"blob\",\n    })\n      .then((response) => {\n        const blob = new Blob([response.data], { type: response.headers[\"content-type\"] });\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.setAttribute(\"download\", downloadFileName);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      })\n      .catch((error) => console.error(\"Error downloading file:\", error));\n  };\n\n  const handleClearLog = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    axios\n      .post(getApiLink(fetchApiLink), { logcount: 100, clear: true }, { headers: { \"X-WP-Nonce\": appLocalizer?.nonce } })\n      .then(() => {\n        setLogData([]);\n      });\n  };\n\n  const handleCopyToClipboard = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    const logText = logData\n      .map((log) => {\n        const regex = /^([^:]+:[^:]+:[^:]+):(.*)$/;\n        const match = log.match(regex);\n        return match ? `${match[1].trim()} : ${match[2].trim()}` : log;\n      })\n      .join(\"\\n\");\n\n    navigator.clipboard\n      .writeText(logText)\n      .then(() => setCopied(true))\n      .catch((error) => {\n        setCopied(false);\n        console.error(\"Error copying logs to clipboard:\", error);\n      });\n\n    setTimeout(() => setCopied(false), 10000);\n  };\n\n  return (\n    <div className=\"section-log-container\">\n      <div className=\"button-section\">\n        <button onClick={handleDownloadLog} className=\"btn-purple download-btn\">\n          Download\n        </button>\n        <button className=\"btn-purple button-clear\" onClick={handleClearLog}>\n          <span className=\"text\">Clear</span>\n          <i className=\"adminLib-close\"></i>\n        </button>\n      </div>\n      <div className=\"log-container-wrapper\">\n        <div className=\"wrapper-header\">\n          <p className=\"log-viewer-text\">{appLocalizer?.tab_name} - log viewer</p>\n          <div className=\"click-to-copy\">\n            <button className=\"copy-btn\" onClick={handleCopyToClipboard}>\n              <i className=\"adminLib-vendor-form-copy\"></i>\n              <span className={!copied ? \"tooltip tool-clip\" : \"tooltip\"}>\n                {!copied ? \"Copy to clipboard\" : <i className=\"adminLib-success-notification\"></i>}\n                {!copied ? \"\" : \"Copied\"}\n              </span>\n            </button>\n          </div>\n        </div>\n        <div className=\"wrapper-body\">\n          {logData.map((log, index) => {\n            const regex = /^([^:]+:[^:]+:[^:]+):(.*)$/;\n            const match = log.match(regex);\n            if (match) {\n              return (\n                <div className=\"log-row\" key={index}>\n                  <span className=\"log-creation-date\">{match[1].trim()} :</span>\n                  <span className=\"log-details\">{match[2].trim()}</span>\n                </div>\n              );\n            }\n            return null;\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Log;\n","import axios, { AxiosRequestConfig } from \"axios\";\n\ndeclare const appLocalizer: { apiurl: string; restUrl: string; nonce: string };\n\n/**\n * Get response from REST API.\n * @param url - API URL\n * @param headers - Request headers\n * @returns API response data or null in case of an error\n */\nexport const getApiResponse = async <T>(url: string, headers: AxiosRequestConfig = {}): Promise<T | null> => {\n    try {\n        const result = await axios.get<T>(url, headers);\n        return result.data;\n    } catch (error) {\n        console.error(`❌ Error fetching data from ${url}`, error);\n        return null;\n    }\n};\n\n/**\n * Send response to REST API.\n * @param url - API URL\n * @param data - Data to send\n * @param headers - Request headers\n * @returns API response data or null in case of an error\n */\nexport const sendApiResponse = async <T>(\n    url: string,\n    data: unknown,\n    headers: AxiosRequestConfig = {}\n): Promise<T | null> => {\n    try {\n        const config: AxiosRequestConfig = {\n            headers: {\n                \"X-WP-Nonce\": appLocalizer.nonce,\n                ...headers.headers,\n            },\n            ...headers,\n        };\n        const result = await axios.post<T>(url, data, config);\n        return result.data;\n    } catch (error) {\n        console.error(`❌ Error sending data to ${url}`, error);\n        return null;\n    }\n};\n\n/**\n * Generate API endpoint URL.\n * @param endpoint - API endpoint\n * @param namespace - API namespace (optional)\n * @param rootUrl - API root URL (optional)\n * @returns Complete API URL\n */\nexport const getApiLink = (endpoint: string, namespace?: string, rootUrl?: string): string => {\n    return `${rootUrl || appLocalizer.apiurl}/${namespace || appLocalizer.restUrl}/${endpoint}`;\n};\n","import React,{ useState } from \"react\";\nimport './AutoGeneratedDefaultInput.scss';\nimport { __ } from \"@wordpress/i18n\";\n\nexport interface AutoGeneratedDefaultInputProps {\n    value: string;\n    proSetting?: boolean;\n    onChange: (newValue: string) => void;\n    description?: string;\n}\n\nexport const AutoGeneratedDefaultInput: React.FC<AutoGeneratedDefaultInputProps> = ({\n    value,\n    proSetting,\n    onChange,\n    description\n}) => {\n    const [copied, setCopied] = useState<boolean>(false);\n\n    const generateRandomKey = (length: number = 8): string => {\n        const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        let key = \"\";\n        for (let i = 0; i < length; i++) {\n            const randomIndex = Math.floor(Math.random() * characters.length);\n            key += characters.charAt(randomIndex);\n        }\n        return key;\n    };\n\n    const generateSSOKey = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        const key = generateRandomKey(8);\n        onChange(key);\n    };\n\n    const handleCopy = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        navigator.clipboard.writeText(value).then(() => {\n            setCopied(true);\n        });\n\n        setTimeout(() => {\n            setCopied(false);\n        }, 10000);\n    };\n\n    const handleClear = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        onChange(\"\");\n    };\n\n    return (\n        <>\n            <div className=\"sso-key-section\">\n                <div className=\"input-section\">\n                    <input\n                        type=\"text\"\n                        value={value}\n                        onChange={(e) => onChange(e.target.value)}\n                    />\n                    {value !== \"\" && (\n                        <button onClick={handleClear} className=\"clear-btn\">\n                            <i className=\"adminLib-delete\"></i>\n                        </button>\n                    )}\n                </div>\n                {value !== \"\" ? (\n                    <button className=\"copy-btn\" onClick={handleCopy}>\n                        <span className=\"svgIcon\">\n                            <i className=\"adminLib-vendor-form-copy\"></i>\n                            <span className={!copied ? 'tooltip tool-clip' : 'tooltip'}>\n                                {!copied ? '' : <i className=\"adminLib-success-notification\"></i>}\n                                {!copied ? 'Copy to clipboard' : 'Copied'}\n                            </span>\n                        </span>\n                    </button>\n                ) : (\n                    <button className=\"btn-purple generate-btn\" onClick={generateSSOKey}>\n                        <i className=\"adminLib-star_icon\"></i>\n                        <span className=\"text\">{__(\"Generate\", \"catalogx\")}</span>\n                    </button>\n                )}\n                {proSetting && <span className=\"admin-pro-tag\">pro</span>}\n            </div>\n            {description && (\n                <p className=\"settings-metabox-description\" dangerouslySetInnerHTML={{ __html: description }}></p>\n            )}\n        </>\n    );\n};\n\nexport default AutoGeneratedDefaultInput;\n","import React,{ useEffect, useRef, useState } from \"react\";\nimport \"./SyncMap.scss\";\n\nexport interface SyncMapProps {\n    value?: [string, string][];\n    onChange: (value: [string, string][]) => void;\n    proSetting?: boolean;\n    proSettingChanged: () => boolean;\n    description?: string;\n    syncFieldsMap: Record<string, { heading: string; fields: Record<string, string> }>;\n};\n\nconst SyncMap: React.FC<SyncMapProps> = ({\n    value = [],\n    onChange,\n    proSetting,\n    proSettingChanged,\n    description,\n    syncFieldsMap,\n}) => {\n    const systems = Object.keys(syncFieldsMap);\n    const formattedValue = Array.isArray(value) && value.every(Array.isArray) ? value : [];\n    const [selectedFields, setSelectedFields] = useState<[string, string][]>(formattedValue);\n    const [availableFields, setAvailableFields] = useState<Record<string, string[]>>({});\n    const [btnAllow, setBtnAllow] = useState(false);\n    const settingChanged = useRef(false);\n\n    useEffect(() => {\n        const updatedAvailableFields: Record<string, string[]> = {};\n        systems.forEach((system) => {\n            updatedAvailableFields[system] = Object.keys(syncFieldsMap[system].fields).filter(\n                (field) => !selectedFields.some(([selectedFieldA, selectedFieldB]) => selectedFieldA === field || selectedFieldB === field)\n            );\n        });\n        setAvailableFields(updatedAvailableFields);\n    }, [selectedFields, syncFieldsMap, systems]);\n\n    const changeSelectedFields = (fieldIndex: number, value: string, systemIndex: number) => {\n        setSelectedFields((prevFields) =>\n            prevFields.map((fieldPair, index) => {\n                if (index === fieldIndex) {\n                    const newPair = [...fieldPair] as [string, string];\n                    newPair[systemIndex] = value;\n                    return newPair;\n                }\n                return fieldPair;\n            })\n        );\n    };\n\n    const removeSelectedFields = (fieldIndex: number) => {\n        setSelectedFields((prevFields) => prevFields.filter((_, index) => index !== fieldIndex));\n        setBtnAllow(false);\n    };\n\n    const insertSelectedFields = () => {\n        if (availableFields[systems[0]].length && availableFields[systems[1]].length) {\n            const systemAField = availableFields[systems[0]].shift()!;\n            const systemBField = availableFields[systems[1]].shift()!;\n            setSelectedFields((prevFields) => [...prevFields, [systemAField, systemBField]]);\n            setBtnAllow(availableFields[systems[0]].length === 0 && availableFields[systems[1]].length === 0);\n        } else {\n            alert(\"Unable to add sync fields\");\n        }\n    };\n\n    useEffect(() => {\n        if (settingChanged.current) {\n            settingChanged.current = false;\n            onChange(selectedFields);\n        }\n    }, [selectedFields, onChange]);\n\n    return (\n        <div className=\"sync-map-container\">\n            <div className=\"container-wrapper\">\n                <div className=\"main-wrapper\">\n                    <div className=\"main-wrapper-heading\">\n                        <span>{syncFieldsMap[systems[0]].heading}</span>\n                        <span>{syncFieldsMap[systems[1]].heading}</span>\n                    </div>\n                    <div className=\"map-content-wrapper\">\n                        <select disabled>\n                            <option value=\"email\">Email</option>\n                        </select>\n                        <span className=\"connection-icon\">⇌</span>\n                        <select disabled>\n                            <option value=\"email\">Email</option>\n                        </select>\n                    </div>\n                    {selectedFields.map(([systemAField, systemBField], index) => (\n                        <div className=\"map-content-wrapper\" key={index}>\n                            <select\n                                value={systemAField}\n                                onChange={(e) => {\n                                    if (!proSettingChanged()) {\n                                        settingChanged.current = true;\n                                        changeSelectedFields(index, e.target.value, 0);\n                                    }\n                                }}\n                            >\n                                <option value={systemAField}>{syncFieldsMap[systems[0]].fields[systemAField]}</option>\n                                {availableFields[systems[0]]?.map((option) => (\n                                    <option key={option} value={option}>\n                                        {syncFieldsMap[systems[0]].fields[option]}\n                                    </option>\n                                ))}\n                            </select>\n                            <span className=\"connection-icon\">&#8652;</span>\n                            <select\n                                value={systemBField}\n                                onChange={(e) => {\n                                    if (!proSettingChanged()) {\n                                        settingChanged.current = true;\n                                        changeSelectedFields(index, e.target.value, 1);\n                                    }\n                                }}\n                            >\n                                <option value={systemBField}>{syncFieldsMap[systems[1]].fields[systemBField]}</option>\n                                {availableFields[systems[1]]?.map((option) => (\n                                    <option key={option} value={option}>\n                                        {syncFieldsMap[systems[1]].fields[option]}\n                                    </option>\n                                ))}\n                            </select>\n                            <button\n                                className=\"btn-purple remove-mapping\"\n                                onClick={(e) => {\n                                    e.preventDefault();\n                                    if (!proSettingChanged()) {\n                                        settingChanged.current = true;\n                                        removeSelectedFields(index);\n                                    }\n                                }}\n                            >\n                                <span className=\"text\">Clear</span>\n                                <span className=\"icon adminLib-close\"></span>\n                            </button>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"btn-container\">\n                    <div className=\"add-mapping-container\">\n                        <button\n                            className={`btn-purple add-mapping ${btnAllow ? \"not-allow\" : \"\"}`}\n                            onClick={(e) => {\n                                e.preventDefault();\n                                if (!proSettingChanged()) {\n                                    settingChanged.current = true;\n                                    insertSelectedFields();\n                                }\n                            }}\n                        >\n                            <span className=\"text\">Add</span>\n                            <i className=\"adminLib-vendor-form-add\"></i>\n                        </button>\n                        {proSetting && <span className=\"admin-pro-tag\">pro</span>}\n                    </div>\n                </div>\n            </div>\n            {description && <p className=\"settings-metabox-description\" dangerouslySetInnerHTML={{ __html: description }}></p>}\n        </div>\n    );\n};\n\nexport default SyncMap;\n","import React,{ useState, useEffect, useRef } from \"react\";\nimport { sendApiResponse, getApiLink } from \"../../../service/apiService\";\nimport \"./ConnectButton.scss\";\nimport {Link} from 'react-router-dom';\nimport { __ } from \"@wordpress/i18n\";\n\ninterface Task {\n    action: string;\n    message: string;\n    cache?: \"course_id\" | \"user_id\";\n}\n\nexport interface ConnectButtonProps {\n    apiLink: string;\n    tasks: Task[];\n}\n\nconst ConnectButton: React.FC<ConnectButtonProps> = ({ apiLink, tasks }) => {\n    const connectTaskStarted = useRef<boolean>(false);\n    const additionalData = useRef<Record<string, any>>({});\n    const taskNumber = useRef<number>(0);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [taskSequence, setTaskSequence] = useState<{ name: string; message: string; status: string }[]>([]);\n    const [testStatus, setTestStatus] = useState<string>(\"\");\n\n    // Sleep for a given time.\n    const sleep = (time: number): Promise<void> => {\n        return new Promise((resolve) => setTimeout(resolve, time));\n    };\n\n    const startConnectionTask = async () => {\n        if (connectTaskStarted.current) return;\n\n        connectTaskStarted.current = true;\n        setLoading(true);\n        setTaskSequence([]);\n\n        await doSequentialTask();\n\n        connectTaskStarted.current = false;\n        setLoading(false);\n    };\n\n    const doSequentialTask = async () => {\n        if (taskNumber.current >= tasks.length) {\n            setTestStatus(\"Test Successful\");\n            return;\n        }\n\n        const currentTask = tasks[taskNumber.current];\n\n        setTaskSequence((tasks) => [\n            ...tasks,\n            { name: currentTask.action, message: currentTask.message, status: \"running\" },\n        ]);\n\n        await sleep(2500);\n\n        const response = await sendApiResponse(getApiLink(apiLink), {\n            action: currentTask.action,\n            ...additionalData.current,\n        });\n\n        let taskStatus: \"success\" | \"failed\" = \"success\";\n\n        if (currentTask.cache === \"course_id\") {\n            // const validCourse = response?.courses?.[1];\n            const validCourse = response;\n            if (!validCourse) {\n                taskStatus = \"failed\";\n            } else {\n                // additionalData.current[\"course_id\"] = validCourse.id;\n                additionalData.current[\"course_id\"] = validCourse;\n            }\n        } else if (currentTask.cache === \"user_id\") {\n            // const validUser = response?.data?.users?.[0];\n            const validUser = response;\n            if (!validUser) {\n                taskStatus = \"failed\";\n            } else {\n                // additionalData.current[\"user_id\"] = validUser.id;\n                additionalData.current[\"user_id\"] = validUser;\n            }\n        // } else if (!response.success) {\n        } else if (!response) {\n            taskStatus = \"failed\";\n        }\n\n        setTaskSequence((tasks) => {\n            const updatedTask = [...tasks];\n            updatedTask[updatedTask.length - 1].status = taskStatus;\n            return updatedTask;\n        });\n\n        if (taskStatus === \"failed\") {\n            setTestStatus(\"Failed\");\n            return;\n        }\n\n        taskNumber.current++;\n        await doSequentialTask();\n    };\n\n    return (\n        <div className=\"connection-test-wrapper\">\n            <div className=\"loader-wrapper\">\n                <button\n                    className=\"btn-purple btn-effect\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        startConnectionTask();\n                    }}\n                >\n                    {\"Start test\"}\n                </button>\n                {loading && (\n                    <div className=\"loader\">\n                        <div className=\"three-body__dot\"></div>\n                        <div className=\"three-body__dot\"></div>\n                        <div className=\"three-body__dot\"></div>\n                    </div>\n                )}\n            </div>\n            <div className=\"fetch-details-wrapper\">\n                {taskSequence.map((task, index) => (\n                    <div key={index} className={`${task.status} details-status-row`}>\n                        {task.message} {task.status !== \"running\" && (\n                            <i className={`admin-font ${task.status === \"failed\" ? \"adminLib-cross\" : \"adminLib-icon-yes\"}`}></i>\n                        )}\n                    </div>\n                ))}\n            </div>\n            {testStatus && (\n                <div className={`fetch-display-output ${testStatus === \"Failed\" ? \"failed\" : \"success\"}`}>\n                    {testStatus === \"Failed\" ? (\n                        <p>\n                            {__('Test connection failed. Check further details in', 'catalogx')} {' '}\n                            <Link className=\"errorlog-link\" to={'?page=moowoodle#&tab=settings&subtab=log'}>\n                                {__('error log', 'catalogx')}\n                            </Link>.\n                        </p>\n                    ) : (\n                        __('Test connection successful', 'catalogx')\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ConnectButton;\n","import React, { useState } from 'react';\nimport './SubTabSection.scss';\n\ninterface MenuItem {\n    id: string;\n    name: string;\n    icon: string;\n    link?: string;\n}\n\ninterface SubTabSectionProps {\n    menuitem: MenuItem[];\n    currentTab: MenuItem;\n    setCurrentTab: (tab: MenuItem) => void;\n    setting?: any;\n}\n\nconst SubTabSection: React.FC<SubTabSectionProps> = ({ menuitem, currentTab, setCurrentTab, setting }) => {\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [settings, setSettings] = useState(setting);\n\n    return (\n        <div className='tab-section'>\n            {menuitem.map((menu) => (\n                <div\n                    key={menu.id}\n                    className={`tab-section-menu ${menu.id === currentTab.id ? 'active' : ''} ${menu.id}-tab`}\n                    onClick={() => setCurrentTab(menu)}\n                >\n                    <span><i className={`admin-font ${menu.icon}`}></i></span>\n                    {menu.name}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default SubTabSection;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport { getApiLink } from \"../../../service/apiService\";\nimport \"./SyncNow.scss\";\n\ntype SyncStatus = {\n  action: string;\n  current: number;\n  total: number;\n};\n\nexport interface  SyncNowProps{\n  buttonKey: string;\n  interval: number;\n  proSetting: boolean;\n  proSettingChanged: () => boolean;\n  value: string;\n  description: string;\n  apilink: string;\n  statusApiLink: string;\n};\n\nconst SyncNow: React.FC<SyncNowProps> = ({ interval, proSetting, proSettingChanged, value, description, apilink, statusApiLink }) => {\n  const [syncStarted, setSyncStarted] = useState<boolean>(false);\n  const [syncStatus, setSyncStatus] = useState<SyncStatus[]>([]);\n  const [buttonClicked, setButtonClicked] = useState<boolean>(false);\n  const fetchStatusRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (syncStarted) {\n      fetchStatusRef.current = setInterval(fetchSyncStatus, interval);\n    }\n\n    return () => {\n      if (fetchStatusRef.current) clearInterval(fetchStatusRef.current);\n    };\n  }, [syncStarted, interval]);\n\n  useEffect(() => {\n    fetchSyncStatus();\n  }, []);\n\n  const fetchSyncStatus = () => {\n    axios({\n      method: \"post\",\n      url: getApiLink(statusApiLink),\n      headers: { \"X-WP-Nonce\": (window as any).appLocalizer.nonce },\n    }).then((response) => {\n      const syncData = response.data;\n      setSyncStarted(syncData.running);\n      setSyncStatus(syncData.status);\n    });\n  };\n\n  const handleSync = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (proSettingChanged()) return;\n\n    setSyncStarted(true);\n    setButtonClicked(true);\n\n    axios({\n      method: \"post\",\n      url: getApiLink(apilink),\n      headers: { \"X-WP-Nonce\": (window as any).appLocalizer.nonce },\n    }).then((response) => {\n      if (response.data) {\n        setSyncStarted(false);\n        fetchSyncStatus();\n      }\n    });\n  };\n\n  return (\n    <div className=\"section-synchronize-now\">\n      <div className=\"loader-wrapper\">\n        <button className=\"btn-purple btn-effect synchronize-now-button\" onClick={handleSync}>\n          {value}\n        </button>\n        {syncStarted && (\n          <div className=\"loader\">\n            <div className=\"three-body__dot\"></div>\n            <div className=\"three-body__dot\"></div>\n            <div className=\"three-body__dot\"></div>\n          </div>\n        )}\n      </div>\n\n      {syncStarted && <div className=\"fetch-display-output success\">Synchronization started, please wait.</div>}\n      <p className=\"settings-metabox-description\" dangerouslySetInnerHTML={{ __html: description }}></p>\n      {proSetting && <span className=\"admin-pro-tag\">pro</span>}\n      {syncStatus.length > 0 &&\n        syncStatus.map((status, index) => (\n          <div key={index} className=\"details-status-row sync-now\">\n            {status.action}\n            <div className=\"status-meta\">\n              <span className=\"status-icons\">\n                <i className=\"admin-font adminLib-icon-yes\"></i>\n              </span>\n              <span>\n                {status.current} / {status.total}\n              </span>\n            </div>\n            <span\n              style={{ width: `${(status.current / status.total) * 100}%` }}\n              className=\"progress-bar\"\n            ></span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default SyncNow;\n","import React from 'react';\nimport './ShortCodeTable.scss';\n\ninterface Option {\n    label: string;\n    desc: string;\n}\n\ninterface ShortCodeTableProps {\n    wrapperClass: string;\n    descClass: string;\n    description?: string;\n    options: Option[]; // Expected format: array of option objects\n    optionLabel?: string[]; // Assuming optionLabel is an array\n}\n\nconst ShortCodeTable: React.FC<ShortCodeTableProps> = (props) => {\n    const { wrapperClass, descClass, description, options, optionLabel } = props;\n\n    return (\n        <main className={wrapperClass}>\n            <table className='shortcode-table'>\n                <thead>\n                    <tr>\n                        {optionLabel && optionLabel.length > 0 ? (\n                            optionLabel.map((label, index) => (\n                                <th key={index}>{label}</th>\n                            ))\n                        ) : (\n                            <th>No Labels</th> // Fallback if no labels exist\n                        )}\n                    </tr>\n                </thead>\n                <tbody>\n                    {options && options.length > 0 ? (\n                        options.map((option, index) => (\n                            <tr key={index}>\n                                <td><code>{option.label}</code></td>\n                                <td>{option.desc}</td>\n                            </tr>\n                        ))\n                    ) : (\n                        <tr><td colSpan={2}>No Options Available</td></tr> // Fallback if no options exist\n                    )}\n                </tbody>\n            </table>\n            {description && (\n                <p className={descClass} dangerouslySetInnerHTML={{ __html: description }} />\n            )}\n        </main>\n    );\n};\n\nexport default ShortCodeTable;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport Modal from 'react-modal';\nimport './MultiCheckboxTable.scss';\ninterface Option {\n  value: string | number;\n  label: string;\n}\n\ninterface SelectedOptionDisplayProps {\n  selectedValues: Option[];\n  clearSelectedValues: () => void;\n  removeSelectedValues: (value: Option) => void;\n  setPopupOpend: (isOpen: boolean) => void;\n  popupOpend: boolean;\n}\n\nconst SelectedOptionDisplay: React.FC<SelectedOptionDisplayProps> = ({\n  selectedValues,\n  clearSelectedValues,\n  removeSelectedValues,\n  setPopupOpend,\n  popupOpend,\n}) => {\n  // Get the renderable selected value for all selected values\n  const renderableSelectedValue = popupOpend ? selectedValues : selectedValues.slice(0, 1);\n\n  return (\n    <div className=\"selected-container\">\n      <div className=\"selected-items-container\">\n        {/* All selected values */}\n        {renderableSelectedValue.map((value) => (\n          <div className=\"selected-items\" key={value.value}>\n            <span>{value.label}</span>\n            <div\n              className=\"\"\n              onClick={() => removeSelectedValues(value)}\n            >\n              <i className=\"admin-font adminLib-close\"></i>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"container-items-controls\">\n        {/* Modal open button */}\n        {!popupOpend && selectedValues.length > 1 && (\n          <div\n            className=\"open-modal items-controls\"\n            onClick={() => setPopupOpend(true)}\n          >\n            +{selectedValues.length - 1}\n          </div>\n        )}\n\n        {/* Clear all selected values */}\n        <div\n          className=\"clear-all-data items-controls\"\n          onClick={clearSelectedValues}\n        >\n          <i className=\"admin-font adminLib-close\"></i>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\ninterface Option {\n  value: string | number;\n  label: string;\n}\n\ninterface SearchOptionDisplayProps {\n  options: Option[];\n  filter: string;\n  setFilter: (value: string) => void;\n  insertSelectedValues: (option: Option) => void;\n  searchStarted: boolean;\n}\n\nconst SearchOptionDisplay: React.FC<SearchOptionDisplayProps> = ({\n  options,\n  filter,\n  setFilter,\n  insertSelectedValues,\n  searchStarted,\n}) => {\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    const setModalClose = () => {\n      setModalOpen(false);\n    };\n\n    document.addEventListener(\"click\", setModalClose);\n\n    return () => {\n      document.removeEventListener(\"click\", setModalClose);\n    };\n  }, []);\n\n  return (\n    <>\n      <div className=\"selected-input\">\n        {/* Search section */}\n        <input\n          className=\"\"\n          placeholder=\"Select...\"\n          value={filter}\n          onChange={(event) => {\n            setModalOpen(true);\n            setFilter(event.target.value);\n          }}\n          onClick={(e) => {\n            e.stopPropagation();\n            setModalOpen(true);\n          }}\n        />\n\n        <span>\n          <i className=\"admin-font adminLib-keyboard-arrow-down\"></i>\n        </span>\n      </div>\n\n      {modalOpen && (\n        <div className=\"option-container\">\n          {!searchStarted ? (\n            options.map((option) => (\n              <div\n                key={option.value} // Added a unique key for React list rendering\n                className=\"options-item\"\n                onClick={() => {\n                  insertSelectedValues(option);\n                  setModalOpen(false);\n                }}\n              >\n                {option.label}\n              </div>\n            ))\n          ) : (\n            <div>Searching</div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\n\ninterface Option {\n  value: string | number;\n  label: string;\n}\n\ninterface SelectProps {\n  values?: Option[];\n  onChange: (selected: Option[]) => void;\n  option: Option[];\n  asyncGetOptions?: (filter: string) => Promise<Option[]>;\n  asyncFetch?: boolean;\n  isMulti?: boolean;\n}\n\nconst Select: React.FC<SelectProps> = ({\n  values = [],\n  onChange,\n  option = [],\n  asyncGetOptions,\n  asyncFetch = false,\n  isMulti = true,\n}) => {\n  // State to store selected values\n  const [selectedValues, setSelectedValues] = useState<Option[]>(values);\n\n  // State to store options\n  const [options, setOptions] = useState<Option[]>(option);\n\n  // State for modal open/close\n  const [popupOpened, setPopupOpened] = useState<boolean>(false);\n\n  // State to track search\n  const [searchStarted, setSearchStarted] = useState<boolean>(false);\n\n  // State for filtering options\n  const [filter, setFilter] = useState<string>(\"\");\n\n  // Ref to track setting changes\n  const settingChanged = useRef<boolean>(false);\n\n  // Fetch options (sync or async)\n  const getOptions = async (): Promise<Option[]> => {\n    let allOptions = option;\n\n    if (asyncFetch && asyncGetOptions) {\n      setSearchStarted(true);\n      allOptions = await asyncGetOptions(filter);\n      setSearchStarted(false);\n    }\n\n    return allOptions.filter((opt) => !selectedValues.some((sel) => sel.value === opt.value));\n  };\n\n  /**\n   * Insert a new selected value.\n   */\n  const insertSelectedValues = (value: Option) => {\n    settingChanged.current = true;\n    setSelectedValues((prev) => [...prev, value]);\n  };\n\n  /**\n   * Remove a selected value.\n   */\n  const removeSelectedValues = (value: Option) => {\n    settingChanged.current = true;\n    setSelectedValues((prev) => prev.filter((prevValue) => prevValue.value !== value.value));\n  };\n\n  /**\n   * Clear all selected values.\n   */\n  const clearSelectedValues = () => {\n    settingChanged.current = true;\n    setSelectedValues([]);\n  };\n\n  /**\n   * Get filtered options.\n   */\n  const getFilteredOptionValue = async (): Promise<Option[]> => {\n    let allOptions = await getOptions();\n    return asyncFetch || !filter\n      ? allOptions\n      : allOptions.filter((opt) => opt.value.toString().includes(filter) || opt.label.includes(filter));\n  };\n\n  // Trigger onChange event when selected values change\n  useEffect(() => {\n    if (settingChanged.current) {\n      settingChanged.current = false;\n      onChange(selectedValues);\n    }\n  }, [selectedValues, onChange]);\n\n  // Update options when dependencies change\n  useEffect(() => {\n    getFilteredOptionValue().then(setOptions);\n  }, [filter, option, selectedValues]);\n\n  Modal.setAppElement(\"#admin-main-wrapper\");\n\n  return (\n    <main className=\"grid-table-main-container\" id=\"modal-support\">\n      <section className=\"main-container\">\n        {/* Display selected values */}\n        {!popupOpened && (\n          <>\n            <SelectedOptionDisplay\n              popupOpend={popupOpened}\n              setPopupOpend={setPopupOpened}\n              selectedValues={selectedValues}\n              clearSelectedValues={clearSelectedValues}\n              removeSelectedValues={removeSelectedValues}\n            />\n            <SearchOptionDisplay\n              options={options}\n              filter={filter}\n              setFilter={setFilter}\n              insertSelectedValues={insertSelectedValues}\n              searchStarted={searchStarted}\n            />\n          </>\n        )}\n\n        {/* Modal for selection */}\n        {popupOpened && (\n          <Modal\n            isOpen={popupOpened}\n            onRequestClose={() => setPopupOpened(false)}\n            contentLabel=\"Select Modal\"\n            className=\"exclusion-modal\"\n          >\n            <div className=\"modal-close-btn\" onClick={() => setPopupOpened(false)}>\n              <i className=\"admin-font adminLib-cross\"></i>\n            </div>\n            <SelectedOptionDisplay\n              popupOpend={popupOpened}\n              setPopupOpend={setPopupOpened}\n              selectedValues={selectedValues}\n              clearSelectedValues={clearSelectedValues}\n              removeSelectedValues={removeSelectedValues}\n            />\n            <SearchOptionDisplay\n              options={options}\n              filter={filter}\n              setFilter={setFilter}\n              insertSelectedValues={insertSelectedValues}\n              searchStarted={searchStarted}\n            />\n          </Modal>\n        )}\n      </section>\n    </main>\n  );\n};\n\n\ninterface Column {\n  key: string;\n  label: string;\n  moduleEnabled?: string;\n}\n\ninterface Row {\n  key: string;\n  label: string;\n  options?: { value: string | number; label: string }[];\n}\n\ninterface MultiCheckboxTableProps {\n  rows: Row[];\n  columns: Column[];\n  description?:string;\n  onChange: (key: string, value: any) => void;\n  setting: Record<string, any>;\n  proSetting?: boolean;\n  modules: string[];\n  moduleChange: (module: string) => void;\n}\n\nconst MultiCheckboxTable: React.FC<MultiCheckboxTableProps> = ({\n  rows,\n  columns,\n  onChange,\n  setting,\n  proSetting,\n  modules,\n  moduleChange,\n}) => {\n  return (\n    <>\n      {proSetting && <span className=\"admin-pro-tag\">pro</span>}\n      <table className=\"grid-table\">\n        <thead>\n          <tr>\n            <th></th>\n            {columns.map((column) => (\n              <th key={column.key}>{column.label}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((row) => (\n            <tr key={row.key}>\n              <td>{row.label}</td>\n              {columns.map((column) => {\n                const key = `${column.key}_${row.key}`;\n                const value = setting[key] || [];\n\n                return (\n                  <td\n                    id=\"grid-table-cell\"\n                    className=\"grid-table-cell-class\"\n                    key={`${column.key}_${row.key}`}\n                  >\n                    {row.options ? (\n                      <Select\n                        values={value}\n                        onChange={(newValue) => onChange(key, newValue)}\n                        option={row.options}\n                        isMulti\n                      />\n                    ) : (\n                      <input\n                        placeholder=\"select\"\n                        type=\"checkbox\"\n                        checked={Array.isArray(setting[column.key]) && setting[column.key].includes(row.key)}\n                        onChange={(e) => {\n                          if (column.moduleEnabled && !modules.includes(column.moduleEnabled)) {\n                            moduleChange(column.moduleEnabled);\n                            return;\n                          }\n\n                          const selectedKeys = Array.isArray(setting[column.key]) ? setting[column.key] : [];\n                          const updatedSelection = e.target.checked\n                            ? [...selectedKeys, row.key] // Add key\n                            : selectedKeys.filter((key:any) => key !== row.key); // Remove key\n\n                          onChange(column.key, updatedSelection);\n                        }}\n                      />\n                    )}\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default MultiCheckboxTable;\n","import React from 'react';\nimport './ToggleSetting.scss';\n\ninterface Option {\n    key: string;\n    value: string;\n    label: string;\n}\n\nexport interface ToggleSettingProps {\n    description?: string;\n    key?: string;\n    options: Option[];\n    wrapperClass?: string;\n    descClass?: string;\n    value: string;\n    onChange: (value: string) => void;\n    proSetting?: boolean;\n}\n\nconst ToggleSetting: React.FC<ToggleSettingProps> = ({\n    description,\n    key,\n    options,\n    wrapperClass = '',\n    descClass = '',\n    value,\n    onChange,\n    proSetting = false,\n}) => {\n    return (\n        <section className={wrapperClass}>\n            <div className='toggle-setting-container'>\n                <ul>\n                    {options?.map((option, index) => {\n                        const checked = value === option.value;\n                        return (\n                            <li key={option.key} onClick={() => onChange(option.value)}>\n                                <input\n                                    className=\"toggle-setting-form-input\"\n                                    type=\"radio\"\n                                    id={option.key}\n                                    name=\"approve_vendor\"\n                                    value={value}\n                                    checked={checked}\n                                    readOnly\n                                />\n                                <label htmlFor={option.key}>{option.label}</label>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n            {proSetting && <span className=\"admin-pro-tag\">pro</span>}\n            {description && (\n                <p className={descClass} dangerouslySetInnerHTML={{ __html: description }}></p>\n            )}\n        </section>\n    );\n};\n\nexport default ToggleSetting;\n","import React, { useState, useEffect } from 'react';\nimport ReactDragListView from \"react-drag-listview\";\nimport './CatalogCustomizer.scss';\nimport SubTabSection from '../SubTabSection/SubTabSection';\n\nexport interface CatalogCustomizerProps {\n  onChange: (key: string, value: any) => void;\n  proSetting?: boolean;\n  setting: Record<string, any>;\n}\n\ninterface MenuItem {\n  name: string;\n  id: string;\n  icon: string;\n  link?:string;\n}\n\ninterface DragableItem {\n  id: string;\n  content?: any;\n  defaultPosition: number;\n  dragable: boolean;\n}\n\nconst CatalogCustomizer: React.FC<CatalogCustomizerProps> = ({ onChange, proSetting, setting }) => {\n  const [buttonSetting, setButtonSetting] = useState<Record<string, any>>({});\n  const [localSetting, setLocalSetting] = useState(setting);\n  const [menu, setMenu] = useState<MenuItem[]>([\n    { name: \"Enquiry\", id: 'enquiry', icon: 'adminLib-inquiry' },\n    { name: \"Quote\", id: 'quote', icon: 'adminLib-price-quote-icon' },\n    { name: \"Catalog\", id: 'catalog', icon: 'adminLib-catalog' },\n  ]);\n  const [currentTab, setCurrentTab] = useState<MenuItem>(menu[0]);\n  const [dragableItems, setDragableItems] = useState<DragableItem[]>([\n    {\n      id: 'price_section',\n      content: () => {\n        const [hideProductPrice, setHideProductPrice] = useState(localSetting['hide_product_price']);\n        return (\n          <div className='price-section toggle-visibility'>\n            <div\n              onClick={() => {\n                setHideProductPrice(!hideProductPrice);\n                setSetting('hide_product_price', !hideProductPrice);\n              }}\n              className='button-visibility'\n            >\n              <i className='admin-font adminLib-support'></i>\n            </div>\n            <p className='product-price' style={{ opacity: hideProductPrice ? \"0.3\" : \"1\" }}><span className='strikethrough'>$20.00</span> $18.00</p>\n          </div>\n        );\n      },\n      defaultPosition: 0,\n      dragable: false,\n    },\n    {\n      id: 'product_description',\n      content: () => {\n        const [hideProductDesc, setHideProductDesc] = useState(localSetting['hide_product_desc']);\n        return (\n          <div className='description-section toggle-visibility'>\n            <div\n              onClick={() => {\n                setHideProductDesc(!hideProductDesc);\n                setSetting('hide_product_desc', !hideProductDesc);\n              }}\n              className='button-visibility'\n            >\n              <i className='admin-font adminLib-support'></i>\n            </div>\n            <p className='product-description' style={{ opacity: hideProductDesc ? \"0.3\" : \"1\" }}>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.</p>\n          </div>\n        );\n      },\n      defaultPosition: 1,\n      dragable: false,\n    },\n  ]);\n\n  const setSetting = (key: string, value: any) => {\n    setLocalSetting({ ...localSetting, [key]: value });\n    onChange(key, value);\n  };\n\n  const handleSubMenuChange = (newTab: MenuItem) => {\n    if (currentTab.id === newTab.id) return;\n    setCurrentTab({ ...newTab });\n    let mainWrapper = document.getElementById('catelog-customizer-main-wrapper');\n    window.scrollTo(0, 0);\n    if (mainWrapper) {\n      mainWrapper.classList.add(newTab.id, 'change-tab');\n      setTimeout(() => {\n        mainWrapper.classList.remove('change-tab');\n        setTimeout(() => {\n          mainWrapper.classList.remove(newTab.id);\n        }, 300);\n      }, 500);\n    }\n  };\n\n  const Sample_Product:string = \"#\";\n\n  return (\n    <>\n      <SubTabSection\n        menuitem={menu}\n        currentTab={currentTab}\n        setCurrentTab={setCurrentTab}\n        setting={localSetting}\n        // onChange={onChange}\n      />\n      <main className='catelog-customizer-main-wrapper' id='catelog-customizer-main-wrapper'>\n        <section className='catelog-customizer'>\n          <div className='product-img'>\n            <img src={Sample_Product} alt=\"Sample Product\" />\n          </div>\n          <div className='product-data'>\n            <h1 className='product-name'>Sample Product</h1>\n            <div className='drag-drop-component'>\n              <ReactDragListView\n                nodeSelector=\".shop-page-draggable\"\n                handleSelector=\".should-move\"\n                lineClassName=\"dragLine\"\n                onDragEnd={(fromIndex, toIndex) => {}}\n              >\n                {dragableItems.map((item) => (\n                  <div key={item.id} className='shop-page-draggable'>\n                    {item.content && <item.content />}\n                  </div>\n                ))}\n              </ReactDragListView>\n            </div>\n          </div>\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default CatalogCustomizer;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport MapboxGeocoder , { GeocoderOptions } from '@mapbox/mapbox-gl-geocoder';\nimport mapboxgl, { Map, Marker } from \"mapbox-gl\";\n\ninterface AppLocalizer{\n    mapbox_api:string,\n}\n\nconst appLocalizer:AppLocalizer={\n    mapbox_api:\"api\"\n}\nexport interface MapsInputProps {\n    LatVal:number,\n    LngVal:number,\n    wrapperClass:string,\n    containerId:string,\n    containerClass:string,\n    proSetting:string,\n    description:string,\n    descClass:string,\n}\n\nconst MapsInput : React.FC<MapsInputProps> = ({\n    LatVal,\n    LngVal,\n    wrapperClass,\n    containerId,\n    containerClass,\n    proSetting,\n    description,\n    descClass,\n})=>{\n\n    const [Lat, setLat] = useState<number>(LatVal || 22.5726); // Default to Kolkata coordinates\n    const [Lng, setLng] = useState<number>(LngVal || 88.3639);\n    const mapContainerRef = useRef<HTMLDivElement | null>(null);\n    const markerRef = useRef<mapboxgl.Marker | null>(null);\n\n\n    useEffect(() => {\n        // Initialize Mapbox\n        mapboxgl.accessToken = appLocalizer.mapbox_api;\n\n        const map:Map = new mapboxgl.Map({\n            container: mapContainerRef.current as HTMLDivElement,\n            style: 'mapbox://styles/mapbox/streets-v11',\n            center: [Lng, Lat],\n            zoom: 12,\n        });\n\n        const geocoder = new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            marker: false,\n            mapboxgl: mapboxgl as unknown as Required<GeocoderOptions>[\"mapboxgl\"],\n        });\n\n        // Add geocoder control to the map\n        map.addControl(geocoder);\n\n        // Initialize Marker\n        markerRef.current = new mapboxgl.Marker({ color: \"red\" })\n            .setLngLat([Lng, Lat])\n            .addTo(map);\n\n        // Handle geocoder results\n        geocoder.on(\"result\", (ev) => {\n            const { center } = ev.result;\n            setLat(center[1]);\n            setLng(center[0]);\n\n            if (markerRef.current) {\n                markerRef.current.setLngLat(center);\n            }\n        });\n    \n        // Cleanup on component unmount\n        return () => map.remove();\n    }, [])\n    \n    useEffect(() => {\n        // Update the marker position when coordinates change\n        if (markerRef.current) {\n            markerRef.current.setLngLat([Lng, Lat]);\n        }\n    }, [Lat, Lng]);\n\n    return (\n        <div className={wrapperClass}>\n            <div\n                ref={mapContainerRef} // Reference to the map container\n                id={containerId || 'maps-container'}\n                className={containerClass || 'maps-container'}\n                style={{ width: '100%', height: '300px' }}\n            >\n            </div>            \n            \n            {proSetting && <span className=\"admin-pro-tag\">pro</span>}            \n            \n            {description &&\n                <p className={descClass} dangerouslySetInnerHTML={{ __html: description }}>\n                </p>\n            }\n        </div>\n    );\n}\n\nexport default MapsInput;","import React from 'react';\nimport \"./IconList.scss\";\nimport \"./fonts.scss\";\n\n\nconst IconList : React.FC = ()=>{\n    return (\n        <>\n        <div className=\"icon-list\">\n                <div className=\"icon-wrapper\">\n\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-person\"></span>\n                        <span className=\"mls\"> adminLib-person</span>\n                        <span>(e520)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-tools\"></span>\n                        <span className=\"mls\"> adminLib-tools</span>\n                        <span>(e700)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-supervised-user-circle\"></span>\n                        <span className=\"mls\"> adminLib-supervised-user-circle</span>\n                        <span>(e702)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-vpn-key\"></span>\n                        <span className=\"mls\"> adminLib-vpn-key</span>\n                        <span>(e704)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-user-circle\"></span>\n                        <span className=\"mls\"> adminLib-user-circle</span>\n                        <span>(e800)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-error\"></span>\n                        <span className=\"mls\"> adminLib-error</span>\n                        <span>(e802)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-security\"></span>\n                        <span className=\"mls\"> adminLib-security</span>\n                        <span>(e803)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-storefront\"></span>\n                        <span className=\"mls\"> adminLib-storefront</span>\n                        <span>(e804)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-editor-list-ul\"></span>\n                        <span className=\"mls\"> adminLib-editor-list-ul</span>\n                        <span>(e805)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-search\"></span>\n                        <span className=\"mls\"> adminLib-search</span>\n                        <span>(e806)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-info\"></span>\n                        <span className=\"mls\"> adminLib-info</span>\n                        <span>(e807)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-check\"></span>\n                        <span className=\"mls\"> adminLib-check</span>\n                        <span>(e809)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-smile-o\"></span>\n                        <span className=\"mls\"> adminLib-smile-o</span>\n                        <span>(e80a)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-close\"></span>\n                        <span className=\"mls\"> adminLib-close</span>\n                        <span>(e810)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-captcha\"></span>\n                        <span className=\"mls\"> adminLib-captcha</span>\n                        <span>(e820)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-checkbox\"></span>\n                        <span className=\"mls\"> adminLib-checkbox</span>\n                        <span>(e822)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-divider\"></span>\n                        <span className=\"mls\"> adminLib-divider</span>\n                        <span>(e828)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-radio\"></span>\n                        <span className=\"mls\"> adminLib-radio</span>\n                        <span>(e84e)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-toggle\"></span>\n                        <span className=\"mls\"> adminLib-toggle</span>\n                        <span>(e869)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-text\"></span>\n                        <span className=\"mls\"> adminLib-text</span>\n                        <span>(e86d)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-section\"></span>\n                        <span className=\"mls\"> adminLib-section</span>\n                        <span>(e898)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-book\"></span>\n                        <span className=\"mls\"> adminLib-book</span>\n                        <span>(e8f0)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-plus-circle-o\"></span>\n                        <span className=\"mls\"> adminLib-plus-circle-o</span>\n                        <span>(e8f7)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-centralized-connections\"></span>\n                        <span className=\"mls\"> adminLib-centralized-connections</span>\n                        <span>(e900)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-desktop-pc-valuation\"></span>\n                        <span className=\"mls\"> adminLib-desktop-pc-valuation</span>\n                        <span>(e901)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-dynamic-pricing\"></span>\n                        <span className=\"mls\"> adminLib-dynamic-pricing</span>\n                        <span>(e902)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-uniE903\"></span>\n                        <span className=\"mls\"> adminLib-uniE903</span>\n                        <span>(e903)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-social-media-content\"></span>\n                        <span className=\"mls\"> adminLib-social-media-content</span>\n                        <span>(e906)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-user-network-icon\"></span>\n                        <span className=\"mls\"> adminLib-user-network-icon</span>\n                        <span>(e907)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-price\"></span>\n                        <span className=\"mls\"> adminLib-price</span>\n                        <span>(e908)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-catalog\"></span>\n                        <span className=\"mls\"> adminLib-catalog</span>\n                        <span>(e909)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-contact-form\"></span>\n                        <span className=\"mls\"> adminLib-contact-form</span>\n                        <span>(e90a)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-exclude\"></span>\n                        <span className=\"mls\"> adminLib-exclude</span>\n                        <span>(e90b)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-inquiry\"></span>\n                        <span className=\"mls\"> adminLib-inquiry</span>\n                        <span>(e90c)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-price-quote-icon\"></span>\n                        <span className=\"mls\"> adminLib-price-quote-icon</span>\n                        <span>(e90d)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-warehousing-icon\"></span>\n                        <span className=\"mls\"> adminLib-warehousing-icon</span>\n                        <span>(e90e)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-web-page-website\"></span>\n                        <span className=\"mls\"> adminLib-web-page-website</span>\n                        <span>(e90f)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-wholesale\"></span>\n                        <span className=\"mls\"> adminLib-wholesale</span>\n                        <span>(e910)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-mailchimp\"></span>\n                        <span className=\"mls\"> adminLib-mailchimp</span>\n                        <span>(e911)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-mail\"></span>\n                        <span className=\"mls\"> adminLib-mail</span>\n                        <span>(e912)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-file-submission\"></span>\n                        <span className=\"mls\"> adminLib-file-submission</span>\n                        <span>(e913)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-submission-message\"></span>\n                        <span className=\"mls\"> adminLib-submission-message</span>\n                        <span>(e914)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-settings\"></span>\n                        <span className=\"mls\"> adminLib-settings</span>\n                        <span>(e915)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-cross\"></span>\n                        <span className=\"mls\"> adminLib-cross</span>\n                        <span>(e916)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-icon-yes\"></span>\n                        <span className=\"mls\"> adminLib-icon-yes</span>\n                        <span>(e917)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-arrow-right\"></span>\n                        <span className=\"mls\"> adminLib-arrow-right</span>\n                        <span>(e918)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-calendar\"></span>\n                        <span className=\"mls\"> adminLib-calendar</span>\n                        <span>(e919)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-arrow-left\"></span>\n                        <span className=\"mls\"> adminLib-arrow-left</span>\n                        <span>(e91a)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-arrow-up\"></span>\n                        <span className=\"mls\"> adminLib-arrow-up</span>\n                        <span>(e91b)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-arrow-down\"></span>\n                        <span className=\"mls\"> adminLib-arrow-down</span>\n                        <span>(e91c)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-menu\"></span>\n                        <span className=\"mls\"> adminLib-menu</span>\n                        <span>(e91d)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-send\"></span>\n                        <span className=\"mls\"> adminLib-send</span>\n                        <span>(e91e)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-link\"></span>\n                        <span className=\"mls\"> adminLib-link</span>\n                        <span>(e91f)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-resize\"></span>\n                        <span className=\"mls\"> adminLib-resize</span>\n                        <span>(e920)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-crop-free\"></span>\n                        <span className=\"mls\"> adminLib-crop-free</span>\n                        <span>(e921)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-text-fields\"></span>\n                        <span className=\"mls\"> adminLib-text-fields</span>\n                        <span>(e922)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-support\"></span>\n                        <span className=\"mls\"> adminLib-support</span>\n                        <span>(e923)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-create\"></span>\n                        <span className=\"mls\"> adminLib-create</span>\n                        <span>(e924)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-keyboard-arrow-down\"></span>\n                        <span className=\"mls\"> adminLib-keyboard-arrow-down</span>\n                        <span>(e925)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-button-appearance\"></span>\n                        <span className=\"mls\"> adminLib-button-appearance</span>\n                        <span>(e926)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-enquiry-form-tab\"></span>\n                        <span className=\"mls\"> adminLib-enquiry-form-tab</span>\n                        <span>(e927)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-exclusion-tab\"></span>\n                        <span className=\"mls\"> adminLib-exclusion-tab</span>\n                        <span>(e928)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-general-tab\"></span>\n                        <span className=\"mls\"> adminLib-general-tab</span>\n                        <span>(e929)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-live-preview-tab\"></span>\n                        <span className=\"mls\"> adminLib-live-preview-tab</span>\n                        <span>(e92a)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-pro-tab\"></span>\n                        <span className=\"mls\"> adminLib-pro-tab</span>\n                        <span>(e92b)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-next\"></span>\n                        <span className=\"mls\"> adminLib-next</span>\n                        <span>(e92c)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-previous\"></span>\n                        <span className=\"mls\"> adminLib-previous</span>\n                        <span>(e92d)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-select\"></span>\n                        <span className=\"mls\"> adminLib-select</span>\n                        <span>(e92e)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-success-notification\"></span>\n                        <span className=\"mls\"> adminLib-success-notification</span>\n                        <span>(e92f)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-drop-down\"></span>\n                        <span className=\"mls\"> adminLib-drop-down</span>\n                        <span>(e930)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-vendor-form-delete\"></span>\n                        <span className=\"mls\"> adminLib-vendor-form-delete</span>\n                        <span>(e931)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-vendor-form-copy\"></span>\n                        <span className=\"mls\"> adminLib-vendor-form-copy</span>\n                        <span>(e932)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-vendor-form-add\"></span>\n                        <span className=\"mls\"> adminLib-vendor-form-add</span>\n                        <span>(e933)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-select-question-type\"></span>\n                        <span className=\"mls\"> adminLib-select-question-type</span>\n                        <span>(e934)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-url\"></span>\n                        <span className=\"mls\"> adminLib-form-url</span>\n                        <span>(e935)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-textbox\"></span>\n                        <span className=\"mls\"> adminLib-form-textbox</span>\n                        <span>(e936)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-textarea\"></span>\n                        <span className=\"mls\"> adminLib-form-textarea</span>\n                        <span>(e937)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-address01\"></span>\n                        <span className=\"mls\"> adminLib-form-address01</span>\n                        <span>(e938)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-address02\"></span>\n                        <span className=\"mls\"> adminLib-form-address02</span>\n                        <span>(e939)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-attachment\"></span>\n                        <span className=\"mls\"> adminLib-form-attachment</span>\n                        <span>(e93a)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-checkboxes\"></span>\n                        <span className=\"mls\"> adminLib-form-checkboxes</span>\n                        <span>(e93b)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-paint-brush\"></span>\n                        <span className=\"mls\"> adminLib-paint-brush</span>\n                        <span>(e93c)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-city\"></span>\n                        <span className=\"mls\"> adminLib-form-city</span>\n                        <span>(e93d)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-country\"></span>\n                        <span className=\"mls\"> adminLib-form-country</span>\n                        <span>(e93e)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-dropdown\"></span>\n                        <span className=\"mls\"> adminLib-form-dropdown</span>\n                        <span>(e93f)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-email\"></span>\n                        <span className=\"mls\"> adminLib-form-email</span>\n                        <span>(e940)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-multi-select\"></span>\n                        <span className=\"mls\"> adminLib-form-multi-select</span>\n                        <span>(e941)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-paypal-email\"></span>\n                        <span className=\"mls\"> adminLib-form-paypal-email</span>\n                        <span>(e942)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-phone\"></span>\n                        <span className=\"mls\"> adminLib-form-phone</span>\n                        <span>(e943)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-postcode\"></span>\n                        <span className=\"mls\"> adminLib-form-postcode</span>\n                        <span>(e944)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-radio\"></span>\n                        <span className=\"mls\"> adminLib-form-radio</span>\n                        <span>(e945)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-recaptcha\"></span>\n                        <span className=\"mls\"> adminLib-form-recaptcha</span>\n                        <span>(e946)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-section\"></span>\n                        <span className=\"mls\"> adminLib-form-section</span>\n                        <span>(e947)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-state\"></span>\n                        <span className=\"mls\"> adminLib-form-state</span>\n                        <span>(e948)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-star_icon\"></span>\n                        <span className=\"mls\"> adminLib-star_icon</span>\n                        <span>(e949)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-form-store-description\"></span>\n                        <span className=\"mls\"> adminLib-form-store-description</span>\n                        <span>(e94a)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-folder-open\"></span>\n                        <span className=\"mls\"> adminLib-folder-open</span>\n                        <span>(e94b)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-undo\"></span>\n                        <span className=\"mls\"> adminLib-undo</span>\n                        <span>(e94c)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-dropdown-checklist\"></span>\n                        <span className=\"mls\"> adminLib-dropdown-checklist</span>\n                        <span>(e94d)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-multi-select\"></span>\n                        <span className=\"mls\"> adminLib-multi-select</span>\n                        <span>(e94e)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-captcha-automatic-code\"></span>\n                        <span className=\"mls\"> adminLib-captcha-automatic-code</span>\n                        <span>(e94f)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-cloud-upload\"></span>\n                        <span className=\"mls\"> adminLib-cloud-upload</span>\n                        <span>(e950)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-help\"></span>\n                        <span className=\"mls\"> adminLib-help</span>\n                        <span>(e951)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-t-letter-bold\"></span>\n                        <span className=\"mls\"> adminLib-t-letter-bold</span>\n                        <span>(e952)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-clock2\"></span>\n                        <span className=\"mls\"> adminLib-clock2</span>\n                        <span>(e953)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-alarm\"></span>\n                        <span className=\"mls\"> adminLib-alarm</span>\n                        <span>(e954)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-thumbs-ok\"></span>\n                        <span className=\"mls\"> adminLib-thumbs-ok</span>\n                        <span>(e955)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-preview\"></span>\n                        <span className=\"mls\"> adminLib-preview</span>\n                        <span>(e956)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-paid\"></span>\n                        <span className=\"mls\"> adminLib-paid</span>\n                        <span>(e957)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-order\"></span>\n                        <span className=\"mls\"> adminLib-order</span>\n                        <span>(e958)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-multiple-inputs\"></span>\n                        <span className=\"mls\"> adminLib-multiple-inputs</span>\n                        <span>(e959)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-global-community\"></span>\n                        <span className=\"mls\"> adminLib-global-community</span>\n                        <span>(e95a)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-experiment-results\"></span>\n                        <span className=\"mls\"> adminLib-experiment-results</span>\n                        <span>(e95b)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-copy\"></span>\n                        <span className=\"mls\"> adminLib-copy</span>\n                        <span>(e95c)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-cogs-on-wheels\"></span>\n                        <span className=\"mls\"> adminLib-cogs-on-wheels</span>\n                        <span>(e95d)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-blocks\"></span>\n                        <span className=\"mls\"> adminLib-blocks</span>\n                        <span>(e95e)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-analytics\"></span>\n                        <span className=\"mls\"> adminLib-analytics</span>\n                        <span>(e95f)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-unread\"></span>\n                        <span className=\"mls\"> adminLib-unread</span>\n                        <span>(e9ba)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-eye\"></span>\n                        <span className=\"mls\"> adminLib-eye</span>\n                        <span>(e9ce)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-eye-blocked\"></span>\n                        <span className=\"mls\"> adminLib-eye-blocked</span>\n                        <span>(e9d1)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-text-fields\"></span>\n                        <span className=\"mls\"> adminLib-text-fields</span>\n                        <span>(e5201)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-move\"></span>\n                        <span className=\"mls\"> adminLib-move</span>\n                        <span>(e5402)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-delete\"></span>\n                        <span className=\"mls\"> adminLib-delete</span>\n                        <span>(e5800)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-more-vertical\"></span>\n                        <span className=\"mls\"> adminLib-more-vertical</span>\n                        <span>(e8051)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-attachment\"></span>\n                        <span className=\"mls\"> adminLib-attachment</span>\n                        <span>(e8598)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-dots-three-horizontal\"></span>\n                        <span className=\"mls\"> adminLib-dots-three-horizontal</span>\n                        <span>(e8eee)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-credit-card\"></span>\n                        <span className=\"mls\"> adminLib-credit-card</span>\n                        <span>(e9502)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-pin\"></span>\n                        <span className=\"mls\"> adminLib-pin</span>\n                        <span>(e963)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-star-fill\"></span>\n                        <span className=\"mls\"> adminLib-star-fill</span>\n                        <span>(e962)</span>\n                    </div>\n                    <div className=\"icon-box\">\n                        <span className=\"adminLib-star\"></span>\n                        <span className=\"mls\"> adminLib-star</span>\n                        <span>(e961)</span>\n                    </div>\n\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default IconList;","import React, { useEffect, useRef, useState } from \"react\";\nimport { getApiLink, sendApiResponse } from \"../../../service/apiService\";\nimport { useModules } from \"../../../context/ModuleContext\";\nimport { useSetting } from \"../../../context/SettingContext\";\nimport { BasicInput } from \"../BasicInput\";\nimport { TextArea } from \"../TextArea\";\nimport { FileInput } from \"../FileInput\";\nimport { CalendarInput } from \"../CalendarInput\";\nimport { MultiNumInput } from \"../MultiNumInput\";\nimport { RadioInput } from \"../RadioInput\";\nimport SelectInput from \"../SelectInput/SelectInput\";\nimport { SingleValue } from \"react-select\";\nimport { MultiCheckBox } from \"../MultiCheckbox\";\nimport ToggleSetting from \"../ToggleSetting/ToggleSetting\";\nimport WpEditor from \"../../WpEditor/WpEditor\";\nimport Label from \"../Label/Label\";\nimport Section from \"../Section/Section\";\nimport BlockText from \"../BlockText/BlockText\";\nimport ButtonCustomizer from \"../ButtonCustomiser/ButtonCustomiser\";\nimport FormCustomizer from \"../FormCustomizer/FormCustomizer\";\nimport FreeProFormCustomizer from \"../FreeProFormCustomizer/FreeProFormCustomizer\";\nimport CatalogCustomizer from \"../CatalogCustomizer/CatalogCustomizer\";\nimport MultiCheckboxTable from \"../MultiCheckboxTable/MultiCheckboxTable\";\nimport MergeComponent from \"../MergeComponent/MergeComponent\";\nimport ShortCodeTable from \"../ShortCodeTable/ShortCodeTable\";\nimport SyncNow from \"../SyncNow/SyncNow\";\nimport SyncMap from \"../SyncMap/SyncMap\";\nimport { AutoGeneratedDefaultInput } from \"../AutoGeneratedDefaultInput\";\nimport ConnectButton from \"../ConnectButton/ConnectButton\";\nimport { Log } from \"../Log\";\nimport { CheckboxCustomImg } from \"../CheckboxCustomImg\";\nimport InputMailchimpList from \"../../Advertisement/InputMailchimpList/InputMailchimpList\";\nimport { Dialog } from \"@mui/material\";\nimport { ProPopup,ModulePopup } from \"../../Advertisement\";\n\n\ndeclare const wp: any;\n\nconst PENALTY = 10;\nconst COOLDOWN = 1;\n\ninterface ApiResponse {\n    error: string;\n    redirect_link?: string;\n}\n\n\ninterface ModulePopupDataProps {\n    name: String;\n    settings: string;\n    plugin: string;\n}\ninterface CountryState {\n    label: string;\n    value: string;\n}\n\n\ninterface DependentCondition {\n    key: string;\n    set?: boolean;\n    value?: string | number | boolean;\n}\ninterface MultiNumOption {\n    key: string;\n    value: string | number;\n    label: string;\n    name?: string;\n    type: string;\n    desc: string;\n}\ninterface Field {\n    name: string;\n    type: \"select\" | \"number\" | \"text\"; // Include \"text\" in the type property\n    options?: { value: string; label: string }[]; // For select fields\n    placeholder?: string;\n}\ninterface Option {\n    label: string;\n    desc: string;\n}\ninterface Task {\n    action: string;\n    message: string;\n    cache?: \"course_id\" | \"user_id\";\n}\n\ninterface InputField {\n    key: string;\n    id: string;\n    class: string;\n    name: string;\n    type?: \"text\" | \"select\" | \"multi-select\" |\n    \"checkbox\" | \"country\" | \"state\" | \"radio-color\" |\n    \"radio-select\" | \"stock-alert-checkbox\"\n    | \"radio\" | \"multi-number\" | \"button\" |\n    \"password\" | \"calender\" | \"color\" |\n    \"email\" | \"number\" | \"range\" | \"file\" |\n    \"url\" | \"textarea\" | \"normalfile\" |\n    \"settingToggle\" | \"wpeditor\" | \"label\"\n    | \"section\" | \"blocktext\" | \"button-customizer\" |\n    \"stock-alert-form-customizer\" | \"form-customizer\"\n    | \"catalog-customizer\" | \"multi-checkbox-table\" |\n    \"mergeComponent\" | \"shortCode-table\" | \"syncbutton\" |\n    \"sync-map\" | \"sso-key\" | \"testconnection\" | \"log\" |\n    \"checkbox-custom-img\"|\"api-connect\" |\"from-builder\";\n    desc?: string;\n    placeholder?: string;\n    inputLabel?: string;\n    rangeUnit?: string;\n    min?: number;\n    max?: number;\n    proSetting?: boolean;\n    moduleEnabled?: boolean;\n    parameter?: string;\n    dependent?: DependentCondition | DependentCondition[];\n    rowNumber?: number;\n    colNumber?: number;\n    value?: string;\n    width?: number;\n    height?: number;\n    multiple?: boolean;\n    range?: boolean;\n    select_deselect?: boolean;\n    look?: string;\n    tour?: string;\n    right_content?: boolean;\n    dependentPlugin?: boolean;\n    dependentSetting?: string;\n    defaultValue?: string;\n    valuename?: string;\n    hint?: string;\n    blocktext?: string;\n    rows: { key: string; label: string; options?: { value: string | number; label: string }[] }[];\n    columns: { key: string; label: string; moduleEnabled?: string }[];\n    fields: Field[];\n    options?: MultiNumOption;\n    optionLabel?: string[];\n    apilink?: string;\n    interval?: number;\n    statusApiLink?: string;\n    syncFieldsMap?: Record<string, { heading: string; fields: Record<string, string> }>;\n    apiLink?: string;\n    tasks: Task[];\n    fetchApiLink?: string;\n    downloadApiLink?: string;\n    fileName?: string;\n    syncDirections: {\n        value: string;\n        img1: string;\n        img2: string;\n        label: string;\n    }[];\n    optionKey?: string;\n    selectKey?: string;\n    label?:string;\n    classes?: string;\n}\n\nexport interface SelectOption {\n    value: string;\n    label: string;\n}\ninterface Settings{\n    modal: InputField[];\n    submitUrl: string;\n    id: string;\n}\ninterface AdminFormProps {\n    settings: Settings;\n    vendorId?: string;\n    announcementId?: string;\n    knowladgebaseId?: string;\n}\nconst AdminForm: React.FC<AdminFormProps> = ({ settings, vendorId, announcementId, knowladgebaseId }) => {\n    const { modal, submitUrl, id } = settings;\n    const settingChanged = useRef<boolean>(false);\n    const counter = useRef<number>(0);\n    const counterId = useRef<NodeJS.Timeout | number>(0);\n    const [successMsg, setSuccessMsg] = useState<string>(\"\");\n    const [modelOpen, setModelOpen] = useState<boolean>(false);\n    const { setting, updateSetting } = useSetting();\n    const [modelModuleOpen, setModelModuleOpen] = useState<boolean>(false);\n    const [countryState, setCountryState] = useState<CountryState[]>([]);\n\n\n    const [modulePopupData, setModulePopupData] = useState<ModulePopupDataProps>({\n        name: '',\n        settings: '',\n        plugin: '',\n    });\n    const { modules } = useModules();\n\n    useEffect(() => {\n        if (settingChanged.current) {\n            settingChanged.current = false;\n\n            // Set counter by penalty\n            counter.current = PENALTY;\n\n            // Clear previous counter\n            if (counterId.current) {\n                clearInterval(counterId.current);\n            }\n\n            // Create new interval\n            const intervalId = setInterval(() => {\n                counter.current -= COOLDOWN;\n\n                // Cooldown complete time for DB request\n                if (counter.current < 0) {\n                    sendApiResponse(getApiLink(submitUrl), {\n                        settingName: id,\n                        vendor_id: vendorId || \"\",\n                        announcement_id: announcementId || \"\",\n                        knowladgebase_id: knowladgebaseId || \"\",\n                    })\n                        .then((response) => response as ApiResponse)\n                        .then((response: ApiResponse) => {\n                            // Set success message for 2 seconds\n                            setSuccessMsg(response.error);\n                            setTimeout(() => setSuccessMsg(\"\"), 2000);\n\n                            // If response has redirect link then redirect\n                            if (response.redirect_link) {\n                                window.location.href = response.redirect_link;\n                            }\n                        })\n                        .catch((error) => {\n                            console.error(\"API Error:\", error);\n                        });\n\n                    clearInterval(intervalId);\n                    counterId.current = 0;\n                }\n            }, 50);\n\n            // Store the interval ID\n            counterId.current = intervalId;\n        }\n    }, [submitUrl, id, vendorId, announcementId, knowladgebaseId]);\n\n    const isProSetting = (proDependent: boolean): boolean => {\n        return proDependent && !window.appLocalizer?.khali_dabba;\n    };\n    const proSettingChanged = (isProSetting: boolean): boolean => {\n        if (isProSetting && !window.appLocalizer?.khali_dabba) {\n            setModelOpen(true);\n            return true;\n        }\n        return false;\n    };\n\n    const moduleEnabledChanged = (\n        moduleEnabled: string,\n        dependentSetting: string = \"\",\n        dependentPlugin: boolean = false\n    ): boolean => {\n        let popupData: { name: string; settings: string; plugin: string } = {\n            name: \"\",\n            settings: \"\",\n            plugin: \"\",\n        };\n\n        if (moduleEnabled && !modules.includes(moduleEnabled)) {\n            popupData.name = moduleEnabled;\n        }\n\n        if (\n            dependentSetting &&\n            Array.isArray(setting[dependentSetting]) &&\n            setting[dependentSetting].length === 0\n        ) {\n            popupData.settings = dependentSetting;\n        }\n\n        if (dependentPlugin) {\n            popupData.plugin = \"notifima\";\n        }\n\n        if (popupData.name || popupData.settings || popupData.plugin) {\n            setModulePopupData(popupData);\n            setModelModuleOpen(true);\n            return true;\n        }\n\n        return false;\n    };\n\n    const handleChange = (\n        event: any,\n        key: string,\n        type: \"single\" | \"multiple\" = \"single\",\n        fromType: \"simple\" | \"calender\" | \"select\" | \"multi-select\" | \"wpeditor\" | \"country\" = \"simple\",\n        arrayValue: any[] = []\n    ): void => {\n        settingChanged.current = true;\n\n        if (type === \"single\") {\n            if (fromType === \"simple\") {\n                updateSetting(key, event.target.value);\n            } else if (fromType === \"calender\") {\n                let formattedDate: string;\n\n                if (Array.isArray(event)) {\n                    // Check if all elements are ranges\n                    if (event.every((item) => Array.isArray(item) && item.length === 2)) {\n                        // Handle one or multiple ranges\n                        formattedDate = event\n                            .map((range) => {\n                                const startDate = range[0]?.toString();\n                                const endDate = range[1]?.toString();\n                                return `${startDate} - ${endDate}`;\n                            })\n                            .join(\", \");\n                    } else {\n                        formattedDate = event.map((item) => item.toString()).join(\",\");\n                    }\n                } else {\n                    formattedDate = event.toString();\n                }\n\n                updateSetting(key, formattedDate);\n            } else if (fromType === \"select\") {\n                updateSetting(key, arrayValue.find((item) => item.value === event.target.value) || \"\");\n            } else if (fromType === \"multi-select\") {\n                updateSetting(key, event);\n            } else if (fromType === \"wpeditor\") {\n                updateSetting(key, event);\n            } else if (fromType === \"country\") {\n                updateSetting(key, arrayValue.find((item) => item.value === event.target.value) || \"\");\n\n                const countryData = window.appLocalizer?.countries\n                    ? JSON.parse(window.appLocalizer.countries.replace(/&quot;/g, '\"'))\n                    : {};\n\n                const stateList = countryData[event.target.value] || {};\n                const countryListArray = Object.keys(stateList).map((key_country) => ({\n                    label: key_country,\n                    value: stateList[key_country],\n                }));\n\n                setCountryState(countryListArray);\n            }\n        } else {\n            let prevData: any[] = Array.isArray(setting[key]) ? setting[key] : [];\n\n            if (!prevData.length || typeof prevData === \"string\" || prevData === null || typeof prevData === \"boolean\") {\n                prevData = [key];\n            }\n\n            prevData = prevData.filter((data) => data !== event.target.value);\n\n            if (event.target.checked) {\n                prevData.push(event.target.value);\n            }\n\n            updateSetting(key, prevData);\n        }\n    };\n\n    const handleMultiNumberChange = (\n        e: React.ChangeEvent<HTMLInputElement>,\n        key?: string,\n        optionKey?: string,\n        index?: number\n    ) => {\n        if (!key || !optionKey || index === undefined) return; // Ensure values are valid\n\n        settingChanged.current = true;\n\n        const multipleOptions: Record<number, { key: string; value: string }> =\n            (setting[key] as Record<number, { key: string; value: string }>) || {};\n\n        multipleOptions[index] = {\n            key: optionKey,\n            value: e.target.value,\n        };\n\n        updateSetting(key, multipleOptions);\n    };\n\n\n    const handlMultiSelectDeselectChange = (\n        key: string,\n        options: { value: string; proSetting?: boolean }[],\n        type: string = \"\"\n    ) => {\n        settingChanged.current = true;\n\n        if (Array.isArray(setting[key]) && setting[key].length > 0) {\n            updateSetting(key, []);\n        } else {\n            const newValue = options\n                .filter((option) => type === \"multi-select\" || !isProSetting(option.proSetting ?? false))\n                .map(({ value }) => value);\n\n            updateSetting(key, newValue);\n        }\n    };\n\n\n    const runUploader = (key: string) => {\n        settingChanged.current = true;\n\n        // Create a new media frame\n        const frame = wp.media({\n            title: \"Select or Upload Media Of Your Chosen Persuasion\",\n            button: {\n                text: \"Use this media\",\n            },\n            multiple: false, // Set to true to allow multiple files to be selected\n        });\n\n        frame.on(\"select\", () => {\n            // Get media attachment details from the frame state\n            const attachment = frame.state().get(\"selection\").first().toJSON() as { url: string };\n            updateSetting(key, attachment.url);\n        });\n\n        // Finally, open the modal on click\n        frame.open();\n    };\n\n    const isContain = (key: string, value: string | number | boolean | null = null): boolean => {\n        const settingValue = setting[key];\n\n        // If settingValue is an array\n        if (Array.isArray(settingValue)) {\n            // If value is null and settingValue has elements, return true\n            if (value === null && settingValue.length > 0) {\n                return true;\n            }\n\n            return settingValue.includes(value);\n        }\n\n        // If settingValue is not an array\n        if (value === null && Boolean(settingValue)) {\n            return true;\n        }\n\n        return settingValue === value;\n    };\n\n\n    const shouldRender = (dependent: DependentCondition): boolean => {\n        if (dependent.set === true && !isContain(dependent.key)) {\n            return false;\n        }\n        if (dependent.set === false && isContain(dependent.key)) {\n            return false;\n        }\n        if (dependent.value !== undefined && !isContain(dependent.key, dependent.value)) {\n            return false;\n        }\n        return true;\n    };\n    const handleSubmit=(e:any)=>{\n        console.log(\"hiii\");\n    }\n\n    const renderForm = () => {\n        return modal.map((inputField: InputField, index: number) => {\n            let value: string | number = setting[inputField.key] ?? \"\";\n            let input: JSX.Element | null = null;\n\n            // Filter dependent conditions\n            if (Array.isArray(inputField.dependent)) {\n                for (let dependent of inputField.dependent) {\n                    if (!shouldRender(dependent)) {\n                        return null;\n                    }\n                }\n            } else if (inputField.dependent) {\n                if (!shouldRender(inputField.dependent)) {\n                    return null;\n                }\n            }\n\n            // Set input field based on type\n            switch (inputField.type) {\n                case \"text\":\n                case \"url\":\n                case \"password\":\n                case \"email\":\n                case \"number\":\n                case \"range\":\n                    input = (\n                        <BasicInput\n                            wrapperClass=\"setting-form-input\"\n                            descClass=\"settings-metabox-description\"\n                            description={inputField.desc}\n                            key={inputField.key}\n                            id={inputField.id}\n                            name={inputField.name}\n                            type={inputField.type}\n                            placeholder={inputField.placeholder}\n                            inputLabel={inputField.inputLabel} // for range input label\n                            rangeUnit={inputField.rangeUnit} // for range parameter\n                            min={inputField.min ?? 0} // for range min value\n                            max={inputField.max ?? 50} // for range max value\n                            value={value}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled ?? \"\"))) {\n                                    handleChange(e, inputField.key);\n                                }\n                            }}\n                            parameter={inputField.parameter} // for showing text beside the text box\n                        />\n                    );\n                    break;\n                case \"textarea\":\n                    input = (\n                        <TextArea\n                            wrapperClass=\"setting-from-textarea\"\n                            inputClass={inputField.class || \"form-input\"}\n                            descClass=\"settings-metabox-description\"\n                            description={inputField.desc}\n                            key={inputField.key}\n                            id={inputField.id}\n                            name={inputField.name}\n                            placeholder={inputField.placeholder}\n                            rowNumber={inputField.rowNumber} // for row number value\n                            colNumber={inputField.colNumber} // for column number value\n                            value={value}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(e) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled ?? \"\"))) {\n                                    handleChange(e, inputField.key);\n                                }\n                            }}\n                        />\n                    );\n                    break;\n                case \"normalfile\":\n                    input = (\n                        <BasicInput\n                            inputClass=\"setting-form-input\"\n                            type=\"file\"\n                            key={inputField.key}\n                            name={inputField.name}\n                            value={value}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(e) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled ?? \"\"))) {\n                                    handleChange(e, inputField.key);\n                                }\n                            }}\n                        />\n                    );\n                    break;\n                case \"file\":\n                    input = (\n                        <FileInput\n                            wrapperClass=\"setting-file-uploader-class\"\n                            descClass=\"settings-metabox-description\"\n                            description={inputField.desc}\n                            inputClass={`${inputField.key} form-input`}\n                            imageSrc={value !== undefined ? String(value) : window.appLocalizer?.default_logo}\n                            imageWidth={inputField.width} // for width\n                            imageHeight={inputField.height} // for height\n                            buttonClass=\"btn btn-purple\"\n                            openUploader={window.appLocalizer?.open_uploader} // for upload button text\n                            type=\"hidden\"\n                            key={inputField.key}\n                            name={inputField.name}\n                            value={value !== undefined ? String(value) : \"\"}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(e) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    handleChange(e, inputField.key);\n                                }\n                            }}\n                            onButtonClick={(e) => {\n                                runUploader(inputField.key);\n                            }}\n                        />\n                    );\n                    break;\n                case \"color\":\n                    input = (\n                        <BasicInput\n                            wrapperClass=\"settings-color-picker-parent-class\"\n                            inputClass=\"setting-color-picker\"\n                            descClass=\"settings-metabox-description\"\n                            description={inputField.desc}\n                            key={inputField.key}\n                            id={inputField.id}\n                            name={inputField.name}\n                            type={inputField.type}\n                            value={value || \"#000000\"}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(e) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    handleChange(e, inputField.key);\n                                }\n                            }}\n                        />\n                    );\n                    break;\n                case \"calender\":\n                    input = (\n                        <CalendarInput\n                            wrapperClass=\"settings-calender\"\n                            inputClass=\"teal\"\n                            multiple={inputField.multiple || false} //for single or mutiple input (true/false)\n                            range={inputField.range || false} // for range select (true/false)\n                            value={setting[inputField.key] || \"\"}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(e) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    handleChange(\n                                        e,\n                                        inputField.key,\n                                        \"single\",\n                                        [\"calender\", \"select\", \"multi-select\", \"wpeditor\", \"country\"].includes(inputField.type ?? \"\")\n                                            ? (inputField.type as \"calender\" | \"select\" | \"multi-select\" | \"wpeditor\" | \"country\")\n                                            : \"simple\" // Default for unsupported types\n                                    );\n                                }\n                            }}\n                        />\n                    );\n                    break;\n                case \"button\":\n                    input = (\n                        <div className=\"form-button-group\">\n                            <div className=\"setting-section-divider\">&nbsp;</div>\n                            <label className=\"settings-form-label\"></label>\n                            <div className=\"settings-input-content\">\n                                <BasicInput\n                                    wrapperClass=\"settings-basic-input-class\"\n                                    inputClass=\"btn default-btn\"\n                                    descClass=\"settings-metabox-description\"\n                                    description={inputField.desc}\n                                    type={inputField.type}\n                                    placeholder={inputField.placeholder}\n                                    proSetting={isProSetting(inputField.proSetting ?? false)}\n                                // onChange={handleChange}\n                                />\n                            </div>\n                        </div>\n                    );\n                    break;\n\n                case \"multi-number\":\n                    input = (\n                        <MultiNumInput\n                            parentWrapperClass=\"settings-basic-input-class\"\n                            childWrapperClass=\"settings-basic-child-wrap\"\n                            inputWrapperClass=\"settings-basic-input-child-class\"\n                            innerInputWrapperClass=\"setting-form-input\"\n                            inputLabelClass=\"setting-form-input-label\"\n                            idPrefix=\"setting-integer-input\"\n                            keyName={inputField.key}\n                            inputClass={inputField.class}\n                            value={setting[inputField.key]}\n                            options={Array.isArray(inputField.options) ? inputField.options : inputField.options ? [] : []}\n                            onChange={handleMultiNumberChange}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                        />\n                    );\n                    break;\n\n                case \"radio\":\n                    input = (\n                        <RadioInput\n                            wrapperClass=\"settings-form-group-radio\"\n                            inputWrapperClass=\"radio-input-label-wrap\"\n                            inputClass=\"setting-form-input\"\n                            descClass=\"settings-metabox-description\"\n                            activeClass=\"radio-select-active\"\n                            description={inputField.desc}\n                            value={typeof value === \"number\" ? value.toString() : value}\n                            name={inputField.name}\n                            keyName={inputField.key}\n                            options={Array.isArray(value) ? value : []}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(e) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    handleChange(e, inputField.key);\n                                }\n                            }}\n                        />\n                    );\n                    break;\n                // for radio select button with image hover\n                case \"radio-select\":\n                    input = (\n                        <RadioInput\n                            wrapperClass=\"form-group-radio-select\"\n                            inputWrapperClass=\"radioselect-class\"\n                            inputClass=\"setting-form-input\"\n                            radiSelectLabelClass=\"radio-select-under-label-class\"\n                            labelImgClass=\"section-img-fluid\"\n                            labelOverlayClass=\"radioselect-overlay-text\"\n                            labelOverlayText=\"Select your Store\"\n                            idPrefix=\"radio-select-under\"\n                            descClass=\"settings-metabox-description\"\n                            activeClass=\"radio-select-active\"\n                            description={inputField.desc}\n                            type=\"radio-select\"\n                            value={typeof value === \"number\" ? value.toString() : value}\n                            name={inputField.name}\n                            keyName={inputField.key}\n                            options={Array.isArray(value) ? value : []}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(e) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    handleChange(e, inputField.key);\n                                }\n                            }}\n                        />\n                    );\n                    break;\n\n                // for radio color input \n                case \"radio-color\":\n                    input = (\n                        <RadioInput\n                            wrapperClass=\"form-group-radio-color\"\n                            inputWrapperClass=\"settings-radio-color \"\n                            inputClass=\"setting-form-input\"\n                            idPrefix=\"radio-color-under\"\n                            activeClass=\"radio-color-active\"\n                            descClass=\"settings-metabox-description\"\n                            description={inputField.desc}\n                            type=\"radio-color\"\n                            value={typeof value === \"number\" ? value.toString() : value}\n                            name={inputField.name}\n                            keyName={inputField.key}\n                            options={Array.isArray(value) ? value : []}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(e) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    handleChange(e, inputField.key);\n                                }\n                            }}\n                        />\n                    );\n                    break;\n\n                // Normal select box\n                case \"select\":\n                    input = (\n                        <SelectInput\n                            wrapperClass=\"form-select-field-wrapper\"\n                            descClass=\"settings-metabox-description\"\n                            description={inputField.desc}\n                            inputClass={inputField.key}\n                            options={Array.isArray(value) ? value : []}\n                            value={typeof value === \"number\" ? value.toString() : value}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(data) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    settingChanged.current = true;\n                                    updateSetting(inputField.key, (data as SingleValue<SelectOption>)?.value);\n                                }\n                            }}\n                        />\n                    );\n                    break;\n\n\n                // for multiple select box with select/deselect button\n                case \"multi-select\":\n                    input = (\n                        <SelectInput\n                            wrapperClass=\"settings-from-multi-select\"\n                            descClass=\"settings-metabox-description\"\n                            selectDeselectClass=\"btn-purple select-deselect-trigger\"\n                            selectDeselect={inputField.select_deselect}\n                            selectDeselectValue=\"Select / Deselect All\"\n                            description={inputField.desc}\n                            inputClass={inputField.key}\n                            options={Array.isArray(value) ? value : []}\n                            type=\"multi-select\"\n                            value={typeof value === \"number\" ? value.toString() : value}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(selectedOption, actionMeta) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    handleChange(selectedOption, inputField.key, \"single\", \"multi-select\", Array.isArray(selectedOption) ? selectedOption : []);\n                                }\n                            }}\n\n                            onMultiSelectDeselectChange={(e) =>\n                                handlMultiSelectDeselectChange(\n                                    inputField.key,\n                                    Array.isArray(inputField.options) ? inputField.options : [], // Ensure options is always an array\n                                    \"multi-select\"\n                                )\n                            }\n\n                        />\n                    );\n                    break;\n                case \"country\":\n                    input = (\n                        <SelectInput\n                            wrapperClass=\"country-choice-class\"\n                            descClass=\"settings-metabox-description\"\n                            description={inputField.desc}\n                            inputClass={inputField.key}\n                            options={Array.isArray(value) ? value : []}\n                            value={typeof value === \"number\" ? value.toString() : value}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(selectedOption) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    handleChange(\n                                        selectedOption,\n                                        inputField.key,\n                                        \"single\",\n                                        \"country\",\n                                        Array.isArray(selectedOption) ? selectedOption : [selectedOption]\n                                    );\n                                }\n                            }}\n                        />\n                    );\n                    break;\n                case \"state\":\n                    input = (\n                        <SelectInput\n                            wrapperClass=\"state-choice-class\"\n                            descClass=\"settings-metabox-description\"\n                            description={inputField.desc}\n                            inputClass={inputField.key}\n                            options={countryState}\n                            value={typeof value === \"number\" ? value.toString() : value}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(selectedOption) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    handleChange(\n                                        selectedOption,\n                                        inputField.key,\n                                        \"single\",\n                                        \"select\",\n                                        Array.isArray(selectedOption) ? selectedOption : [selectedOption]\n                                    );\n                                }\n                            }}\n\n                        />\n                    );\n                    break;\n                // For single or multiple checkbox (free / pro or some free some pro)\n                case \"checkbox\":\n                    input = (\n                        <MultiCheckBox\n                            wrapperClass=\"checkbox-list-side-by-side\"\n                            descClass=\"settings-metabox-description\"\n                            description={inputField.desc}\n                            selectDeselectClass=\"btn-purple select-deselect-trigger\"\n                            inputWrapperClass=\"toggle-checkbox-header\"\n                            inputInnerWrapperClass={inputField.look == 'toggle' ? \"toggle-checkbox\" : \"default-checkbox\"}// this props for change classes default/ Toggle\n                            inputClass={inputField.class}\n                            tour={inputField.tour}\n                            hintOuterClass=\"checkbox-description\"\n                            hintInnerClass=\"hover-tooltip\"\n                            idPrefix=\"toggle-switch\"\n                            selectDeselect={inputField.select_deselect}\n                            selectDeselectValue=\"Select / Deselect All\"\n                            rightContentClass=\"settings-checkbox-description\"\n                            rightContent={inputField.right_content} // for place checkbox right\n                            options={Array.isArray(inputField.options) ? inputField.options : []}\n                            value={Array.isArray(value) ? value : typeof value === \"string\" ? [value] : []}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(e) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    handleChange(e, inputField.key, \"multiple\");\n                                }\n                            }}\n                            onMultiSelectDeselectChange={(e) =>\n                                handlMultiSelectDeselectChange(inputField.key, Array.isArray(inputField.options) ? inputField.options : [])\n                            }\n                            proChanged={() => setModelOpen(true)}\n                        />\n                    );\n                    break;\n                // For particular plugin required checkbox ( like if stock-alert plugin not active the checkbox not open)\n                case \"stock-alert-checkbox\":\n                    input = (\n                        <MultiCheckBox\n                            wrapperClass=\"checkbox-list-side-by-side\"\n                            descClass=\"settings-metabox-description\"\n                            description={inputField.desc}\n                            selectDeselectClass=\"btn-purple select-deselect-trigger\"\n                            inputWrapperClass=\"toggle-checkbox-header\"\n                            inputInnerWrapperClass=\"toggle-checkbox\"\n                            inputClass={inputField.class}\n                            hintOuterClass=\"dashicons dashicons-info\"\n                            hintInnerClass=\"hover-tooltip\"\n                            idPrefix=\"toggle-switch\"\n                            selectDeselect={inputField.select_deselect}\n                            selectDeselectValue=\"Select / Deselect All\"\n                            rightContentClass=\"settings-metabox-description\"\n                            rightContent={inputField.right_content}\n                            options={Array.isArray(inputField.options) ? inputField.options : []}\n                            value={Array.isArray(value) ? value : typeof value === \"string\" ? [value] : []}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(e) => {\n                                const dependentPlugin = inputField.dependentPlugin ? false : true;\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled), inputField.dependentSetting, dependentPlugin)) {\n                                    if (inputField.dependentPlugin) {\n                                        handleChange(e, inputField.key, \"multiple\");\n                                    }\n                                }\n                            }}\n                            onMultiSelectDeselectChange={(e) =>\n                                handlMultiSelectDeselectChange(\n                                    inputField.key,\n                                    Array.isArray(inputField.options)\n                                        ? inputField.options.map(({ value, proSetting }) => ({\n                                            value: String(value),  // Convert to string\n                                            proSetting\n                                        }))\n                                        : [] // Default to an empty array if it's not an array\n                                )\n                            }\n\n                        />\n                    );\n                    break;\n                // Rectangle radio toggle button\n                case \"settingToggle\":\n                    input = (\n                        <ToggleSetting\n                            wrapperClass={`setting-form-input`}\n                            descClass=\"settings-metabox-description\"\n                            description={inputField.desc}\n                            key={inputField.key}\n                            options={Array.isArray(inputField.options) ? inputField.options : []}\n                            value={String(value ?? inputField.defaultValue ?? \"\")}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(data) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    settingChanged.current = true;\n                                    updateSetting(inputField.key, data)\n                                }\n                            }}\n                        />\n                    );\n                    break;\n                case \"wpeditor\":\n                    input = (\n                        <WpEditor\n                            apiKey={String(window.appLocalizer?.mvx_tinymce_key || \"\")}\n                            value={String(value)}\n                            onEditorChange={(e) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    handleChange(e, inputField.key, \"single\", \"wpeditor\");\n                                }\n                            }}\n                        />\n                    );\n                    break;\n                case \"label\":\n                    input = (\n                        <Label\n                            wrapperClass=\"form-group-only-label\"\n                            descClass=\"settings-metabox-description\"\n                            value={String(inputField.valuename)}\n                            description={inputField.desc}\n                        />\n                    );\n                    break;\n                // For separation (if you want heading in line then put desc or add some description then add hint)\n                case \"section\":\n                    input = (\n                        <Section\n                            wrapperClass=\"setting-section-divider\"\n                            value={inputField.desc}\n                            hint={inputField.hint} />\n                    );\n                    break;\n\n                case \"blocktext\":\n                    input = (\n                        <BlockText\n                            wrapperClass=\"blocktext-class\"\n                            blockTextClass=\"settings-metabox-description-code\"\n                            value={String(inputField.blocktext)}\n                        />\n                    );\n                    break;\n                // Special input type project specific\n                // customize button\n                case \"button-customizer\":\n                    input = (\n                        <ButtonCustomizer\n                            text={(setting[inputField.key]?.button_text) || 'Button Text'}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            setting={setting[inputField.key]}\n                            onChange={(key, value, isRestoreDefaults = false) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    settingChanged.current = true;\n                                    if (isRestoreDefaults) {\n                                        updateSetting(inputField.key, value);\n                                    } else {\n                                        updateSetting(inputField.key, { ...setting[inputField.key], [key]: value });\n                                    }\n                                }\n                            }}\n                        />\n                    );\n                    break;\n                case \"stock-alert-form-customizer\":\n                    input = (\n                        <FormCustomizer\n                            value={String(value)}\n                            buttonText={setting.customize_btn && setting.customize_btn.button_text || 'Submit'}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(e, key) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false)) {\n                                    settingChanged.current = true;\n                                    updateSetting(e, key);\n                                }\n                            }}\n                        />\n                    );\n                    break;\n                // custom from with free-pro tab\n                case \"form-customizer\":\n                    input = (\n                        <FreeProFormCustomizer\n                            key={inputField.key}\n                            setting={setting}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            proSettingChange={() => proSettingChanged(inputField.proSetting ?? false)}\n                            moduleEnabledChange={() => moduleEnabledChanged(String(inputField.moduleEnabled))}\n                            onChange={(key, value) => {\n                                settingChanged.current = true;\n                                updateSetting(key, value);\n                            }}\n                        />\n                    );\n                    break;\n                // shop page builder( use in catalogx )\n                case \"catalog-customizer\":\n                    input = (\n                        <CatalogCustomizer\n                            setting={setting}\n                            proSetting={window.appLocalizer?.khali_dabba ?? false}\n                            onChange={(key, value) => {\n                                settingChanged.current = true;\n                                updateSetting(key, value);\n                            }}\n                        />\n                    );\n                    break;\n                // for Grid-table input with multiple checkbox\n                case \"multi-checkbox-table\":\n                    input = (\n                        <MultiCheckboxTable\n                            rows={inputField.rows} // row array\n                            columns={inputField.columns} // columns array\n                            description={String(inputField.desc)}\n                            setting={setting}\n                            proSetting={isProSetting(inputField.proSetting ?? false)}\n                            modules={modules}\n                            onChange={(key, value) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    settingChanged.current = true;\n                                    updateSetting(key, value);\n                                }\n                            }}\n                            moduleChange={(moduleEnabled) => {\n                                setModelModuleOpen(true);\n                                setModulePopupData({\n                                    name: moduleEnabled,\n                                    settings: '',\n                                    plugin: '',\n                                });\n\n                            }}\n                        />\n                    );\n                    break;\n                case \"mergeComponent\":\n                    input = (\n                        <MergeComponent\n                            wrapperClass={`setting-form-input`}\n                            descClass=\"settings-metabox-description\"\n                            description={inputField.desc}\n                            value={typeof value === \"object\" && value !== null ? value : {}}\n                            fields={Array.isArray(inputField.fields) ? inputField.fields : []} proSetting={isProSetting(inputField.proSetting ?? false)}\n                            onChange={(data) => {\n                                if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                    settingChanged.current = true;\n                                    updateSetting(inputField.key, data)\n                                }\n                            }}\n                        />\n                    );\n                    break;\n                // for shortcode name and description\n                case \"shortCode-table\":\n                    input = (\n                        <ShortCodeTable\n                            wrapperClass={`setting-form-input`}\n                            descClass=\"settings-metabox-description\"\n                            description={inputField.desc}\n                            key={inputField.key}\n                            options={Array.isArray(inputField.options) ? inputField.options : []} // array includes label and description\n                            optionLabel={inputField.optionLabel}\n                        />\n                    );\n                    break;\n                // Synchronize button (Changes later)\n                case \"syncbutton\":\n                    input = <SyncNow\n                        buttonKey={inputField.key}\n                        apilink={String(inputField.apilink)} // apilink \n                        value={String(inputField.value)}\n                        description={String(inputField.desc)}\n                        proSetting={isProSetting(inputField.proSetting ?? false)}\n                        proSettingChanged={() => proSettingChanged(inputField.proSetting ?? false)}\n                        interval={Number(inputField.interval)}\n                        statusApiLink={String(inputField.statusApiLink)} // api for each status of synchronization\n                    />\n                    break;\n                // attribute mapping\n                case \"sync-map\":\n                    input = <SyncMap\n                        description={inputField.desc}\n                        proSetting={isProSetting(inputField.proSetting ?? false)}\n                        proSettingChanged={() => proSettingChanged(inputField.proSetting ?? false)}\n                        value={Array.isArray(value) ? (value as [string, string][]) : [[\"key\", String(value)]]}\n                        syncFieldsMap={inputField.syncFieldsMap ?? {}} onChange={(value) => {\n                            if (!proSettingChanged(inputField.proSetting ?? false) && true) {\n                                settingChanged.current = true;\n                                updateSetting(inputField.key, value)\n                            }\n                        }}\n                    />\n                    break;\n                case \"sso-key\":\n                    input = <AutoGeneratedDefaultInput\n                        value={String(value)}\n                        description={inputField.desc}\n                        proSetting={isProSetting(inputField.proSetting ?? false)}\n                        onChange={(value) => {\n                            if (!proSettingChanged(inputField.proSetting ?? false) && true) {\n                                settingChanged.current = true;\n                                updateSetting(inputField.key, value)\n                            }\n                        }}\n                    />\n                    break;\n\n                // Test connection button\n                case \"testconnection\":\n                    input = <ConnectButton\n                        apiLink={String(inputField.apiLink)} // apilink \n                        tasks={inputField.tasks ?? []} /> // all tasks for test connection\n                    break;\n                case \"log\":\n                    input = <Log\n                        fetchApiLink={String(inputField.fetchApiLink)} // api to fetch the log content\n                        downloadApiLink={String(inputField.downloadApiLink)} // download the log file\n                        downloadFileName={String(inputField.fileName)} /> // log file name\n                    break;\n                // Checkbox with custom image\n                case \"checkbox-custom-img\":\n                    input = <CheckboxCustomImg\n                        proSetting={isProSetting(inputField.proSetting ?? false)}\n                        description={inputField.desc}\n                        value={Array.isArray(value) ? value : [String(value)]}\n                        syncDirections={inputField.syncDirections} // array includes label, value, img1, img2\n                        onChange={(data) => {\n                            if (!proSettingChanged(inputField.proSetting ?? false) && !moduleEnabledChanged(String(inputField.moduleEnabled))) {\n                                settingChanged.current = true;\n                                updateSetting(inputField.key, data)\n                            }\n                        }}\n                    />\n                    break;\n                // For mailchimp list\n                case \"api-connect\":\n                    input = (\n                        <InputMailchimpList\n                            mailchimpKey={inputField.key}\n                            selectKey={String(inputField.selectKey)}\n                            optionKey={String(inputField.optionKey)}\n                            onChange={handleChange}\n                            proSettingChanged={\n                                () => proSettingChanged(inputField.proSetting??false)\n                            }\n                            settingChanged={settingChanged}\n                            apiLink={String(inputField.apiLink)} // fetch api\n                        />\n                    );\n                    break;\n\n            }\n\n            return inputField.type === \"section\" || inputField.label === \"no_label\" ? (\n                input\n              ) : (\n                <div key={\"g\" + inputField.key} className={`form-group ${inputField.classes ? inputField.classes : ''}`}>\n                  {inputField.type !== \"catalog-customizer\" && inputField.type !== \"from-builder\" && inputField.type !== \"form-customizer\" && (\n                    <label\n                      className=\"settings-form-label\"\n                      key={\"l\" + inputField.key}\n                      htmlFor={inputField.key}\n                    >\n                      <p>{inputField.label}</p>\n                    </label>\n                  )}\n                  \n                  <div className=\"settings-input-content\">{input}</div>\n                </div>\n              );\n        });\n    };\n\n    const handleModelClose = () => {\n        setModelOpen(false);\n      };\n    \n      const handleModulePopupClose = () => {\n        setModelModuleOpen(false);\n      };\n    \n\n      return (\n        <>\n          <div className=\"dynamic-fields-wrapper\">\n            <Dialog\n              className=\"admin-module-popup\"\n              open={modelOpen}\n              onClose={handleModelClose}\n              aria-labelledby=\"form-dialog-title\"\n            >\n              <span\n                className=\"admin-font adminLib-cross\"\n                onClick={handleModelClose}\n              ></span>\n              <ProPopup />\n            </Dialog>\n            <Dialog\n              className=\"admin-module-popup\"\n              open={modelModuleOpen}\n              onClose={handleModulePopupClose}\n              aria-labelledby=\"form-dialog-title\"\n            >\n              <span\n                className=\"admin-font adminLib-cross\"\n                onClick={handleModulePopupClose}\n              ></span>\n                <ModulePopup \n                  name={String(modulePopupData.name)} \n                  settings={modulePopupData.settings} \n                  plugin={modulePopupData.plugin} \n                />\n            </Dialog>\n            {successMsg && (\n              <div className=\"admin-notice-display-title\">\n                <i className=\"admin-font adminLib-icon-yes\"></i>\n                {successMsg}\n              </div>\n            )}\n            <form\n              className=\"dynamic-form\"\n              onSubmit={(e) => {\n                handleSubmit(e);\n              }}\n            >\n              {renderForm()}\n            </form>\n          </div>\n        </>\n      );};\n\nexport default AdminForm;\n","import React, { createContext, useReducer, useContext, ReactNode } from \"react\";\n\n// Define the module state type\ntype ModuleState = string[];\n\n// Define action types\ntype ModuleAction =\n    | { type: \"INSERT_MODULE\"; payload: string }\n    | { type: \"DELETE_MODULE\"; payload: string };\n\n// Create the context with a default value\nconst ModuleContext = createContext<{\n    modules: ModuleState;\n    insertModule: (moduleName: string) => void;\n    removeModule: (moduleName: string) => void;\n} | null>(null);\n\n// Reducer function to manage modules state\nconst ModuleReducer = (state: ModuleState, action: ModuleAction): ModuleState => {\n    switch (action.type) {\n        case \"INSERT_MODULE\":\n            return [...state, action.payload];\n        case \"DELETE_MODULE\":\n            return state.filter((module) => module !== action.payload);\n        default:\n            return state;\n    }\n};\n\n// Define props for ModuleProvider\ninterface ModuleProviderProps {\n    children: ReactNode;\n    modules?: string[]; // Default module list\n}\n\n// Provider component\nexport const ModuleProvider: React.FC<ModuleProviderProps> = ({ children, modules = [] }) => {\n    const [state, dispatch] = useReducer(ModuleReducer, modules);\n\n    const insertModule = (moduleName: string) => {\n        dispatch({ type: \"INSERT_MODULE\", payload: moduleName });\n    };\n\n    const removeModule = (moduleName: string) => {\n        dispatch({ type: \"DELETE_MODULE\", payload: moduleName });\n    };\n\n    return (\n        <ModuleContext.Provider value={{ modules: state, insertModule, removeModule }}>\n            {children}\n        </ModuleContext.Provider>\n    );\n};\n\n// Custom hook to use the module context\nexport const useModules = () => {\n    const context = useContext(ModuleContext);\n    if (!context) {\n        throw new Error(\"useModules must be used within a ModuleProvider\");\n    }\n    return context;\n};\n","import React from \"react\";\nimport { Editor } from \"@tinymce/tinymce-react\";\n\ninterface WpEditorProps {\n    apiKey: string;\n    value: string;\n    onEditorChange: (content: string) => void;\n}\n\nconst WpEditor: React.FC<WpEditorProps> = ({ apiKey, value, onEditorChange }) => {\n    return (\n        <Editor\n            apiKey={apiKey}\n            value={value}\n            init={{\n                height: 200,\n                plugins: \"media\",\n            }}\n            onEditorChange={onEditorChange}\n        />\n    );\n};\n\nexport default WpEditor;\n","import React from \"react\";\n\ninterface LabelProps {\n    wrapperClass?: string;\n    value: string;\n    descClass?: string;\n    description?: string;\n}\n\nconst Label: React.FC<LabelProps> = ({ wrapperClass, value, descClass, description }) => {\n    return (\n        <div className={wrapperClass}>\n            <label>{value}</label>\n            {description && <p className={descClass}>{description}</p>}\n        </div>\n    );\n}\n\nexport default Label;\n","import React from \"react\";\n\ninterface SectionProps {\n    wrapperClass?: string;\n    value?: string;\n    hint?: string;\n}\n\nconst Section: React.FC<SectionProps> = ({ wrapperClass, value, hint }) => {\n    return (\n        <div className={wrapperClass}>\n            {value && <span>{value}</span>}\n            {hint && <p className=\"section-hint\" dangerouslySetInnerHTML={{ __html: hint }}></p>}\n        </div>\n    );\n}\n\nexport default Section;\n","import React from \"react\";\n\ninterface BlockTextProps {\n    wrapperClass?: string;\n    blockTextClass?: string;\n    value: string;\n}\n\nconst BlockText: React.FC<BlockTextProps> = ({ wrapperClass, blockTextClass, value }) => {\n    return (\n        <div className={wrapperClass}>\n            <p className={blockTextClass} dangerouslySetInnerHTML={{ __html: value }}></p>\n        </div>\n    );\n}\n\nexport default BlockText;\n","import React, { useState, useEffect, useRef } from 'react';\nimport './FreeProFormCustomizer.scss';\nimport '../RegistrationForm/RegistrationForm.scss';\nimport SubTabSection from '../SubTabSection/SubTabSection';\nimport ProForm from '../RegistrationForm/RegistrationForm';\nimport { __ } from \"@wordpress/i18n\";\n\n// Define types\ninterface FormField {\n    key: string;\n    label?: string;\n    active?: boolean;\n    desc?: string;\n}\n\ninterface MenuItem {\n    name: string;\n    link: string;\n    id: number;\n    icon: string;\n}\n\ninterface FormCustomizerProps {\n    setting: { freefromsetting?: FormField[] };\n    proSetting: any;\n    proSettingChange: () => boolean;\n    moduleEnabledChange: () => boolean;\n    onChange: (key: string, value: any) => void;\n}\n\n// FormCustomizer Component\nconst FreeProFormCustomizer: React.FC<FormCustomizerProps> = ({ setting, proSettingChange, moduleEnabledChange, onChange }) => {\n    const settingChange = useRef<boolean>(false);\n    \n    // Initialize state\n    const [formFieldsData, setFormFieldsData] = useState<FormField[]>(setting?.freefromsetting || []);\n\n    useEffect(() => {\n        if (settingChange.current) {\n            onChange('freefromsetting', formFieldsData);\n            settingChange.current = false;\n        }\n    }, [formFieldsData, onChange]);\n\n    const getFields = (fieldKey: string): FormField | undefined => {\n        return formFieldsData.find(({ key }) => key === fieldKey);\n    };\n\n    const activeDeactiveFields = (fieldKey: string, activeStatus: boolean) => {\n        if (moduleEnabledChange()) return;\n        settingChange.current = true;\n\n        setFormFieldsData((prevData) => {\n            const existingField = prevData.find(({ key }) => key === fieldKey);\n            if (existingField) {\n                return prevData.map((data) =>\n                    data.key === fieldKey ? { ...data, active: activeStatus } : data\n                );\n            } else {\n                return [...prevData, { key: fieldKey, label: '', active: activeStatus }];\n            }\n        });\n    };\n\n    const updateFieldLabel = (fieldKey: string, labelValue: string) => {\n        if (moduleEnabledChange()) return;\n        settingChange.current = true;\n\n        setFormFieldsData((prevData) => {\n            const existingField = prevData.find(({ key }) => key === fieldKey);\n            if (existingField) {\n                return prevData.map((data) =>\n                    data.key === fieldKey ? { ...data, label: labelValue } : data\n                );\n            } else {\n                return [...prevData, { key: fieldKey, label: labelValue, active: false }];\n            }\n        });\n    };\n\n    const formFields: FormField[] = [\n        { key: 'name', desc: 'Name' },\n        { key: 'email', desc: 'Email' },\n        { key: 'phone', desc: 'Phone' },\n        { key: 'address', desc: 'Address' },\n        { key: 'subject', desc: 'Enquiry about' },\n        { key: 'comment', desc: 'Enquiry details' },\n        { key: 'fileupload', desc: 'File upload' },\n        { key: 'filesize-limit', desc: 'File upload size limit (in MB)' },\n        { key: 'captcha', desc: 'Captcha' },\n    ];\n\n    const [menu, setMenu] = useState<MenuItem[]>([\n        { name: \"Free\", link: \"hi\", id: 2, icon: 'adminLib-info' },\n        { name: \"Pro\", link: \"hi\", id: 1, icon: 'adminLib-cart' },\n    ]);\n\n    const [currentTab, setCurrentTab] = useState<MenuItem>(menu[0]);\n\n    // Read-only field state\n    const [readonlyFields, setReadonlyFields] = useState<boolean[]>(\n        formFields.map((_, index) => formFieldsData[index]?.active === true ? false : true)\n    );\n\n    return (\n        <>\n            <SubTabSection menuitem={menu} currentTab={currentTab} setCurrentTab={setCurrentTab} />\n            {currentTab.id === 1 ? (\n                <ProForm\n                    name=\"formsettings\"\n                    proSettingChange={proSettingChange}\n                    onChange={(value) => onChange('formsettings', value)}\n                />\n            ) : (\n                <div>\n                    <div className=\"fields-header\">\n                        <h3 className=\"name\">{__('Field Name', 'catalogx')}</h3>\n                        <h3 className=\"set-name\">{__('Set new field name', 'catalogx')}</h3>\n                    </div>\n                    <div className=\"registrationFrom-main-wrapper-section\">\n                        <div className=\"form-field\">\n                            {formFields.map((fields, index) => (\n                                <div className=\"edit-form-wrapper free-form\" key={index}>\n                                    <div className=\"form-label\" style={{ opacity: readonlyFields[index] ? \"0.3\" : \"1\" }}>\n                                        {fields.desc}\n                                    </div>\n                                    <div className=\"settings-form-group-radio\">\n                                        <input\n                                            type=\"text\"\n                                            onChange={(e) => updateFieldLabel(fields.key, e.target.value)}\n                                            value={getFields(fields.key)?.label || ''}\n                                            readOnly={readonlyFields[index]}\n                                            style={{ opacity: readonlyFields[index] ? \"0.3\" : \"1\" }}\n                                        />\n                                    </div>\n                                    <div\n                                        className=\"button-visibility\"\n                                        onClick={() => {\n                                            setReadonlyFields((prev) =>\n                                                prev.map((readonly, i) => i === index ? !readonly : readonly)\n                                            );\n                                            activeDeactiveFields(fields.key, readonlyFields[index]);\n                                        }}\n                                    >\n                                        <i className={`admin-font ${readonlyFields[index] ? 'adminLib-eye-blocked enable-visibility' : 'adminLib-eye'}`} />\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default FreeProFormCustomizer;\n","import React, { MutableRefObject, useEffect, useRef, useState } from \"react\";\nimport { __ } from \"@wordpress/i18n\";\nimport Elements from \"./Templates/Elements\";\nimport { useSetting } from \"../../../context/SettingContext\";\nimport { ReactSortable } from \"react-sortablejs\";\nimport SettingMetaBox from \"./Templates/MetaBox\";\nimport SimpleInput from \"./Templates/SimpleInput\";\nimport MultipleOptions from \"./Templates/MultipleOption\";\nimport Textarea from \"./Templates/TextArea\";\nimport Attachment from \"./Templates/Attachment\";\nimport Recaptcha from \"./Templates/Recaptcha\";\nimport Datepicker from \"./Templates/DatePicker\";\nimport Timepicker from \"./Templates/TimePicker\";\nimport Section from \"./Templates/Section\";\nimport Divider from \"./Templates/Divider\";\nimport ButtonCustomizer from \"../ButtonCustomiser/ButtonCustomiser\";\n\n\nexport interface Option {\n    id: string;\n    label: string;\n    value: string;\n    isdefault?: boolean;\n}\n\nexport interface SelectOption{\n    icon: string;\n    value: string;\n    label: string;\n}\n\n// Props interface for AddNewBtn\ninterface AddNewBtnProps {\n    onAddNew?: () => void;\n    large?: boolean;\n}\n\n// Props interface for DeleteBtn\ninterface DeleteBtnProps {\n    onDelete?: () => void;\n    hideDelete?: boolean;\n}\n\n\n// Default values for input options\nexport const DEFAULT_OPTIONS: Option[] = [\n    { id: \"1\", label: 'Manufacture', value: 'manufacture' },\n    { id: \"2\", label: 'Trader', value: 'trader' },\n    { id: \"3\", label: 'Authorized Agent', value: 'authorized_agent' }\n];\n\n\n// Utility functions for default placeholders and labels\nexport const DEFAULT_PLACEHOLDER = (type: string): string => `${type}`;\nexport const DEFAULT_LABEL_SIMPLE = (type: string): string => `Enter your ${type}`;\nexport const DEFAULT_LABEL_SELECT = 'Nature of Business';\nexport const DEFAULT_FORM_TITLE = 'Demo Form';\n\n// Select options list\nexport const selectOptions: SelectOption[] = [\n    { icon: 'adminLib-t-letter-bold icon-form-textbox', value: 'text', label: 'Textbox' },\n    { icon: 'adminLib-unread icon-form-email', value: 'email', label: 'Email' },\n    { icon: 'adminLib-text icon-form-textarea', value: 'textarea', label: 'Textarea' },\n    { icon: 'adminLib-checkbox icon-form-checkboxes', value: 'checkboxes', label: 'Checkboxes' },\n    { icon: 'adminLib-multi-select icon-form-multi-select', value: 'multiselect', label: 'Multi Select' },\n    { icon: 'adminLib-radio icon-form-radio', value: 'radio', label: 'Radio' },\n    { icon: 'adminLib-dropdown-checklist icon-form-dropdown', value: 'dropdown', label: 'Dropdown' },\n    { icon: 'adminLib-captcha-automatic-code icon-form-recaptcha', value: 'recaptcha', label: 'reCaptcha v3' },\n    { icon: 'adminLib-submission-message icon-form-attachment', value: 'attachment', label: 'Attachment' },\n    { icon: 'adminLib-form-section icon-form-section', value: 'section', label: 'Section' },\n    { icon: 'adminLib-calendar icon-form-store-description', value: 'datepicker', label: 'Date Picker' },\n    { icon: 'adminLib-alarm icon-form-address01', value: 'timepicker', label: 'Time Picker' },\n    { icon: 'adminLib-divider icon-form-address01', value: 'divider', label: 'Divider' }\n];\n\n\n/**\n * Component that renders an action section for adding new items.\n */\nexport const AddNewBtn: React.FC<AddNewBtnProps> = ({ onAddNew, large }) => {\n    return (\n        <>\n            {large ? (\n                <div className=\"addnew\">\n                    <div onClick={() => onAddNew?.()}>\n                        <i className=\"admin-font adminLib-move\"></i>\n                    </div>\n                    <p>{__('Click to add next text field', 'catalogx')}</p>\n                </div>\n            ) : (\n                <div className=\"add-new-sections\" onClick={() => onAddNew?.()}>\n                    <div>\n                        <span>\n                            <i className=\"admin-font adminLib-move\"></i>\n                        </span>\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\n/**\n * Component that renders a delete button section.\n */\nexport const DeleteBtn: React.FC<DeleteBtnProps> = ({ onDelete, hideDelete }) => {\n    return (\n        <div\n            className={`delete ${hideDelete ? 'disable' : ''}`}\n            onClick={() => onDelete?.()}\n        >\n            <i className=\"admin-font adminLib-close\"></i>\n        </div>\n    );\n};\n\ninterface FormField {\n    id: number;\n    type: string;\n    label: string;\n    required: boolean;\n    name: string;\n    placeholder?: string;\n    options?: Option[];\n    sitekey?: string;\n}\ninterface ButtonSetting {\n\n}\ninterface CustomFormProps {\n    onChange: (data: { formfieldlist: FormField[]; butttonsetting: ButtonSetting }) => void;\n    name: string;\n    proSettingChange: () => boolean;\n    formTitlePlaceholder?: string;\n\n}\n// props value \n// 1. formTitlePlaceholder\n// 2. formTitleDescription\n// 3. formFieldTypes\n\nconst CustomFrom: React.FC<CustomFormProps> = (props) => {\n    const { onChange, name, proSettingChange } = props;\n    ////////////// Define state variable here /////////////////\n\n    const { setting } = useSetting();\n    const formSetting = setting[ name ] || {};\n    \n    const settingHasChanged = useRef(false);\n    const firstTimeRender = useRef(true);\n\n    // Contain list of selected form fields.\n    const [formFieldList, setFormFieldList] = useState<FormField[]>(() => {\n        // Form field list can't be empty it should contain atlest form title.\n        // This action prevent any backend action for empty form field list.\n\n        let inputList = formSetting[ 'formfieldlist' ] || [];\n\n        if (!Array.isArray(inputList) || inputList.length <= 0) {\n            return [{\n                id: 1,\n                type: 'title',\n                label: DEFAULT_FORM_TITLE,\n                required: true,\n            }];\n        }\n\n        return inputList;\n    });\n\n    const [buttonSetting, setButtonSetting] = useState( formSetting[ 'butttonsetting' ] || {} );\n\n    // State for hold id of opend input section.\n    const [opendInput, setOpendInput] = useState<any>(null);\n\n    \n    const [isInputBoxClick, SetIsInputBoxClick] = useState({click : false});\n\n    // State variable for a random maximum id\n    const [randMaxId, setRendMaxId] = useState<number>(0);\n\n    useEffect(() => {\n        const closePopup = (event: MouseEvent)  => {\n            if ((event.target as HTMLElement).closest('.meta-menu, .meta-setting-modal, .react-draggable')) {\n                return;\n            }\n\t\t\tSetIsInputBoxClick({click : false});\n            setOpendInput(null);\n        } \n\t\tdocument.body.addEventListener(\"click\", closePopup)\n        return () => {\n            document.body.removeEventListener(\"click\", closePopup )\n        }\n\t}, []);\n\n    // Prepare random maximum id\n    useEffect(() => {\n        setRendMaxId(\n            formFieldList.reduce((maxId, field) => Math.max(maxId, field.id), 0) + 1\n        );\n    }, [])\n\n    // Save button setting and formfieldlist setting\n    useEffect(() => {\n        if (settingHasChanged.current) {\n            settingHasChanged.current = false;\n            onChange({\n                'formfieldlist': formFieldList,\n                'butttonsetting': buttonSetting\n            })\n        }\n    }, [buttonSetting, formFieldList]);\n\n    ////////////// Define functionality here /////////////////\n\n    const getUniqueName = () => {\n        return Date.now().toString(36); // Convert timestamp to base 36\n    }\n    \n    /**\n     * Function generate a empty form field and return it.\n     * By default it set the type to simple text\n     */\n  \n    const getNewFormField = (type: string = 'text'): FormField => {\n        const newFormField: FormField = {\n            id: randMaxId ?? 0,  // Ensure randMaxId is a number (or fallback to 0)\n            type: type,\n            label: '',\n            required: false,\n            name: `${type}-${getUniqueName()}`\n        };\n    \n        if (['multiselect', 'radio', 'dropdown', 'checkboxes'].includes(type)) {\n            newFormField.label = DEFAULT_LABEL_SELECT;\n            newFormField.options = DEFAULT_OPTIONS;  \n        } else {\n            newFormField.label = DEFAULT_LABEL_SIMPLE(type);\n            newFormField.placeholder = DEFAULT_PLACEHOLDER(type); \n        }\n    \n        // update randMaxId by 1\n        setRendMaxId((prev) => (prev ?? 0) + 1);\n    \n        return newFormField;\n    };\n    \n    /**\n     * Function that append a new form field after a perticular index.\n     * If form field list is empty it append at begining of form field list.\n     */\n    const appendNewFormField = (index: number, type = 'text') => {\n        if (proSettingChange()) return;\n        const newField = getNewFormField(type);\n\n        // Create a new array with the new element inserted\n        const newFormFieldList = [\n            ...formFieldList.slice(0, index + 1),\n            newField,\n            ...formFieldList.slice(index + 1)\n        ];\n\n        // Update the state with the new array\n        settingHasChanged.current = true;\n        setFormFieldList(newFormFieldList);\n\n        return newField;\n    };\n\n    /**\n     * Function that delete a particular form field\n     * @param {*} index \n     */\n    const deleteParticularFormField = (index:number) => {\n        \n        if (proSettingChange()) return;\n\n        // Create a new array without the element at the specified index\n        const newFormFieldList = formFieldList.filter((_, i) => i !== index);\n\n        // Update the state with the new array\n        settingHasChanged.current = true;\n        setFormFieldList(newFormFieldList);\n    }\n\n    /**\n     * Function handle indivisual form field changes\n     */\n    const handleFormFieldChange = (index: number, key: string, value: any) => {\n        if (proSettingChange()) return;\n        // copy the form field before modify\n        const newFormFieldList = [...formFieldList]\n\n        // Update the new form field list\n        newFormFieldList[index] = {\n            ...newFormFieldList[index],\n            [key]: value\n        }\n\n        // Update the state variable\n        settingHasChanged.current = true;\n        setFormFieldList(newFormFieldList);\n\n\n    }\n\n    /**\n     * Function that handle type change for a particular form field\n     * @param {*} index \n     * @param {*} newType\n     */\n    const handleFormFieldTypeChange = (index: number, newType: string) => {\n        if (proSettingChange()) return;\n\n        // Get the input which one is selected\n        const selectedFormField = formFieldList[index];\n\n        // Check if selected type is previously selected type  \n        if (selectedFormField.type == newType) { return }\n\n        // Create a empty form field for that position\n        const newFormField = getNewFormField(newType);\n        newFormField.id = selectedFormField.id;\n\n        // Replace the newly created form field with old one\n        const newFormFieldList = [...formFieldList];\n        newFormFieldList[index] = newFormField;\n\n        settingHasChanged.current = true;\n        setFormFieldList(newFormFieldList);\n    }\n\n    return (\n        // Render Registration form here\n        <div className=\"registrationFrom-main-wrapper-section\" >\n            {/* Render element type section */}\n            <Elements\n                selectOptions={selectOptions}\n                onClick={(type) => {\n                    const newInput = appendNewFormField(formFieldList.length - 1, type);\n                    setOpendInput(newInput);\n                }}\n            />\n\n            <div className=\"registration-form-main-section\">\n                {/* Render form title here */}\n                {\n                    <div className=\"form-heading\">\n                        <input\n                            type=\"text\"\n                            placeholder={props.formTitlePlaceholder}\n                            value={formFieldList[0]?.label}\n                            onChange={(event) => { handleFormFieldChange(0, 'label', event.target.value) }}\n                        />\n                        <AddNewBtn\n                            onAddNew={() => {\n                                const newInput = appendNewFormField(0);\n                                setOpendInput(newInput);\n                            }}\n                        />\n                    </div>\n                }\n\n                {/* Render form fields here */}\n                {\n                    <ReactSortable\n                        list={formFieldList}\n                        setList={(newList) => {\n                            if (firstTimeRender.current) {\n                                firstTimeRender.current = false;\n                                return;\n                            }\n                            if (proSettingChange()) return;\n                            settingHasChanged.current = true;\n                            setFormFieldList(newList)\n                        }}\n                        handle=\".drag-handle\"\n                    >\n                        {\n                            formFieldList.length > 0 &&\n                            formFieldList.map((formField, index) => {\n\n                                if (index === 0) { return <div style={{ display: 'none' }}></div> }\n\n                                return (\n                                    <main className={`form-field ${opendInput?.id == formField.id ? 'active' : ''}`}>\n\n                                        {/* Render dragable button */}\n                                        {\n                                            opendInput?.id == formField.id &&\n                                            <div className=\"bth-move drag-handle\">\n                                                <i className=\"admin-font adminLib-move\"></i>\n                                            </div>\n                                        }\n\n                                        {/* Render setting section */}\n                                        {\n                                            opendInput?.id == formField.id &&\n                                            <section className=\"meta-menu\">\n                                                <div className=\"btn-delete\">\n                                                    <DeleteBtn\n                                                        onDelete={() => {\n                                                            deleteParticularFormField(index);\n                                                            setOpendInput(null);\n                                                        }}\n                                                    />\n                                                </div>\n                                                <SettingMetaBox\n                                                    formField={formField}\n                                                    opened={isInputBoxClick}\n                                                    onChange={(key, value) => handleFormFieldChange(index, key, value)}\n                                                    onTypeChange={(newType) => handleFormFieldTypeChange(index, newType)}\n                                                    inputTypeList={selectOptions}\n                                                />\n                                            </section>\n                                        }\n\n                                        {/* Render main content */}\n                                        <section\n                                            className={`${opendInput?.id != formField.id ? 'hidden-list' : ''} form-field-container-wrapper`}\n                                            onClick={(event) => {\n                                                event.stopPropagation()\n                                                SetIsInputBoxClick({\n                                                    click : true\n                                                })\n                                                if (opendInput?.id != formField.id) {\n                                                    setOpendInput(formField)\n                                                }\n                                            }}\n                                        >\n\n                                            {/* Render question name here */}\n                                            {\n                                                (\n                                                    formField.type == 'text' ||\n                                                    formField.type == 'email' ||\n                                                    formField.type == 'number'\n                                                ) &&\n                                                <SimpleInput\n                                                    formField={formField}\n                                                    onChange={(key, value) => handleFormFieldChange(index, key, value)}\n                                                />\n                                            }\n                                            {\n                                                (\n                                                    formField.type == 'checkboxes' ||\n                                                    formField.type == 'multiselect' ||\n                                                    formField.type == 'radio' ||\n                                                    formField.type == 'dropdown'\n                                                ) &&\n                                                <MultipleOptions\n                                                    formField={formField}\n                                                    type={formField.type}\n                                                    selected= {opendInput?.id === formField.id}\n                                                    onChange={(key, value) => handleFormFieldChange(index, key, value)}\n                                                />\n                                            }\n                                            {\n                                                formField.type == 'textarea' &&\n                                                <Textarea\n                                                    formField={formField}\n                                                    onChange={(key, value) => handleFormFieldChange(index, key, value)}\n                                                />\n                                            }\n                                            {\n                                                formField.type == 'attachment' &&\n                                                <Attachment\n                                                    formField={formField}\n                                                    onChange={(key, value) => handleFormFieldChange(index, key, value)}\n                                                />\n                                            }\n                                            {\n                                                formField.type == 'recaptcha' &&\n                                                <Recaptcha\n                                                    formField={formField}\n                                                    onChange={(key, value) => handleFormFieldChange(index, key, value)}\n                                                />\n                                            }\n                                            {\n                                                formField.type == 'datepicker' &&\n                                                <Datepicker\n                                                    formField={formField}\n                                                    onChange={(key, value) => handleFormFieldChange(index, key, value)}\n                                                />\n                                            }\n                                            {\n                                                formField.type == 'timepicker' &&\n                                                <Timepicker\n                                                    formField={formField}\n                                                    onChange={(key, value) => handleFormFieldChange(index, key, value)}\n                                                />\n                                            }\n                                            {\n                                                formField.type == 'section' &&\n                                                <Section\n                                                    formField={formField}\n                                                    onChange={(key, value) => handleFormFieldChange(index, key, value)}\n                                                />\n                                            }\n                                            {\n                                                formField.type == 'divider' &&\n                                                <Divider />\n                                            }\n                                        </section>\n\n                                        <AddNewBtn\n                                            onAddNew={() => {\n                                                const newInput = appendNewFormField(index);\n                                                setOpendInput(newInput);\n                                            }}\n                                        />\n                                    </main>\n                                )\n                            })\n                        }\n                    </ReactSortable>\n                }\n\n                <section className=\"settings-input-content\">\n                    <ButtonCustomizer\n                        text={buttonSetting.button_text && buttonSetting.button_text || 'Submit'}\n                        setting={buttonSetting}\n                        onChange={(key, value, isRestoreDefaults=false) => {\n                            if (proSettingChange()) return;\n                            settingHasChanged.current = true;\n                            const previousSetting = buttonSetting || {};\n                            if (isRestoreDefaults) {\n                                setButtonSetting(value);\n                            } else {\n                                setButtonSetting({ ...previousSetting, [key]: value });\n                            }\n                        }}\n                    />\n                </section>\n\n                <AddNewBtn\n                    onAddNew={() => {\n                        const newInput = appendNewFormField(formFieldList.length - 1);\n                        setOpendInput(newInput);\n                    }}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default CustomFrom;","import React from \"react\";\nimport { __ } from \"@wordpress/i18n\";\n\ninterface Option {\n    value: string;\n    label: string;\n    icon?: string;\n}\n\ninterface ElementsProps {\n    selectOptions: Option[];\n    onClick: (value: string) => void;\n}\n\nconst Elements: React.FC<ElementsProps> = ({ selectOptions, onClick }) => {\n    return (\n        <aside className=\"elements-section\">\n            <div className=\"section-meta\">\n                <h2>{__(\"Form fields\", \"catalogx\")}</h2>\n            </div>\n            <main className=\"section-container\">\n                {selectOptions.map((option) => (\n                    <article\n                        key={option.value} // ✅ Added key for React's rendering optimization\n                        className=\"elements-items\"\n                        onClick={() => onClick(option.value)}\n                    >\n                        {option.icon && <i className={option.icon}></i>}\n                        <p className=\"list-title\">{option.label}</p>\n                    </article>\n                ))}\n            </main>\n        </aside>\n    );\n};\n\nexport default Elements;\n","import React, { useState, useEffect } from \"react\";\nimport Draggable from \"react-draggable\";\ninterface FormField {\n    type: string;\n    name: string;\n    placeholder?: string;\n    charlimit?: number;\n    row?: number;\n    column?: number;\n    sitekey?: string;\n    filesize?: number;\n    required?: boolean;\n    disabled?: boolean;\n}\n\ninterface InputType {\n    value: string;\n    label: string;\n}\n\ninterface SettingMetaBoxProps {\n    formField: FormField;\n    inputTypeList: InputType[];\n    onChange: (field: keyof FormField, value: any) => void;\n    onTypeChange: (value: string) => void;\n    opened: { click: boolean };\n}\n\nconst FormFieldSelect: React.FC<{ inputTypeList: InputType[]; formField: FormField; onTypeChange: (value: string) => void }> = ({ inputTypeList, formField, onTypeChange }) => (\n    <FieldWrapper label=\"Type\">\n        <select onChange={(event) => onTypeChange(event.target.value)} value={formField.type}>\n            {inputTypeList.map((inputType) => (\n                <option key={inputType.value} value={inputType.value}>\n                    {inputType.label}\n                </option>\n            ))}\n        </select>\n    </FieldWrapper>\n);\n\nconst FieldWrapper: React.FC<{ label: string; className?: string; children: React.ReactNode }> = ({ label, children, className }) => (\n    <article className={`modal-content-section-field ${className || \"\"}`} onClick={(e) => e.stopPropagation()}>\n        <p>{label}</p>\n        {children}\n    </article>\n);\n\nconst InputField: React.FC<{ label: string; type?: string; value: any; onChange: (value: string) => void; className?: string }> = ({ label, type = \"text\", value, onChange, className }) => (\n    <FieldWrapper label={label} className={className}>\n        <input type={type} value={value || \"\"} onChange={(e) => onChange(e.target.value)} />\n    </FieldWrapper>\n);\n\nconst SettingMetaBox: React.FC<SettingMetaBoxProps> = ({ formField, inputTypeList, onChange, onTypeChange, opened }) => {\n    const [hasOpened, setHasOpened] = useState(opened.click);\n\n    const isValidSiteKey = (key: string) => /^6[0-9A-Za-z_-]{39}$/.test(key);\n    const [isSiteKeyEmpty, setIsSiteKeyEmpty] = useState(formField.type === \"recaptcha\" && !isValidSiteKey(formField.sitekey || \"\"));\n\n    useEffect(() => {\n        if (formField.type === \"recaptcha\") {\n            onChange(\"disabled\", isSiteKeyEmpty);\n        }\n    }, [isSiteKeyEmpty]);\n\n    useEffect(() => {\n        setHasOpened(opened.click);\n    }, [opened]);\n\n    const renderConditionalFields = () => {\n        switch (formField.type) {\n            case \"text\":\n            case \"email\":\n            case \"url\":\n            case \"textarea\":\n                return (\n                    <>\n                        <InputField label=\"Placeholder\" value={formField.placeholder || \"\"} onChange={(value) => onChange(\"placeholder\", value)} />\n                        <InputField label=\"Character Limit\" type=\"number\" value={formField.charlimit || \"\"} onChange={(value) => onChange(\"charlimit\", parseInt(value) || 0)} />\n                        {formField.type === \"textarea\" && (\n                            <>\n                                <InputField label=\"Row\" type=\"number\" value={formField.row || \"\"} onChange={(value) => onChange(\"row\", parseInt(value) || 0)} />\n                                <InputField label=\"Column\" type=\"number\" value={formField.column || \"\"} onChange={(value) => onChange(\"column\", parseInt(value) || 0)} />\n                            </>\n                        )}\n                    </>\n                );\n            case \"recaptcha\":\n                return (\n                    <>\n                        <InputField label=\"Site Key\" value={formField.sitekey || \"\"} className={isSiteKeyEmpty ? \"highlight\" : \"\"} onChange={(value) => {\n                            onChange(\"sitekey\", value);\n                            setIsSiteKeyEmpty(!isValidSiteKey(value));\n                        }} />\n                        <p>\n                            Register your site with your Google account to obtain the{\" \"}\n                            <a href=\"https://www.google.com/recaptcha\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                reCAPTCHA script\n                            </a>.\n                        </p>\n                    </>\n                );\n            case \"attachment\":\n                return <InputField label=\"Maximum File Size\" type=\"number\" value={formField.filesize || \"\"} onChange={(value) => onChange(\"filesize\", parseInt(value) || 0)} />;\n            default:\n                return null;\n        }\n    };\n\n    return (\n        <div onClick={() => setHasOpened((prevState) => !prevState)}>\n            <i className=\"admin-font adminLib-menu\"></i>\n            {hasOpened && (\n                <Draggable>\n                    <section className=\"meta-setting-modal\">\n                        <button className=\"meta-setting-modal-button\" onClick={(event) => {\n                            event.stopPropagation();\n                            setHasOpened(false);\n                        }}>\n                            <i className=\"admin-font adminLib-cross\"></i>\n                        </button>\n                        <main className=\"meta-setting-modal-content\">\n                            <h3>Input Field Settings</h3>\n                            <div className=\"setting-modal-content-section\">\n                                <FormFieldSelect inputTypeList={inputTypeList} formField={formField} onTypeChange={onTypeChange} />\n                                <InputField label=\"Name\" value={formField.name} onChange={(value) => onChange(\"name\", value)} />\n                                {renderConditionalFields()}\n                            </div>\n                            <div className=\"setting-modal-content-section\">\n                                <FieldWrapper label=\"Visibility\">\n                                    <div className=\"visibility-control-container\">\n                                        <div className=\"tabs\">\n                                            <input checked={formField.type === \"recaptcha\" ? !isSiteKeyEmpty : !formField.disabled} onChange={(e) => onChange(\"disabled\", !e.target.checked)} type=\"radio\" id=\"visible\" name=\"tabs\" />\n                                            <label className=\"tab\" htmlFor=\"visible\">Visible</label>\n\n                                            <input checked={formField.type === \"recaptcha\" ? isSiteKeyEmpty : formField.disabled} onChange={(e) => onChange(\"disabled\", e.target.checked)} type=\"radio\" id=\"hidden\" name=\"tabs\" />\n                                            <label className=\"tab\" htmlFor=\"hidden\">Hidden</label>\n\n                                            <span className=\"glider\" />\n                                        </div>\n                                    </div>\n                                </FieldWrapper>\n                                <FieldWrapper label=\"Required\">\n                                    <input type=\"checkbox\" checked={formField.required || false} onChange={(e) => onChange(\"required\", e.target.checked)} />\n                                </FieldWrapper>\n                            </div>\n                        </main>\n                    </section>\n                </Draggable>\n            )}\n        </div>\n    );\n};\n\nexport default SettingMetaBox;\n","import React from \"react\";\nimport HoverInputRender from \"../HoverInputRender\";\n\ninterface SimpleInputProps {\n    formField: { label: string; placeholder?: string };\n    onChange: (field: string, value: string) => void;\n}\n\nconst SimpleInput: React.FC<SimpleInputProps> = ({ formField, onChange }) => {\n    return (\n        <HoverInputRender\n            label={formField.label}\n            placeholder={formField.placeholder}\n            onLabelChange={(newLabel) => onChange(\"label\", newLabel)}\n            renderStaticContent={({ label, placeholder }) => (\n                <div className=\"edit-form-wrapper\">\n                    <p>{label}</p>\n                    <div className=\"settings-form-group-radio\">\n                        <input\n                            className=\"input-text-section simpleInput-text-input\"\n                            type=\"text\"\n                            placeholder={placeholder}\n                        />\n                    </div>\n                </div>\n            )}\n            renderEditableContent={({ label, onLabelChange, placeholder }) => (\n                <>\n                    <input\n                        className=\"input-label simpleInput-label\"\n                        type=\"text\"\n                        value={label}\n                        onChange={(event) => onLabelChange(event.target.value)}\n                    />\n                    <input\n                        className=\"input-text-section simpleInput-text-input\"\n                        type=\"text\"\n                        readOnly\n                        placeholder={placeholder}\n                    />\n                </>\n            )}\n        />\n    );\n};\n\nexport default SimpleInput;\n","import React,{ useState, useEffect, useRef } from \"react\";\n\ninterface HoverInputRenderProps {\n    label: string;\n    placeholder?: string;\n    onLabelChange: (newLabel: string) => void;\n    renderStaticContent: (props: { label: string; placeholder?: string }) => JSX.Element;\n    renderEditableContent: (props: { label: string; onLabelChange: (newLabel: string) => void; placeholder?: string }) => JSX.Element;\n}\n\nconst HoverInputRender: React.FC<HoverInputRenderProps> = ({\n    label,\n    placeholder,\n    onLabelChange,\n    renderStaticContent,\n    renderEditableContent,\n}) => {\n    const [showTextBox, setShowTextBox] = useState(false);\n    const [isClicked, setIsClicked] = useState(false);\n    const hoverTimeout = useRef<NodeJS.Timeout | null>(null);\n\n    useEffect(() => {\n        const closePopup = (event: MouseEvent) => {\n            if ((event.target as HTMLElement).closest(\".meta-setting-modal, .react-draggable\")) {\n                return;\n            }\n            setIsClicked(false);\n            setShowTextBox(false);\n        };\n        document.body.addEventListener(\"click\", closePopup);\n        return () => {\n            document.body.removeEventListener(\"click\", closePopup);\n        };\n    }, []);\n\n    const handleMouseEnter = () => {\n        hoverTimeout.current = setTimeout(() => setShowTextBox(true), 300);\n    };\n\n    const handleMouseLeave = () => {\n        if (hoverTimeout.current) clearTimeout(hoverTimeout.current);\n        if (!isClicked) setShowTextBox(false);\n    };\n\n    return (\n        <>\n            {!showTextBox && (\n                <div\n                    onMouseEnter={handleMouseEnter}\n                    onMouseLeave={handleMouseLeave}\n                    style={{ cursor: \"pointer\" }}\n                >\n                    {renderStaticContent({ label, placeholder })}\n                </div>\n            )}\n            {showTextBox && (\n                <div\n                    className=\"main-input-wrapper\"\n                    onClick={() => setIsClicked(true)}\n                    onMouseLeave={handleMouseLeave}\n                >\n                    {renderEditableContent({ label, onLabelChange, placeholder })}\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default HoverInputRender;\n","import React, { useState, useRef } from \"react\";\nimport { ReactSortable } from \"react-sortablejs\";\nimport HoverInputRender from \"../HoverInputRender\";\nimport OptionMetaBox from \"./OptionMetaBox\";\n\ninterface Option {\n    id: string;\n    label: string;\n    value: string;\n    isdefault?: boolean;\n}\ninterface FormField {\n    id: number;\n    type: string;\n    label: string;\n    required: boolean;\n    name: string;\n    placeholder?: string;\n    options?: Option[];\n}\ninterface MultipleOptionsProps {\n    formField: FormField;\n    onChange: (key: string, value: any) => void;\n    type: \"radio\" | \"checkboxes\" | \"dropdown\" | \"multiselect\";\n    selected: boolean;\n}\n\nconst MultipleOptions: React.FC<MultipleOptionsProps> = ({ formField, onChange, type }) => {\n    const settingHasChanged = useRef(false);\n    const firstTimeRender = useRef(true);\n    const [openOption, setOpenOption] = useState<number | null>(null);\n\n    const [options, setOptions] = useState<Option[]>(() => {\n        return Array.isArray(formField.options) && formField.options.length ? formField.options : [];\n    });\n\n    const renderInputFields = (type: string) => {\n        switch (type) {\n            case \"radio\":\n                return options.map((option, idx) => (\n                    <div className=\"radio-input-label-wrap\" key={idx}>\n                        <input type=\"radio\" id={`radio-${idx}`} value={option.value} />\n                        <label htmlFor={`radio-${idx}`}>{option.label}</label>\n                    </div>\n                ));\n            case \"checkboxes\":\n                return options.map((option, idx) => (\n                    <div className=\"radio-input-label-wrap\" key={idx}>\n                        <input type=\"checkbox\" id={`checkbox-${idx}`} value={option.value} />\n                        <label htmlFor={`checkbox-${idx}`}>{option.label}</label>\n                    </div>\n                ));\n            case \"dropdown\":\n            case \"multiselect\":\n                return (\n                    <section className=\"select-input-section merge-components\">\n                        <select>\n                            <option>Select...</option>\n                            {options.map((option, idx) => (\n                                <option key={idx} value={option.value}>\n                                    {option.label}\n                                </option>\n                            ))}\n                        </select>\n                    </section>\n                );\n            default:\n                return <p>Unsupported input type</p>;\n        }\n    };\n\n    const handleOptionFieldChange = (index: number, key: keyof Option, value: string | boolean) => {\n        const newOptions = [...options];\n        newOptions[index] = { ...newOptions[index], [key]: value };\n        setOptions(newOptions);\n        onChange(\"options\", newOptions);\n    };\n\n    const handleInsertOption = () => {\n        const newOptions = [\n            ...options,\n            { id: crypto.randomUUID(), label: \"Option value\", value: \"value\" }, // Generate a unique ID\n        ];\n        setOptions(newOptions);\n        onChange(\"options\", newOptions);\n    };\n\n    const handleDeleteOption = (index: number) => {\n        if (options.length <= 1) return;\n        const newOptions = options.filter((_, i) => i !== index);\n        setOptions(newOptions);\n        onChange(\"options\", newOptions);\n    };\n\n    return (\n        <HoverInputRender\n            label={formField.label}\n            onLabelChange={(newLabel) => onChange(\"label\", newLabel)}\n            renderStaticContent={({ label }) => (\n                <div className=\"edit-form-wrapper\">\n                    <p>{label}</p>\n                    <div className=\"settings-form-group-radio\">{renderInputFields(type)}</div>\n                </div>\n            )}\n            renderEditableContent={({ label, onLabelChange }) => (\n                <>\n                    <input\n                        className=\"input-label multipleOption-label\"\n                        type=\"text\"\n                        value={label}\n                        onChange={(event) => onLabelChange(event.target.value)}\n                    />\n\n                    <ReactSortable\n                        className=\"multiOption-wrapper\"\n                        list={options}\n                        setList={(newList: Option[]) => {\n                            if (firstTimeRender.current) {\n                                firstTimeRender.current = false;\n                                return;\n                            }\n                            setOptions(newList);\n                            onChange(\"options\", newList);\n                        }}\n                        handle=\".drag-handle-option\"\n                    >\n                        {options.map((option, index) => (\n                            <div className=\"option-list-wrapper drag-handle-option\" key={index}>\n                                <div className=\"option-label\">\n                                    <input\n                                        type=\"text\"\n                                        value={option.label}\n                                        onChange={(event) => {\n                                            settingHasChanged.current = true;\n                                            handleOptionFieldChange(index, \"label\", event.target.value);\n                                        }}\n                                        readOnly\n                                        onClick={(event) => {\n                                            setOpenOption(index);\n                                            event.stopPropagation();\n                                        }}\n                                    />\n                                </div>\n                                <div className=\"option-control-section\">\n                                    <div\n                                        onClick={() => {\n                                            settingHasChanged.current = true;\n                                            handleDeleteOption(index);\n                                        }}\n                                    >\n                                        Delete\n                                    </div>\n                                    <OptionMetaBox\n                                        hasOpen={openOption === index}\n                                        option={option}\n                                        onChange={(key, value) => {\n                                            settingHasChanged.current = true;\n                                            handleOptionFieldChange(index, key as keyof Option, value);\n                                        }}\n                                        setDefaultValue={() => {\n                                            let defaultValueIndex: number | null = null;\n                                            options.forEach((option, idx) => {\n                                                if (option.isdefault) defaultValueIndex = idx;\n                                            });\n                                            if (defaultValueIndex !== null) {\n                                                settingHasChanged.current = true;\n                                                handleOptionFieldChange(defaultValueIndex, \"isdefault\", false);\n                                            }\n                                            handleOptionFieldChange(index, \"isdefault\", true);\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        ))}\n\n                        <div className=\"add-more-option-section\" onClick={handleInsertOption}>\n                            Add new options <span><i className=\"admin-font adminLib-plus-circle-o\"></i></span>\n                        </div>\n                    </ReactSortable>\n                </>\n            )}\n        />\n    );\n};\n\nexport default MultipleOptions;\n","import React, { useState, useEffect } from \"react\";\nimport Draggable from \"react-draggable\";\n\ninterface Option {\n    label: string;\n    value: string;\n    isdefault?: boolean;\n}\n\ninterface OptionMetaBoxProps {\n    option: Option;\n    onChange: (key: keyof Option, value: string | boolean) => void;\n    setDefaultValue: () => void;\n    hasOpen: boolean;\n}\n\nconst OptionMetaBox: React.FC<OptionMetaBoxProps> = ({ option, onChange, setDefaultValue, hasOpen }) => {\n    const [hasOpened, setHasOpened] = useState<boolean>(hasOpen);\n\n    useEffect(() => {\n        setHasOpened(hasOpen);\n    }, [hasOpen]);\n\n    return (\n        <div\n            onClick={(event: React.MouseEvent<HTMLDivElement>) => {\n                setHasOpened(true);\n                event.stopPropagation();\n            }}\n        >\n            <i className=\"admin-font adminLib-menu\"></i>\n            {hasOpened && (\n                <Draggable>\n                    <section className=\"meta-setting-modal\">\n                        {/* Close button */}\n                        <button\n                            className=\"meta-setting-modal-button\"\n                            onClick={(event: React.MouseEvent<HTMLButtonElement>) => {\n                                event.stopPropagation();\n                                setHasOpened(false);\n                            }}\n                        >\n                            <i className=\"admin-font adminLib-cross\"></i>\n                        </button>\n\n                        {/* Modal Content */}\n                        <main className=\"meta-setting-modal-content\">\n                            <h3>Input Field Settings</h3>\n\n                            <div className=\"setting-modal-content-section\">\n                                {/* Input Value */}\n                                <article className=\"modal-content-section-field\">\n                                    <p>Value</p>\n                                    <input\n                                        type=\"text\"\n                                        value={option.value}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                            onChange(\"value\", e.target.value)\n                                        }\n                                    />\n                                </article>\n\n                                {/* Input Label */}\n                                <article className=\"modal-content-section-field\">\n                                    <p>Label</p>\n                                    <input\n                                        type=\"text\"\n                                        value={option.label}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                            onChange(\"label\", e.target.value)\n                                        }\n                                    />\n                                </article>\n                            </div>\n\n                            {/* Set Default Option */}\n                            <div className=\"setting-modal-content-section\">\n                                <article className=\"modal-content-section-field\">\n                                    <p>Set default</p>\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={option.isdefault || false}\n                                        onChange={() => setDefaultValue()}\n                                    />\n                                </article>\n                            </div>\n                        </main>\n                    </section>\n                </Draggable>\n            )}\n        </div>\n    );\n};\n\nexport default OptionMetaBox;\n","import React from \"react\";\nimport HoverInputRender from \"../HoverInputRender\";\n\ninterface TextareaProps {\n    formField: { label: string; placeholder?: string };\n    onChange: (field: string, value: string) => void;\n}\n\nconst Textarea: React.FC<TextareaProps> = ({ formField, onChange }) => {\n    return (\n        <HoverInputRender\n            label={formField.label}\n            placeholder={formField.placeholder}\n            onLabelChange={(newLabel) => onChange(\"label\", newLabel)}\n            renderStaticContent={({ label, placeholder }) => (\n                <div className=\"edit-form-wrapper\">\n                    <p>{label}</p>\n                    <div className=\"settings-form-group-radio\">\n                        <input\n                            className=\"input-text-section textArea-text-input\"\n                            type=\"text\"\n                            value={placeholder}\n                            readOnly\n                        />\n                    </div>\n                </div>\n            )}\n            renderEditableContent={({ label, onLabelChange, placeholder }) => (\n                <>\n                    <input\n                        className=\"input-label textArea-label\"\n                        type=\"text\"\n                        value={label}\n                        onChange={(event) => onLabelChange(event.target.value)}\n                    />\n                    {/* Render placeholder */}\n                    <input\n                        className=\"input-text-section textArea-text-input\"\n                        type=\"text\"\n                        placeholder={placeholder}\n                        readOnly\n                    />\n                </>\n            )}\n        />\n    );\n};\n\nexport default Textarea;\n","import { __ } from \"@wordpress/i18n\";\nimport React from \"react\";\n\ninterface FormField {\n    label: string;\n    placeholder?: string;\n}\n\ninterface AttachmentProps {\n    formField: FormField;\n    onChange: (field: string, value: string) => void;\n}\n\nconst Attachment: React.FC<AttachmentProps> = ({ formField, onChange }) => {\n    return (\n        <div className=\"main-input-wrapper\">\n            {/* Render label */}\n            <input\n                className=\"input-label textArea-label\"\n                type=\"text\"\n                value={formField.label}\n                placeholder={formField.placeholder}\n                onChange={(event) => onChange(\"label\", event.target.value)}\n            />\n\n            {/* Render attachments */}\n            <div className=\"attachment-section\">\n                <label htmlFor=\"dropzone-file\" className=\"attachment-label\">\n                    <div className=\"wrapper\">\n                        <i className=\"adminLib-cloud-upload\"></i>\n                        <p className=\"heading\">\n                            <span>{__(\"Click to upload\", \"catalogx\")}</span>{\" \"}\n                            {__(\"or drag and drop\", \"catalogx\")}\n                        </p>\n                    </div>\n                </label>\n            </div>\n        </div>\n    );\n};\n\nexport default Attachment;\n","import { __ } from \"@wordpress/i18n\";\nimport React from \"react\";\n\ninterface RecaptchaProps {\n    formField: { sitekey?: string };\n    onChange?: (field: string, value: any) => void;\n}\n\nconst Recaptcha: React.FC<RecaptchaProps> = ({ formField }) => {\n    return (\n        <div className={`main-input-wrapper ${!formField.sitekey ? \"recaptcha\" : \"\"}`}>\n            <p>{__(\"reCAPTCHA has been successfully added to the form.\", \"catalogx\")}</p>\n        </div>\n    );\n};\n\nexport default Recaptcha;\n","import React from \"react\";\nimport HoverInputRender from \"../HoverInputRender\";\ninterface FormField {\n    label: string; // The text label for the input field\n}\n\ninterface DatepickerProps {\n    formField: FormField; // The form field object\n    onChange: (field: keyof FormField, value: string) => void; // Function to handle label change\n}\n\nconst Datepicker: React.FC<DatepickerProps> = ({ formField, onChange }) => {\n    return (\n        <HoverInputRender\n            label={formField.label}\n            placeholder=\"Select date\"\n            onLabelChange={(newLabel) => onChange(\"label\", newLabel)}\n            renderStaticContent={({ label }) => (\n                <div className=\"edit-form-wrapper\">\n                    <p>{label}</p>\n                    <div className=\"settings-form-group-radio\">\n                        <input type=\"date\" readOnly />\n                    </div>\n                </div>\n            )}\n            renderEditableContent={({ label, onLabelChange, placeholder }) => (\n                <>\n                    {/* Editable label input */}\n                    <input\n                        className=\"input-label textArea-label\"\n                        type=\"text\"\n                        value={label}\n                        placeholder={placeholder}\n                        onChange={(event) => onLabelChange(event.target.value)}\n                    />\n\n                    <input type=\"date\" readOnly />\n                </>\n            )}\n        />\n    );\n};\n\nexport default Datepicker;\n","import React from \"react\";\nimport HoverInputRender from \"../HoverInputRender\";\n\ninterface TimepickerProps {\n    formField: { label: string };\n    onChange: (field: string, value: string) => void;\n}\n\nconst Timepicker: React.FC<TimepickerProps> = ({ formField, onChange }) => {\n    return (\n        <HoverInputRender\n            label={formField.label}\n            placeholder=\"Select time\"\n            onLabelChange={(newLabel) => onChange(\"label\", newLabel)}\n            renderStaticContent={({ label }) => (\n                <div className=\"edit-form-wrapper\">\n                    <p>{label}</p>\n                    <div className=\"settings-form-group-radio\">\n                        <input type=\"time\" readOnly />\n                    </div>\n                </div>\n            )}\n            renderEditableContent={({ label, onLabelChange }) => (\n                <>\n                    <input\n                        className=\"input-label textArea-label\"\n                        type=\"text\"\n                        value={label}\n                        onChange={(event) => onLabelChange(event.target.value)}\n                    />\n                    <input type=\"time\" readOnly />\n                </>\n            )}\n        />\n    );\n};\n\nexport default Timepicker;\n","import React from \"react\";\n\ninterface SectionProps {\n    formField: { label: string };\n    onChange: (field: string, value: string) => void;\n}\n\nconst Section: React.FC<SectionProps> = ({ formField, onChange }) => {\n    return (\n        <div className=\"main-input-wrapper\">\n            {/* Render label */}\n            <input\n                className=\"input-label textArea-label\"\n                type=\"text\"\n                value={formField.label}\n                placeholder=\"I am label\"\n                onChange={(event) => onChange(\"label\", event.target.value)}\n            />\n        </div>\n    );\n};\n\nexport default Section;\n","import React from \"react\";\nimport { __ } from \"@wordpress/i18n\";\n\nconst Divider: React.FC = () => {\n    return (\n        <div className=\"section-divider-container\">\n            {__(\"Section Divider\", \"catalogx\")}\n        </div>\n    );\n};\n\nexport default Divider;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./MergeComponent.scss\";\n\ninterface Field {\n    name: string;\n    type: \"select\" | \"number\" | \"text\"; // Include \"text\" in the type property\n    options?: { value: string; label: string }[]; // For select fields\n    placeholder?: string;\n  }\ninterface MergeComponentProps {\n  wrapperClass?: string;\n  descClass?: string;\n  description?: string;\n  onChange: (data: Record<string, string | number>) => void;\n  value: Record<string, string | number>;\n  proSetting?: boolean;\n  fields: Field[];\n}\n\nconst MergeComponent: React.FC<MergeComponentProps> = ({\n  wrapperClass = \"\",\n  descClass = \"\",\n  description,\n  onChange,\n  value,\n  proSetting = false,\n  fields = [],\n}) => {\n  const firstRender = useRef(true);\n\n  // Initialize state dynamically based on field names\n  const initialState = fields.reduce<Record<string, string | number>>((acc, field) => {\n    acc[field.name] = value[field.name] || \"\";\n    return acc;\n  }, {} as Record<string, string | number>);\n  \n\n  const [data, setData] = useState(initialState);\n\n  const handleOnChange = (key: string, value: string | number) => {\n    setData((prev) => ({ ...prev, [key]: value }));\n  };\n\n  useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false;\n      return; // Skip the initial render\n    }\n    onChange(data);\n  }, [data]);\n\n  return (\n    <main className={wrapperClass}>\n      <section className=\"select-input-section merge-components\">\n        {fields.map((field, index) => {\n          const { name, type, options = [], placeholder = \"Enter a value\" } = field;\n\n          if (type === \"select\") {\n            return (\n              <select key={name} id={name} value={data[name]} onChange={(e) => handleOnChange(name, e.target.value)}>\n                <option value=\"\">Select</option>\n                {options.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n            );\n          } else if (type === \"number\") {\n            return (\n              <input\n                key={name}\n                type={type}\n                id={name}\n                placeholder={placeholder}\n                value={data[name]}\n                min={1}\n                onChange={(e) => handleOnChange(name, Number(e.target.value))}\n              />\n            );\n          }\n\n          return null; // Return null for unsupported types\n        })}\n      </section>\n\n      {description && <p className={descClass} dangerouslySetInnerHTML={{ __html: description }} />}\n      {proSetting && <span className=\"admin-pro-tag\">pro</span>}\n    </main>\n  );\n};\n\nexport default MergeComponent;\n","import React, { useState, useEffect } from \"react\";\nimport \"./InputMailchimpList.scss\";\nimport { useSetting } from \"../../../context/SettingContext\";\nimport { getApiLink, getApiResponse } from \"../../../service/apiService\";\nimport { BasicInput } from \"../../Input\";\nimport SelectInput from \"../../Input/SelectInput/SelectInput\";\n\n// Define types for API response and component props\ninterface SelectOption {\n  value: string;\n  label: string;\n}\n\ninterface InputMailchimpListProps {\n  mailchimpKey: string;\n  optionKey: string;\n  settingChanged: React.MutableRefObject<boolean>;\n  apiLink: string;\n  proSettingChanged: () => boolean;\n  onChange: (event: { target: { value: string } }, key: string) => void;\n  selectKey: string;\n  value?: string;\n}\n\nconst InputMailchimpList: React.FC<InputMailchimpListProps> = (props) => {\n  const { mailchimpKey, optionKey, settingChanged } = props;\n\n  // State variables\n  const { setting, updateSetting } = useSetting();\n  const [selectOption, setSelectOption] = useState<SelectOption[]>(setting[optionKey] || []);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [showOption, setShowOption] = useState<boolean>(false);\n  const [mailchimpErrorMessage, setMailchimpErrorMessage] = useState<string>(\"\");\n\n  const updateSelectOption = async () => {\n    if (!setting[mailchimpKey]) {\n      setMailchimpErrorMessage(\"Kindly use a proper MailChimp key.\");\n    } else {\n      setLoading(true);\n      setMailchimpErrorMessage(\"\");\n\n      try {\n        const options: SelectOption[] = (await getApiResponse(getApiLink(props.apiLink))) ?? []; // ✅ Ensure it's always an array\n        settingChanged.current = true;\n        updateSetting(optionKey, options);\n        setSelectOption(options);\n        setShowOption(true);\n      } catch (error) {\n        console.error(\"Error fetching Mailchimp list:\", error);\n        setMailchimpErrorMessage(\"Failed to fetch MailChimp list.\");\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n\n  return (\n    <div className=\"connect-main-wrapper\">\n      <BasicInput\n        wrapperClass=\"setting-form-input\"\n        descClass=\"settings-metabox-description\"\n        type=\"text\"\n        value={setting[mailchimpKey]}\n        proSetting={false}\n        onChange={(e) => {\n          if (!props.proSettingChanged()) {\n            props.onChange(e, mailchimpKey);\n          }\n        }}\n      />\n\n      <div className=\"loader-wrapper\">\n        <button\n          className=\"btn-purple btn-effect\"\n          onClick={(e) => {\n            e.preventDefault();\n            if (!props.proSettingChanged()) {\n              updateSelectOption();\n            }\n          }}\n        >\n          Fetch List\n        </button>\n\n        {loading && (\n          <div className=\"loader\">\n            <div className=\"three-body__dot\"></div>\n            <div className=\"three-body__dot\"></div>\n            <div className=\"three-body__dot\"></div>\n          </div>\n        )}\n      </div>\n\n      {(selectOption.length > 0 || showOption) && (\n        <SelectInput\n          onChange={(e) => {\n            if (!props.proSettingChanged() && e && \"value\" in e) {\n              props.onChange({ target: { value: e.value } }, props.selectKey);\n            }\n          }}\n          options={selectOption}\n          value={props.value}\n        />\n\n      )}\n    </div>\n  );\n};\n\nexport default InputMailchimpList;\n","/* global appLocalizer */\nimport React from \"react\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport \"./popupContent.scss\";\n\nexport interface ProPopupProps {\n    proUrl?: string;\n}\n\nexport const ProPopup: React.FC<ProPopupProps> = ({ proUrl }) => {\n    // Handle cases where appLocalizer is unavailable\n    const safeProUrl = proUrl || (typeof window !== \"undefined\" && (window as any).appLocalizer?.pro_url) || \"#\";\n\n    return (\n        <DialogContent>\n            <DialogContentText>\n                <div className=\"admin-module-dialog-content\">\n                    <div className=\"admin-image-overlay\">\n                        <div className=\"admin-overlay-content\">\n                            <h1 className=\"banner-header\">\n                                Unlock <span className=\"banner-pro-tag\">Pro</span>\n                            </h1>\n                            <div className=\"admin-banner-content\">\n                                <strong>For pro popup</strong>\n                                <p>&nbsp;</p>\n                                <p>1. ......</p>\n                                <p>2. .....</p>\n                            </div>\n                            <a className=\"admin-go-pro-btn\" target=\"_blank\" rel=\"noopener noreferrer\" href={safeProUrl}>\n                                Upgrade to Pro\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            </DialogContentText>\n        </DialogContent>\n    );\n};\n\nexport default ProPopup;\n","/* global appLocalizer */\nimport React from \"react\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport { __, sprintf } from \"@wordpress/i18n\";\nimport \"./popupContent.scss\";\n\nexport interface ModulePopupProps {\n    name?: string;\n    settings?: string;\n    plugin?: string;\n}\n\nexport const ModulePopup: React.FC<ModulePopupProps> = ({ name, settings, plugin }) => {\n    // Handle cases where appLocalizer is unavailable\n    const modulePageUrl =\n        typeof window !== \"undefined\" && (window as any).appLocalizer?.module_page_url\n            ? (window as any).appLocalizer.module_page_url\n            : \"#\";\n\n    return (\n        <DialogContent>\n            <DialogContentText>\n                <div className=\"admin-module-dialog-content\">\n                    <div className=\"admin-image-overlay\">\n                        <div className=\"admin-overlay-content\">\n                            <div className=\"admin-banner-content\">\n                                {name && (\n                                    <>\n                                        <h2>\n                                            {sprintf(\n                                                __(\"To activate please enable the %s module first\", \"catalogx\"),\n                                                name\n                                            )}\n                                        </h2>\n                                        <a className=\"admin-go-pro-btn\" href={modulePageUrl}>\n                                            {__(\"Enable Now\", \"catalogx\")}\n                                        </a>\n                                    </>\n                                )}\n                            </div>\n\n                            {settings && (\n                                <>\n                                    <h2>{__(\"Activate Sitewide Buy Mode\", \"catalogx\")}</h2>\n                                    <p id=\"description\">\n                                        {__(\n                                            \"The \\\"Sitewide Buy Mode\\\" is required to unlock purchase functionality across the site. Make sure it's activated to proceed.\",\n                                            \"catalogx\"\n                                        )}\n                                    </p>\n                                </>\n                            )}\n\n                            {plugin === \"notifima\" && (\n                                <div>\n                                    <h2>{__('Download and install \"Notifima\"', \"catalogx\")}</h2>\n                                    <p id=\"description\">\n                                        {__(\n                                            '\"Notifima\" is a necessary product to enable notifications and other related settings. Download and install it to complete the setup.',\n                                            \"catalogx\"\n                                        )}\n                                    </p>\n                                    <a\n                                        className=\"admin-go-pro-btn\"\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://wordpress.org/plugins/woocommerce-product-stock-alert/\"\n                                    >\n                                        {__(\"Download now\", \"catalogx\")}\n                                    </a>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </DialogContentText>\n        </DialogContent>\n    );\n};\n\nexport default ModulePopup;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport DataTable from \"react-data-table-component\";\nimport \"./table.scss\";\n\nconst PENALTY = 28;\nconst COOLDOWN = 1;\n\ninterface TableCellProps {\n    value?: string;\n    title?: string;\n    children?: React.ReactNode;\n}\n\nexport const TableCell: React.FC<TableCellProps> = ({ value, title, children }) => {\n    return (\n        <div title={value} className=\"order-status table-row-custom\">\n            <h4 className=\"hide-title\">{title}</h4>\n            {children}\n        </div>\n    );\n};\n\nexport interface CustomTableProps {\n    data: any[] | null;\n    columns: any[];\n    selectable?: boolean;\n    handleSelect?: (selectedRows: any[], selectedCount: number, allSelected: boolean) => void;\n    handlePagination?: (rowsPerPage: number, currentPage: number, filterData: Record<string, any>) => void;\n    defaultRowsParPage?: number;\n    defaultCurrentPage?: number;\n    defaultTotalRows: number;\n    perPageOption: number[];\n    realtimeFilter?: { name: string; render: (handleFilterChange: (key: string, value: any) => void, value: any) => JSX.Element }[];\n    autoLoading?: boolean;\n    typeCounts?: { key: string; name: string; count: number }[];\n    bulkActionComp?: () => JSX.Element;\n    handleMouseEnter?: () => void;\n    handleMouseLeave?: () => void;\n}\n\nconst CustomTable: React.FC<CustomTableProps> = (props) => {\n    const {\n        data,\n        columns,\n        selectable,\n        handleSelect,\n        handlePagination,\n        defaultRowsParPage = 10,\n        defaultCurrentPage = 1,\n        defaultTotalRows,\n        perPageOption,\n        realtimeFilter,\n        autoLoading,\n        typeCounts,\n        bulkActionComp,\n    } = props;\n\n    const [loading, setLoading] = useState(false);\n    const [totalRows, setTotalRows] = useState(defaultTotalRows);\n    const [rowsPerPage, setRowsPerPage] = useState(defaultRowsParPage);\n    const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n    const [filterData, setFilterData] = useState<Record<string, any>>({});\n    const counter = useRef<number>(0);\n    const counterId = useRef<NodeJS.Timeout | null>(null);\n\n    const handlePageChange = (newCurrentPage: number) => {\n        setLoading(true);\n        handlePagination?.(rowsPerPage, newCurrentPage, filterData);\n        setCurrentPage(newCurrentPage);\n    };\n\n    const handleRowsPerPageChange = (newRowsPerPage: number) => {\n        setLoading(true);\n        handlePagination?.(newRowsPerPage, currentPage, filterData);\n        setCurrentPage(1);\n        setRowsPerPage(newRowsPerPage);\n    };\n\n    const handleOnSelectedRowsChange = ({ selectedRows, selectedCount, allSelected }: { selectedRows: any[]; selectedCount: number; allSelected: boolean }) => {\n        handleSelect?.(selectedRows, selectedCount, allSelected);\n    };\n\n    useEffect(() => {\n        setTotalRows(defaultTotalRows);\n        setLoading(data === null);\n    }, [data, defaultTotalRows]);\n\n    return (\n        <div className={`table-container ${loading ? \"table-loading\" : \"\"} ${selectable ? \"selectable-table\" : \"\"}`}>\n            {loading ? (\n                <div>Loading...</div>\n            ) : (\n                <DataTable\n                    pagination\n                    paginationServer\n                    selectableRows={selectable}\n                    columns={columns}\n                    data={data || []}\n                    paginationTotalRows={totalRows}\n                    paginationDefaultPage={currentPage}\n                    paginationPerPage={rowsPerPage}\n                    paginationRowsPerPageOptions={perPageOption}\n                    onChangePage={handlePageChange}\n                    onChangeRowsPerPage={handleRowsPerPageChange}\n                    onSelectedRowsChange={handleOnSelectedRowsChange}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default CustomTable;\n","import React,{ useState } from 'react';\n\nexport interface ButtonProp {\n    customStyle: {\n        button_border_size?: number;\n        button_border_color?: string;\n        button_background_color?: string;\n        button_text_color?: string;\n        button_border_radious?: number;\n        button_font_size?: number;\n        button_font_width?: number;\n        button_margin?: number;\n        button_padding?: number;\n        button_border_color_onhover?: string;\n        button_text_color_onhover?: string;\n        button_background_color_onhover?: string;\n        button_text?: string;\n    };\n    children?: React.ReactNode;\n    onClick?: () => void;\n};\n\nconst Button: React.FC<ButtonProp> = ({ customStyle, children, onClick }) => {\n    const style = {\n        border: `${customStyle.button_border_size ?? 1}px solid ${customStyle.button_border_color ?? '#000000'}`,\n        backgroundColor: customStyle.button_background_color ?? '#ffffff',\n        color: customStyle.button_text_color ?? '#000000',\n        borderRadius: `${customStyle.button_border_radious ?? 0}px`,\n        fontSize: `${customStyle.button_font_size ?? 20}px`,\n        fontWeight: `${customStyle.button_font_width ?? 1}rem`,\n        margin: `${customStyle.button_margin ?? 0}px`,\n        padding: `${customStyle.button_padding ?? 0}px`,\n    };\n\n    const hoverStyle = { \n        border: `1px solid ${customStyle.button_border_color_onhover ?? '#000000'}`,\n        color: customStyle.button_text_color_onhover ?? '#000000',\n        backgroundColor: customStyle.button_background_color_onhover ?? '#ffffff',\n    };\n\n    const [hovered, setHovered] = useState(false);\n\n    return (\n        <button\n            onMouseEnter={() => setHovered(true)}\n            onMouseLeave={() => setHovered(false)}\n            style={hovered ? hoverStyle : style}\n            onClick={onClick}\n        >\n            {customStyle.button_text || children}\n        </button>\n    );\n}\n\nexport default Button;\n","import React from \"react\";\n\nexport interface BlockTextProps{\n    wrapperClass : string,\n    blockTextClass : string,\n    value : string,\n}\n\nconst BlockText : React.FC<BlockTextProps> = ({\n    wrapperClass,\n    blockTextClass,\n    value\n})=>{\n    return (\n        <>\n            <div className={wrapperClass}>\n                <p className={blockTextClass} dangerouslySetInnerHTML={{__html: value}}>\n                </p>\n            </div>\n        </>\n    );\n}\n\nexport default BlockText;","import React from \"react\";\n\nexport interface LabelProps {\n    wrapperClass : string,\n    descClass : string,\n    description : string,\n    value : string\n}\n\nconst Label : React.FC<LabelProps> =({\n    wrapperClass,\n    descClass,\n    description,\n    value\n})=>{\n    return (\n        <>\n            <div className={wrapperClass}>\n                <label>{value}</label>\n                <p className={descClass}>\n                    {description}\n                </p>\n            </div>\n        </>\n    );\n}\n\nexport default Label;","import React from \"react\";\n\nexport interface SectionProps{\n    wrapperClass : string,\n    hint : string,\n    value : string,\n}\n\nconst Section : React.FC<SectionProps>=({\n    wrapperClass,\n    hint,\n    value\n})=>{\n    return (\n        <>\n            <div className={wrapperClass}>\n                {value && <span>{value}</span>}\n                {hint && <p className=\"section-hint\" dangerouslySetInnerHTML={{__html:hint}}></p>}\n            </div>\n        </>\n    );\n}\n\nexport default Section;","import { Editor } from \"@tinymce/tinymce-react\";\nimport React from \"react\";\n\nexport interface WpEditorProps {\n    apiKey: string;\n    value: string;\n    onEditorChange: (content: string) => void;\n}\n\nconst WpEditor: React.FC<WpEditorProps> = ({ apiKey, value, onEditorChange }) => {\n    return (\n        <>\n            <Editor\n                apiKey={apiKey}\n                value={value}\n                init={{\n                    height: 200,\n                    plugins: \"media\",\n                }}\n                onEditorChange={(content: string) => onEditorChange(content)}\n            />\n        </>\n    );\n};\n\nexport default WpEditor;\n","import { Link } from \"react-router-dom\";\nimport React,{ useState, FC, ReactNode } from \"react\";\n// import Brand from \"../../../assets/images/Brand.png\";\n// import BrandSmall from \"../../../assets/images/Brand-small.png\";\nimport \"./tabs.scss\";\nimport AdminFooter from \"../AdminFooter/AdminFooter\";\n\ninterface TabContent {\n  id: string;\n  name: string;\n  desc?: string;\n  icon?: string;\n  link?: string;\n  proDependent?: boolean;\n}\n\ninterface TabData {\n  type: \"file\" | \"folder\";\n  content: TabContent | TabData[];\n}\n\nexport interface TabsProps {\n  tabData: TabData[];\n  currentTab: string;\n  getForm: (tabId: string) => ReactNode;\n  prepareUrl: (tabId: string) => string;\n  HeaderSection?: FC;\n  BannerSection?: FC;\n  horizontally?: boolean;\n}\n\nconst Tabs: React.FC<TabsProps> = ({\n  tabData,\n  currentTab,\n  getForm,\n  prepareUrl,\n  HeaderSection,\n  BannerSection,\n  horizontally = false,\n}) => {\n  const [menuCol, setMenuCol] = useState<boolean>(false);\n  const [openedSubtab, setOpenedSubtab] = useState<string>(\"\");\n\n  const showTabSection = (tab: TabContent) => {\n    return tab.link ? (\n      <a href={tab.link}>\n        <div>{tab.icon && <i className={`admin-font ${tab.icon}`}></i>}</div>\n        <div>\n          <p className=\"menu-name\">{menuCol ? null : tab.name}</p>\n          <p className=\"menu-desc\">{menuCol ? null : tab.desc}</p>\n        </div>\n      </a>\n    ) : (\n      <Link\n        className={currentTab === tab.id ? \"active-current-tab\" : \"\"}\n        to={prepareUrl(tab.id)}\n      >\n        <div>\n          {tab.icon && <i className={`admin-font ${tab.icon}`}></i>}\n        </div>\n        <div>\n          <p className=\"menu-name\">{menuCol ? null : tab.name}</p>\n          <p className=\"menu-desc\">{menuCol ? null : tab.desc}</p>\n        </div>\n      </Link>\n    );\n  };\n\n  const showHideMenu = (tab: TabContent) => {\n    return (\n      <Link\n        className={currentTab === tab.id ? \"active-current-tab\" : \"\"}\n        to={\"\"}\n        onClick={(e) => {\n          e.preventDefault();\n          setOpenedSubtab(openedSubtab === tab.id ? \"\" : tab.id);\n        }}\n      >\n        <div>{tab.icon && <i className={`admin-font ${tab.icon}`}></i>}</div>\n        <div className=\"drop-down-section\">\n          <div>\n            <p className=\"menu-name\">{menuCol ? null : tab.name}</p>\n            <p className=\"menu-desc\">{menuCol ? null : tab.desc}</p>\n          </div>\n          {menuCol ? null : (\n            <p\n              className={`tab-menu-dropdown-icon ${\n                openedSubtab === tab.id ? \"active\" : \"\"\n              }`}\n            >\n              <i className=\"admin-font adminLib-keyboard-arrow-down\"></i>\n            </p>\n          )}\n        </div>\n      </Link>\n    );\n  };\n\n  const getTabDescription = (data: TabData[]): ReactNode => {\n    return data.map(({ content, type }) => {\n      if (type === \"file\" && (content as TabContent).id === currentTab) {\n        const fileContent = content as TabContent;\n        return (\n          <div className=\"tab-description-start\" key={fileContent.id}>\n            <div className=\"child\">\n              <p>\n                <i className={`admin-font ${fileContent.icon}`}></i>\n              </p>\n              <div>\n                <div className=\"tab-name\">{fileContent.name}</div>\n                <div className=\"tab-desc\">{fileContent.desc}</div>\n              </div>\n            </div>\n          </div>\n        );\n      } else if (type === \"folder\") {\n        return getTabDescription(content as TabData[]);\n      }\n      return null;\n    });\n  };\n\n  return (\n    <div className=\"general-wrapper\">\n      {HeaderSection && <HeaderSection />}\n      {BannerSection && <BannerSection />}\n\n      <div\n        className={`middle-container-wrapper ${\n          horizontally ? \"horizontal-tabs\" : \"vertical-tabs\"\n        }`}\n      >\n        <div className={`${menuCol ? \"showMenu\" : \"\"} middle-child-container`}>\n          <div id=\"current-tab-lists\" className=\"current-tab-lists\">\n            <div className=\"brand\">\n              <img\n                className=\"logo\"\n                // src={menuCol ? BrandSmall : Brand}\n                src={menuCol ? \"\" : \"\"}\n                alt=\"Logo\"\n              />\n              {/* <img className=\"logo-small\" src={BrandSmall} alt=\"Logo\" /> */}\n              <img className=\"logo-small\" src={\"\"} alt=\"Logo\" />\n            </div>\n            <div className=\"current-tab-lists-container\">\n              {tabData.map(({ type, content }, index) => {\n                if (type !== \"folder\") {\n                  return showTabSection(content as TabContent);\n                }\n\n                return (\n                  <div className=\"tab-wrapper\" key={index}>\n                    {showHideMenu((content as TabData[])[0].content as TabContent)}\n                    <div\n                      className={`subtab-wrapper ${menuCol ? \"show\" : \"\"} ${\n                        openedSubtab ===\n                        ((content as TabData[])[0].content as TabContent).id\n                          ? \"active\"\n                          : \"\"\n                      }`}\n                    >\n                      {(content as TabData[]).slice(1).map(({ content }) =>\n                        showTabSection(content as TabContent)\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n              <div\n                className=\"main-btn menu-coll-btn\"\n                onClick={() => setMenuCol(!menuCol)}\n              >\n                <span>\n                  <i className=\"admin-font adminLib-arrow-left\"></i>\n                </span>\n                {!menuCol && \"Collapse\"}\n              </div>\n            </div>\n          </div>\n          <div className=\"tab-content\">\n            {getTabDescription(tabData)}\n            {getForm(currentTab)}\n          </div>\n        </div>\n      </div>\n\n      <AdminFooter />\n    </div>\n  );\n};\n\nexport default Tabs;\n","import './AdminFooter.scss';\nimport React from 'react';\n\nexport interface SupportLink {\n    title: string;\n    icon: string;\n    description: string;\n    link: string;\n}\n\nconst AdminFooter: React.FC = () => {\n    const supportLink: SupportLink[] = [\n        {\n            title: \"Get in touch with Support\",\n            icon: \"mail\",\n            description: \"Reach out to the support team for assistance or guidance.\",\n            link: \"https://google.com/\",\n        },\n        {\n            title: \"Explore Documentation\",\n            icon: \"submission-message\",\n            description: \"Understand the plugin and its settings.\",\n            link: \"https://google.com/\",\n        },\n        {\n            title: \"Contribute Here\",\n            icon: \"support\",\n            description: \"To participation in product enhancement.\",\n            link: \"https://google.com/\",\n        },\n    ];\n\n    return (\n        <div className=\"support-card\">\n            {supportLink.map((item, index) => (\n                <a key={index} href={item.link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"card-item\">\n                    <i className={`admin-font adminLib-${item.icon}`}></i>\n                    <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {item.title}\n                    </a>\n                    <p>{item.description}</p>\n                </a>\n            ))}\n        </div>\n    );\n};\n\nexport default AdminFooter;\n","import React, { useState, useEffect } from 'react';\nimport Dialog from \"@mui/material/Dialog\";\nimport Popoup from '../../Advertisement/PopupContent/Propopup';\nimport './banner.scss';\n\ninterface AppLocalizer {\n    khali_dabba: boolean;\n    pro_url?: string; // Add other properties as needed\n}\n\nconst appLocalizer : AppLocalizer ={\n    khali_dabba : true\n}\n\nexport default function Banner(): JSX.Element {\n    // Ensure localStorage is initialized correctly\n    if (localStorage.getItem('banner') !== 'false') {\n        localStorage.setItem(\"banner\", \"true\");\n    }\n\n    const [modal, setModal] = useState<boolean>(false);\n    const [banner, setBanner] = useState<boolean>(localStorage.getItem('banner') === 'true');\n\n    const handleCloseBanner = (): void => {\n        localStorage.setItem('banner', 'false');\n        setBanner(false);\n    };\n\n    const handleClose = (): void => {\n        setModal(false);\n    };\n\n    const handleOpen = (): void => {\n        setModal(true);\n    };\n\n    useEffect(() => {\n        if (!banner) return;\n\n        const carouselItems: NodeListOf<Element> = document.querySelectorAll('.carousel-item');\n        const totalItems: number = carouselItems.length;\n        if (!totalItems) return;\n\n        let currentIndex: number = 0;\n        let interval: NodeJS.Timeout;\n\n        const showSlide = (index: number): void => {\n            carouselItems.forEach(item => item.classList.remove('active'));\n            carouselItems[index].classList.add('active');\n        };\n\n        const nextSlide = (): void => {\n            currentIndex = (currentIndex + 1) % totalItems;\n            showSlide(currentIndex);\n        };\n\n        const prevSlide = (): void => {\n            currentIndex = (currentIndex - 1 + totalItems) % totalItems;\n            showSlide(currentIndex);\n        };\n\n        const startAutoSlide = (): void => {\n            interval = setInterval(nextSlide, 7000); // Change slide every 7 seconds\n        };\n\n        const stopAutoSlide = (): void => {\n            clearInterval(interval);\n        };\n\n        showSlide(currentIndex);\n        startAutoSlide();\n\n        // Event Listeners for Next and Previous Buttons\n        const nextBtn = document.getElementById('nextBtn');\n        const prevBtn = document.getElementById('prevBtn');\n\n        if (nextBtn && prevBtn) {\n            nextBtn.addEventListener('click', () => {\n                nextSlide();\n                stopAutoSlide();\n                startAutoSlide();\n            });\n\n            prevBtn.addEventListener('click', () => {\n                prevSlide();\n                stopAutoSlide();\n                startAutoSlide();\n            });\n        }\n\n        return () => {\n            stopAutoSlide();\n            if (nextBtn) nextBtn.removeEventListener('click', nextSlide);\n            if (prevBtn) prevBtn.removeEventListener('click', prevSlide);\n        };\n    }, [banner]);\n\n    return (\n        <>\n            {!appLocalizer.khali_dabba ? (\n                banner ? (\n                    <div className=\"custom-banner\">\n                        <Dialog\n                            className=\"admin-module-popup\"\n                            open={modal}\n                            onClose={handleClose}\n                            aria-labelledby=\"form-dialog-title\"\n                        >\t\n                            <span \n                                className=\"admin-font adminLib-cross stock-manager-popup-cross\"\n                                onClick={handleClose}\n                            ></span>\n                            <Popoup />\n                        </Dialog>\n                        <div className=\"admin-carousel-container\">\n                            <div className=\"carousel-container\">\n                                <div className=\"admin-font adminLib-cross pro-slider-cross\" onClick={handleCloseBanner}></div>\n                                <div className=\"why-go-pro-tag\" onClick={handleOpen}>Why Premium</div>\n                                <ul className=\"carousel-list\">\n                                    <li className=\"carousel-item active\">\n                                        <div className=\"admin-pro-txt-items\">\n                                            <h3>This is a sample banner</h3>\n                                            <p>Sample banner description</p>\n                                            <a\n                                                href=\"#\"\n                                                target='_blank'\n                                                className=\"admin-btn btn-red\"\n                                            >\n                                                View Pricing\n                                            </a>\n                                        </div>\n                                    </li>\n                                    <li className=\"carousel-item\">\n                                        <div className=\"admin-pro-txt-items\">\n                                            <h3>This is an example banner</h3>\n                                            <p>Example banner description</p>\n                                            <a\n                                                href=\"#\"\n                                                target='_blank'\n                                                className=\"admin-btn btn-red\"\n                                            >\n                                                View Pricing\n                                            </a>\n                                        </div>\n                                    </li>\n                                </ul>\n                            </div>\n                            <div className=\"carousel-controls\">\n                                <button id=\"prevBtn\"><i className='admin-font adminLib-arrow-left'></i></button>\n                                <button id=\"nextBtn\"><i className='admin-font adminLib-arrow-right'></i></button>\n                            </div>\n                        </div>\n                    </div>\n                ) : null\n            ) : null}\n        </>\n    );\n}\n","import React,{ useState } from \"react\";\nimport Dialog from \"@mui/material/Dialog\";\nimport Popoup from \"../PopupContent/Propopup\";\n\nimport { getApiLink, sendApiResponse } from \"../../../service/apiService\";\nimport { useModules } from \"../../../context/ModuleContext\";\nimport { getModuleData } from \"../../../service/templateService\";\nimport \"./modules.scss\";\n\ninterface Module {\n  id: string;\n  name: string;\n  desc: string;\n  icon: string;\n  doc_link: string;\n  settings_link: string;\n  pro_module?: boolean;\n}\n\ninterface AppLocalizer {\n  khali_dabba?: boolean;\n}\n\ndeclare const appLocalizer: AppLocalizer;\n\nconst Modules = async () => {\n  const { modules, insertModule, removeModule } = useModules();\n  const modulesArray: Module[] = await getModuleData();\n  const [modelOpen, setModelOpen] = useState<boolean>(false);\n  const [successMsg, setSuccessMsg] = useState<string>(\"\");\n\n  const isModuleAvailable = (moduleId: string): boolean => {\n    const module = modulesArray.find((module) => module.id === moduleId);\n    if (!module?.pro_module) return true;\n    return module.pro_module && appLocalizer.khali_dabba ? true : false;\n  };\n\n  const handleOnChange = async (\n    event: React.ChangeEvent<HTMLInputElement>,\n    moduleId: string\n  ) => {\n    if (!isModuleAvailable(moduleId)) {\n      setModelOpen(true);\n      return;\n    }\n\n    const action = event.target.checked ? \"activate\" : \"deactivate\";\n    action === \"activate\" ? insertModule(moduleId) : removeModule(moduleId);\n\n    await sendApiResponse(getApiLink(\"modules\"), { id: moduleId, action });\n    setSuccessMsg(\"Module activated\");\n    setTimeout(() => setSuccessMsg(\"\"), 2000);\n  };\n\n  return (\n    <div className=\"module-container\">\n      <Dialog\n        className=\"admin-module-popup\"\n        open={modelOpen}\n        onClose={() => setModelOpen(false)}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <span\n          className=\"admin-font adminLib-cross\"\n          onClick={() => setModelOpen(false)}\n        ></span>\n        <Popoup />\n      </Dialog>\n\n      {successMsg && (\n        <div className=\"admin-notice-display-title\">\n          <i className=\"admin-font adminLib-icon-yes\"></i>\n          {successMsg}\n        </div>\n      )}\n\n      <div className=\"tab-name\">\n        <h1>Modules</h1>\n      </div>\n      <div className=\"module-option-row\">\n        {modulesArray.map((module) => (\n          <div className=\"module-list-item\" key={module.id}>\n            {module.pro_module && !appLocalizer.khali_dabba && (\n              <span className=\"admin-pro-tag\">Pro</span>\n            )}\n            <div className=\"module-icon\">\n              <i className={`font ${module.icon}`}></i>\n            </div>\n\n            <div className=\"card-meta\">\n              <div className=\"meta-name\">{module.name}</div>\n              <p className=\"meta-description\" dangerouslySetInnerHTML={{ __html: module.desc }}></p>\n            </div>\n            <div className=\"card-footer\">\n              <div className=\"card-support\">\n                <a href={module.doc_link} className=\"main-btn btn-purple card-support-btn\">Docs</a>\n                <a href={module.settings_link} className=\"main-btn btn-purple card-support-btn\">Setting</a>\n              </div>\n              <div className=\"toggle-checkbox-content\" data-showcase-tour={`${module.id}-showcase-tour`}>\n                <input\n                  type=\"checkbox\"\n                  className=\"woo-toggle-checkbox\"\n                  id={`toggle-switch-${module.id}`}\n                  onChange={(e) => handleOnChange(e, module.id)}\n                />\n                <label htmlFor={`toggle-switch-${module.id}`} className=\"toggle-switch-is_hide_cart_checkout\"></label>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Modules;\n","import React, { useState } from \"react\";\nimport \"./support.scss\";\n\ninterface FAQ {\n  question: string;\n  answer: string;\n  open: boolean;\n}\n\nconst Support: React.FC = () => {\n  const url = \"https://www.youtube.com/embed/cgfeZH5z2dM?si=3zjG13RDOSiX2m1b\";\n\n  const [faqs, setFaqs] = useState<FAQ[]>([\n    {\n      question:\n        \"Why am I not receiving any emails when a customer subscribes for an out-of-stock product?\",\n      answer:\n        \"Please install a plugin like Email Log and perform a test subscription.\",\n      open: true,\n    },\n    {\n      question: \"Why is the out-of-stock form not appearing?\",\n      answer:\n        \"There might be a theme conflict issue. To troubleshoot, switch to a default theme like Twenty Twenty-Four and check if the form appears.\",\n      open: false,\n    },\n  ]);\n\n  const toggleFAQ = (index: number) => {\n    setFaqs((prevFaqs) =>\n      prevFaqs.map((faq, i) => ({\n        ...faq,\n        open: i === index ? !faq.open : false,\n      }))\n    );\n  };\n\n  return (\n    <div className=\"dynamic-fields-wrapper\">\n      <div className=\"support-container\">\n        <div className=\"support-header-wrapper\">\n          <h1 className=\"support-heading\">Thank you for [plugin name]</h1>\n          <p className=\"support-subheading\">plugin support subheading</p>\n        </div>\n        <div className=\"video-faq-wrapper\">\n          <div className=\"video-section\">\n            <iframe\n              src={url}\n              title=\"YouTube video player\"\n              frameBorder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n              referrerPolicy=\"strict-origin-when-cross-origin\"\n              allowFullScreen\n            />\n          </div>\n          <div className=\"faq-section\">\n            <div className=\"faqs\">\n              {faqs.map((faq, index) => (\n                <div\n                  className={\"faq \" + (faq.open ? \"open\" : \"\")}\n                  key={index}\n                  onClick={() => toggleFAQ(index)}\n                >\n                  <div className=\"faq-question\">{faq.question}</div>\n                  <div\n                    className=\"faq-answer\"\n                    dangerouslySetInnerHTML={{ __html: faq.answer }}\n                  ></div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Support;\n","import React,{ useState, useEffect } from 'react';\nimport Select, { MultiValue, SingleValue, ActionMeta } from 'react-select';\nimport Button from '../DisplayButton/DisplayButton';\nimport './FromViewer.scss';\nimport { __ } from '@wordpress/i18n';\n\ndeclare global {\n    interface Window {\n        grecaptcha?: {\n            ready: (callback: () => void) => void;\n            execute: (siteKey: string, options: { action: string }) => Promise<string>;\n        };\n    }\n}\n\ninterface Option {\n    value: string;\n    label: string;\n    isdefault?: boolean;\n}\n\ninterface Field {\n    type: string;\n    name?: string;\n    label?: string;\n    placeholder?: string;\n    required?: boolean;\n    charlimit?: number;\n    row?: number;\n    col?: number;\n    disabled?: boolean;\n    options?: Option[];\n    sitekey?: string;\n    key?: string;\n}\n\ninterface FormFields {\n    formfieldlist: Field[];\n    butttonsetting?: any;\n}\n\nexport interface FromViewerProps {\n    formFields: FormFields;\n    onSubmit: (data: FormData) => void;\n}\n\nconst Checkboxes: React.FC<{ options: Option[]; onChange: (data: string[]) => void; }> = ({ options, onChange }) => {\n    const [checkedItems, setCheckedItems] = useState<Option[]>(options.filter(({ isdefault }) => isdefault));\n\n    useEffect(() => {\n        onChange(checkedItems.map(item => item.value));\n    }, [checkedItems]);\n\n    const handleChange = (option: Option, checked: boolean) => {\n        const newCheckedItems = checkedItems.filter(item => item.value !== option.value);\n        if (checked) newCheckedItems.push(option);\n        setCheckedItems(newCheckedItems);\n    };\n\n    return (\n        <div className='multiselect-container items-wrapper'>\n            {options.map(option => (\n                <div key={option.value} className='select-items'>\n                    <input\n                        type=\"checkbox\"\n                        id={option.value}\n                        checked={!!checkedItems.find(item => item.value === option.value)}\n                        onChange={e => handleChange(option, e.target.checked)}\n                    />\n                    <label htmlFor={option.value}>{option.label}</label>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nconst Multiselect: React.FC<{ options: Option[]; onChange: (value: string[] | string | null) => void; isMulti?: boolean }> = ({ options = [], onChange, isMulti = false }) => {\n    const [selectedOptions, setSelectedOptions] = useState<MultiValue<Option> | SingleValue<Option>>(isMulti ? options.filter(({ isdefault }) => isdefault) : options.find(({ isdefault }) => isdefault) || null);\n\n    const handleChange = (newValue: MultiValue<Option> | SingleValue<Option>, actionMeta: ActionMeta<Option>) => {\n        setSelectedOptions(newValue);\n        if (isMulti) {\n            onChange(Array.isArray(newValue) ? newValue.map(option => option.value) : []);\n        } else {\n            onChange(newValue ? (newValue as Option).value : null);\n        }\n    };\n\n    return <Select isMulti={isMulti} value={selectedOptions} onChange={handleChange} options={options} />;\n};\n\nconst FromViewer: React.FC<FromViewerProps> = ({ formFields, onSubmit }) => {\n    const [inputs, setInputs] = useState<Record<string, any>>({});\n    const formList = formFields.formfieldlist || [];\n    const buttonSetting = formFields.butttonsetting || {};\n    const [captchaToken, setCaptchaToken] = useState<string | null>(null);\n    const [captchaError, setCaptchaError] = useState<boolean>(false);\n    const recaptchaField = formList.find(field => field.type === 'recaptcha');\n    const siteKey = recaptchaField?.sitekey || null;\n\n    useEffect(() => {\n        if (!siteKey) return;\n\n        const loadRecaptcha = () => {\n            window.grecaptcha?.ready(() => {\n                window.grecaptcha?.execute(siteKey, { action: \"form_submission\" })\n                    .then(token => setCaptchaToken(token))\n                    .catch(() => setCaptchaError(true));\n            });\n        };\n\n        if (!window.grecaptcha) {\n            const script = document.createElement(\"script\");\n            script.src = `https://www.google.com/recaptcha/api.js?render=${siteKey}`;\n            script.async = true;\n            script.onload = loadRecaptcha;\n            script.onerror = () => setCaptchaError(true);\n            document.body.appendChild(script);\n        } else {\n            loadRecaptcha();\n        }\n    }, [siteKey]);\n\n    const handleChange = (name: string, value: any) => {\n        setInputs(prevData => ({ ...prevData, [name]: value }));\n    };\n\n    const handleSubmit = () => {\n        // e.preventDefault();\n        const data = new FormData();\n        Object.keys(inputs).forEach(key => data.append(key, inputs[key]));\n        onSubmit(data);\n    };\n\n    return (\n        <main className='catalogx-enquiry-pro-form'>\n            {formList.map(field => {\n                if (field.disabled) return null;\n                switch (field.type) {\n                    case 'text':\n                        return (\n                            <section className='form-text form-pro-sections' key={field.name}>\n                                <label>{field.label}</label>\n                                <input type=\"text\" name={field.name} placeholder={field.placeholder} onChange={e => handleChange(field.name!, e.target.value)} />\n                            </section>\n                        );\n                    case 'checkboxes':\n                        return (\n                            <section className='form-pro-sections' key={field.name}>\n                                <label>{field.label}</label>\n                                <Checkboxes options={field.options || []} onChange={data => handleChange(field.name!, data)} />\n                            </section>\n                        );\n                    default:\n                        return null;\n                }\n            })}\n            <section className='popup-footer-section'>\n                <Button customStyle={buttonSetting} onClick={() => handleSubmit()}>Submit</Button>\n            </section>\n        </main>\n    );\n};\n\nexport default FromViewer;\n","import axios from \"axios\";\nimport { CSVLink } from \"react-csv\";\nimport { __ } from \"@wordpress/i18n\";\nimport Dialog from \"@mui/material/Dialog\";\nimport { Dispatch, SetStateAction } from \"react\";\nimport React, { useState, useEffect, useMemo, useRef } from \"react\";\nimport Popoup from \"../PopupContent/Propopup\";\nimport CustomTable, {\n  TableCell,\n} from \"../CustomTable/CustomTable\";\nimport \"./TableComponent.scss\";\n\nimport { DateRangePicker } from 'react-date-range';\nimport 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n\n// Define types for data states\ninterface AppLocalizer {\n    apiurl : string,\n    khali_dabba:boolean,\n    nonce : string,\n    export_button:string,\n}\n\nconst appLocalizer:AppLocalizer={\n    apiurl : \"#\",\n    khali_dabba:true,\n    nonce:\"nonce\",\n    export_button:\"#\"\n}\n// interface Subscriber {\n//     id: number;\n//     name: string;\n//     email: string;\n//     status: string;\n//     [key: string]: any; // Allows additional properties\n//   }\ninterface Subscriber {\n    key: string;\n    name: string;\n    count: number;\n}\n\ninterface data {\n    date : string,\n    product : string,\n    email : string,\n    status : SubscribersStatus,\n}\n\n  \n  // API URLs\n  const fetchSubscribersDataUrl = `${appLocalizer.apiurl}/pluginelements/v1/get-subscriber-list`;\n  const fetchSubscribersCount = `${appLocalizer.apiurl}/pluginelements/v1/get-table-segment`;\n  \n  interface SelectedRange {\n    startDate: Date;\n    endDate: Date;\n    key: string;\n  }\n\n  interface Filters {\n    searchField?: string;\n    searchAction?: string;\n    date?: {\n      start_date?: string;\n      end_date?: string;\n    };\n  }\n\n  \n  interface SubscribersStatus {\n      key: string;\n      name: string;\n      count: number;\n    }\n\n    interface FilterProps {\n        updateFilter: (name: string, value: any) => void;\n        value: any;\n      }\n\n      interface TableRow {\n        image: string;\n        product: string;\n        email: string;\n        user_link?: string;\n        date: string;\n        status: string;\n        status_key: \"mailsent\" | \"subscribed\" | \"unsubscribed\";\n      }\n      \n      // Define the type for table columns\n      interface TableColumn {\n        name: string;\n        cell: (row: TableRow) => JSX.Element;\n      }\n      \n      \n      // Define the state setter type\n      type SetFiltersType = Dispatch<SetStateAction<Record<string, any>>>;\n    \n      const csvLink = useRef<CSVLink & HTMLAnchorElement & { link: HTMLAnchorElement }>(null);\n  const dateRef = useRef<HTMLDivElement | null>(null);\n\nconst TableComponent : React.FC = ()=>{\n    const [postStatus, setPostStatus] = useState<string>(\"\");\n    const [data, setData] = useState<any[] | null>(null);\n    const [allData, setAllData] = useState<data[]>([]);\n    const [selectedRows, setSelectedRows] = useState<Subscriber[]>([]);\n    const [totalRows, setTotalRows] = useState<number>(0);\n    const [openDialog, setOpenDialog] = useState<boolean>(false);\n    const [subscribersStatus, setSubscribersStatus] = useState<SubscribersStatus[]>([{key:\"\",name:\"\",count:0}]);\n    const [openDatePicker, setOpenDatePicker] = useState<boolean>(false);\n    const [openModal, setOpenModal] = useState<boolean>(false);\n    const [modalDetails, setModalDetails] = useState<boolean>(false);\n    const [filters, setFilters] = useState<Filters>({});\n\n    const handleDateOpen = () => {\n        setOpenDatePicker(!openDatePicker);\n    }\n\n    const [selectedRange, setSelectedRange] = useState<SelectedRange[]>([\n        {\n          startDate: new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000), // 30 days ago\n          endDate: new Date(),\n          key: \"selection\",\n        },\n      ]);\n\n      const handleClick = (): void => {\n        if (appLocalizer.khali_dabba) {\n          axios\n            .post(\n              fetchSubscribersDataUrl,\n              {\n                postStatus,\n                search_field: filters?.searchField,\n                search_action: filters?.searchAction,\n                start_date: filters?.date?.start_date,\n                end_date: filters?.date?.end_date,\n              },\n              {\n                headers: { \"X-WP-Nonce\": appLocalizer.nonce },\n              }\n            )\n            .then((response) => {\n              const data = JSON.parse(response.data);\n              setAllData(data);\n      \n              // Fix: Explicitly cast to HTMLAnchorElement before calling .click()\n              setTimeout(() => {\n                const csvElement = csvLink.current as unknown as HTMLAnchorElement;\n                csvElement?.click();\n              }, 500);\n            })\n            .catch((error) => {\n              console.error(\"Error fetching subscribers:\", error);\n            });\n        }\n      };\n\n      function requestData(\n        rowsPerPage: number = 10,\n        currentPage: number = 1,\n        searchField: string = \"\",\n        searchAction: string = \"\",\n        start_date: Date = new Date(0),\n        end_date: Date = new Date(),\n        postStatus?: string\n      ): void {\n        // Fetch the data to show in the table\n        axios\n          .post(\n            fetchSubscribersDataUrl,\n            {\n              page: currentPage,\n              row: rowsPerPage,\n              postStatus: postStatus,\n              search_field: searchField,\n              search_action: searchAction,\n              start_date: start_date.toISOString(), // Convert Date to string\n              end_date: end_date.toISOString(), // Convert Date to string\n            },\n            {\n              headers: { \"X-WP-Nonce\": appLocalizer.nonce },\n            }\n          )\n          .then((response) => {\n            const data = JSON.parse(response.data);\n            setData(data);\n          })\n          .catch((error) => {\n            console.error(\"Error fetching subscribers:\", error);\n          });\n      }\n\n      const requestApiForData = (\n        rowsPerPage: number,\n        currentPage: number,\n        filterData: {\n          searchField?: string;\n          searchAction?: string;\n          date?: {\n            start_date?: Date;\n            end_date?: Date;\n          };\n          typeCount?: string;\n        } = {}\n      ): void => {\n        // If search action or search text field is missing, do nothing\n        if (Boolean(filterData?.searchAction) !== Boolean(filterData?.searchField)) {\n          return;\n        }\n      \n        setData(null);\n      \n        requestData(\n          rowsPerPage,\n          currentPage,\n          filterData.searchField || \"\",\n          filterData.searchAction || \"\",\n          filterData.date?.start_date || new Date(0),\n          filterData.date?.end_date || new Date(),\n          filterData.typeCount\n        );\n      };\n\n      useEffect(() => {\n        if (appLocalizer.khali_dabba) {\n          requestData();\n        }\n      }, [postStatus]);\n\n\n      useEffect(() => {\n        if (appLocalizer.khali_dabba) {\n          axios\n            .post(fetchSubscribersCount, null, {\n              headers: { \"X-WP-Nonce\": appLocalizer.nonce },\n            })\n            .then((response) => {\n              const data: Record<string, number> = response.data;\n      \n              setTotalRows(data[\"all\"]);\n      \n              const statusList: SubscribersStatus[] = [\n                {\n                  key: \"all\",\n                  name: __(\"All\", \"woocommerce-stock-manager\"),\n                  count: data[\"all\"] || 0,\n                },\n                {\n                  key: \"subscribed\",\n                  name: __(\"Subscribed\", \"woocommerce-stock-manager\"),\n                  count: data[\"subscribed\"] || 0,\n                },\n                {\n                  key: \"unsubscribed\",\n                  name: __(\"Unsubscribed\", \"woocommerce-stock-manager\"),\n                  count: data[\"unsubscribed\"] || 0,\n                },\n                {\n                  key: \"mailsent\",\n                  name: __(\"Mail Sent\", \"woocommerce-stock-manager\"),\n                  count: data[\"mailsent\"] || 0,\n                },\n              ];\n      \n              setSubscribersStatus(statusList);\n            })\n            .catch((error) => {\n              console.error(\"Error fetching subscriber count:\", error);\n            });\n        }\n      }, []);\n\n      useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n          if (dateRef.current && !dateRef.current.contains(event.target as Node)) {\n            setOpenDatePicker(false);\n          }\n        };\n      \n        document.body.addEventListener(\"click\", handleClickOutside);\n      \n        return () => {\n          document.body.removeEventListener(\"click\", handleClickOutside);\n        };\n      }, []);\n\n\n      const realtimeFilter = [\n        {\n          name: \"date\",\n          render: (updateFilter: FilterProps[\"updateFilter\"], value: any) => (\n            <div ref={dateRef}>\n              <div className=\"admin-header-search-section\">\n                <input\n                  value={`${selectedRange[0].startDate.toLocaleDateString()} - ${selectedRange[0].endDate.toLocaleDateString()}`}\n                  onClick={() => handleDateOpen()}\n                  className=\"date-picker-input-custom\"\n                  type=\"text\"\n                  placeholder={__(\"DD/MM/YYYY\", \"woocommerce-stock-manager\")}\n                  readOnly\n                />\n              </div>\n              {openDatePicker && (\n                <div className=\"date-picker-section-wrapper\" id=\"date-picker-wrapper\">\n                  <DateRangePicker\n                    ranges={selectedRange}\n                    months={1}\n                    direction=\"vertical\"\n                    scroll={{ enabled: true }}\n                    maxDate={new Date()} // Prevents selecting future dates\n                    onChange={(dates) => {\n                        if (\"selection\" in dates) {\n                          const selected = dates.selection;\n                      \n                          // Ensure startDate and endDate are always defined\n                          const startDate = selected.startDate ?? new Date();\n                          const endDate = selected.endDate ?? new Date();\n                      \n                          endDate.setHours(23, 59, 59, 999);\n                      \n                          // Convert Dates to strings (e.g., 'YYYY-MM-DD')\n                          const formattedStartDate = startDate.toISOString().split(\"T\")[0];  \n                          const formattedEndDate = endDate.toISOString().split(\"T\")[0];  \n                      \n                          setSelectedRange([{ startDate, endDate, key: \"selection\" }]);\n                      \n                          updateFilter(\"date\", {\n                            start_date: formattedStartDate,\n                            end_date: formattedEndDate,\n                          });\n                      \n                          setFilters((prevFilters) => ({\n                            ...prevFilters,\n                            date: { start_date: formattedStartDate, end_date: formattedEndDate },\n                          }));\n                        }\n                      }}\n                    />\n                </div>\n              )}\n            </div>\n          ),\n        },\n        {\n          name: \"searchField\",\n          render: (updateFilter: FilterProps[\"updateFilter\"], filterValue: string) => (\n            <div className=\"admin-header-search-section search-section\">\n              <input\n                name=\"searchField\"\n                type=\"text\"\n                placeholder=\"Search...\"\n                onChange={(e) => {\n                  updateFilter(e.target.name, e.target.value);\n                  setFilters((prevFilters) => ({\n                    ...prevFilters,\n                    searchField: e.target.value,\n                  }));\n                }}\n                value={filterValue || \"\"}\n              />\n            </div>\n          ),\n        },\n        {\n          name: \"searchAction\",\n          render: (updateFilter: FilterProps[\"updateFilter\"], filterValue: string) => (\n            <div className=\"admin-header-search-section searchAction\">\n              <select\n                name=\"searchAction\"\n                onChange={(e) => {\n                  updateFilter(e.target.name, e.target.value);\n                  setFilters((prevFilters) => ({\n                    ...prevFilters,\n                    searchAction: e.target.value,\n                  }));\n                }}\n                value={filterValue || \"\"}\n              >\n                <option value=\"\">All</option>\n                <option value=\"productField\">Product Name</option>\n                <option value=\"emailField\">Email</option>\n              </select>\n            </div>\n          ),\n        },\n      ];\n\n      // Columns for the data table\nconst columns: TableColumn[] = [\n    {\n      name: __(\"Product\", \"woocommerce-stock-manager\"),\n      cell: (row: TableRow) => (\n        <TableCell title=\"Product\">\n          <img src={row.image} alt=\"product_image\" />\n          <p>{row.product}</p>\n        </TableCell>\n      ),\n    },\n    {\n      name: __(\"Email\", \"woocommerce-stock-manager\"),\n      cell: (row: TableRow) => (\n        <TableCell title=\"Email\">\n          {row.email}\n          {row.user_link && (\n            <a className=\"user-profile\" href={row.user_link} target=\"_blank\" rel=\"noopener noreferrer\">\n              <i className=\"admin-font adminLib-person\"></i>\n            </a>\n          )}\n        </TableCell>\n      ),\n    },\n    {\n      name: __(\"Date\", \"woocommerce-stock-manager\"),\n      cell: (row: TableRow) => <TableCell title=\"Date\">{row.date}</TableCell>,\n    },\n    {\n      name: __(\"Status\", \"woocommerce-stock-manager\"),\n      cell: (row: TableRow) => (\n        <TableCell title=\"Status\">\n          <p className={row.status_key === \"mailsent\" ? \"sent\" : row.status_key === \"subscribed\" ? \"subscribed\" : \"unsubscribed\"}>\n            {row.status}\n          </p>\n        </TableCell>\n      ),\n    },\n  ];\n\n    return (\n        <>\n        { !appLocalizer.khali_dabba ? (\n                <div>\n                  <div className=\"free-reports-download-section\">\n                    <h2 className=\"section-heading\">\n                      {__(\"Download product wise subscriber data.\", \"woocommerce-stock-manager\")}\n                    </h2>\n                    <a href={appLocalizer.export_button} className=\"main-btn btn-purple btn-effect\">\n                      {__(\"Download CSV\", \"woocommerce-stock-manager\")}\n                    </a>\n                    <p\n                      className=\"description\"\n                      dangerouslySetInnerHTML={{\n                        __html:\n                          \"This CSV file contains all subscriber data from your site. Upgrade to <a href='https://multivendorx.com/woocommerce-product-stock-manager-notifier-pro/?utm_source=wpadmin&utm_medium=pluginsettings&utm_campaign=stockmanager' target='_blank' rel='noopener noreferrer'>WooCommerce Product Stock Manager & Notifier Pro</a> to generate CSV files based on specific products or users.\",\n                      }}\n                    ></p>\n                  </div>\n                  <Dialog\n                    className=\"admin-module-popup\"\n                    open={openDialog}\n                    onClose={() => setOpenDialog(false)}\n                    aria-labelledby=\"form-dialog-title\"\n                  >\n                    <span\n                      className=\"admin-font adminLib-cross stock-manager-popup-cross\"\n                      onClick={() => setOpenDialog(false)}\n                    ></span>\n                    <Popoup />\n                  </Dialog>\n                  <div className=\"subscriber-img\" onClick={() => setOpenDialog(true)}></div>\n                </div>\n              ) : (\n                <div className=\"admin-subscriber-list\">\n                  <div className=\"admin-page-title\">\n                    <p>{__(\"Subscriber List\", \"woocommerce-stock-manager\")}</p>\n                    <div className=\"download-btn-subscriber-list\">\n                      <button onClick={handleClick} className=\"admin-btn btn-purple\">\n                        <div className=\"wp-menu-image dashicons-before dashicons-download\"></div>\n                        {__(\"Download CSV\", \"woocommerce-stock-manager\")}\n                      </button>\n                      <CSVLink\n                        data={allData.map(({ date, product, email, status }) => ({ date, product, email, status }))}\n                        filename={\"Subscribers.csv\"}\n                        className=\"hidden\"\n                        ref={csvLink} \n                      />\n                    </div>\n                  </div>\n            \n                  <CustomTable\n                    data={data}\n                    columns={columns}\n                    selectable={true}\n                    handleSelect={(selectRows) => setSelectedRows(selectRows)}\n                    handlePagination={requestApiForData}\n                    defaultRowsParPage={10}\n                    defaultTotalRows={totalRows}\n                    perPageOption={[10, 25, 50]}\n                    realtimeFilter={realtimeFilter}\n                    typeCounts={subscribersStatus}\n                    autoLoading={false}\n                  />\n                </div>\n              )\n            }\n        </>\n    );\n}\n\nexport default TableComponent;","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { useTour } from '@reactour/tour';\n\n\ninterface AppLocalizer {\n    enquiry_form_settings_url:string,\n    module_page_url:string,\n    settings_page_url:string,\n    customization_settings_url:string,\n    apiurl:string,\n}\n\nconst appLocalizer:AppLocalizer={\n    enquiry_form_settings_url:\"string\",\n    module_page_url:\"string\",\n    settings_page_url:\"string\",\n    customization_settings_url:\"string\",\n    apiurl:\"string\",\n}\n\ninterface TourStep {\n    selector: string;\n    placement?: \"top\" | \"bottom\" | \"left\" | \"right\" | \"auto\";\n    content: () => JSX.Element;\n}\n\n\nconst Tour : React.FC = ()=>{\n\n    const { setIsOpen, setSteps, setCurrentStep } = useTour();\n    const [isNavigating, setIsNavigating] = useState<boolean>(false);\n\n    const waitForElement = (selector: string): Promise<Element> =>\n        new Promise((resolve) => {\n        const checkElement = () => {\n        const element = document.querySelector(selector);\n        if (element) {\n            resolve(element);\n        } else {\n            setTimeout(checkElement, 100);\n        }\n        };\n\n        // Ensure the page is fully loaded before checking for the element\n        if (document.readyState === 'complete') {\n            checkElement();\n        } else {\n            window.addEventListener('load', checkElement, { once: true });\n        }\n    });\n\n    const navigateTo = async (url: string, step: number, selector: string): Promise<void> => {\n        setIsNavigating(true);\n        setIsOpen(false); // Close the tour\n        window.location.href = url; // Navigate to the new page\n    \n        // Wait for the element to load\n        await waitForElement(selector);\n    \n        // Ensure a short delay to handle rendering latencies\n        setTimeout(() => {\n            setCurrentStep(step); // Move to the next step\n            setIsOpen(true); // Reopen the tour\n            setIsNavigating(false);\n        }, 500); // Adjust delay as needed\n    };\n\n    const finishTour = async (): Promise<void> => {\n        setIsOpen(false); // Close the tour\n    \n        try {\n            await axios.post(`${appLocalizer.apiurl}/catalogx/v1/tour`, { active: false });\n            console.log(\"Tour marked as complete.\");\n        } catch (error) {\n            console.error(\"Error updating tour flag:\", error);\n        }\n    };\n\n    const settingsTourSteps: TourStep[] = [\n        {\n            selector: '[data=\"catalog-showcase-tour\"]',\n            placement: \"top\",\n            content: () => (\n                <div className=\"tour-box\">\n                    <h3>Enable Catalog Mode</h3>\n                    <h4>\n                        Activate Catalog mode to display your site as a product catalog, removing\n                        the \"Add to Cart\" button and optionally hiding prices.\n                    </h4>\n                    <div className=\"tour-footer\">\n                        <button className=\"btn-purple\" onClick={() => setCurrentStep(1)}>\n                            Next\n                        </button>\n                        <button className=\"btn-purple end-tour-btn\" onClick={() => finishTour()}>\n                            End Tour\n                        </button>\n                    </div>\n                </div>\n            ),\n        },\n        {\n            selector: '[data=\"enquiry-showcase-tour\"]',\n            content: () => (\n                <div className=\"tour-box\">\n                    <h3>Enable Enquiry Mode</h3>\n                    <h4>\n                        Turn on Enquiry mode to add an \"Enquiry\" button for customers, allowing\n                        direct communication via submitted forms, viewable in the admin dashboard\n                        or via email.\n                    </h4>\n                    <div className=\"tour-footer\">\n                        <button\n                            className=\"btn-purple\"\n                            onClick={() => {\n                                const checkbox = document.querySelector<HTMLInputElement>(\n                                    `[id=\"toggle-switch-enquiry\"]`\n                                );\n    \n                                if (checkbox?.checked) {\n                                    navigateTo(appLocalizer.enquiry_form_settings_url, 2, \".button-visibility\");\n                                } else {\n                                    setCurrentStep(3);\n                                }\n                            }}\n                        >\n                            Next\n                        </button>\n                        <button className=\"btn-purple end-tour-btn\" onClick={() => finishTour()}>\n                            End Tour\n                        </button>\n                    </div>\n                </div>\n            ),\n        },\n        {\n            selector: \".button-visibility .adminLib-eye-blocked\",\n            content: () => (\n                <div className=\"tour-box\">\n                    <h3>Customize Enquiry Form</h3>\n                    <h4>\n                        Head to the Enquiry Form Builder to enable the fields customers need to\n                        fill out when submitting product inquiries.\n                    </h4>\n                    <div className=\"tour-footer\">\n                        <button\n                            className=\"btn-purple\"\n                            onClick={() =>\n                                navigateTo(appLocalizer.module_page_url, 3, '[data=\"quote-showcase-tour\"]')\n                            }\n                        >\n                            Next\n                        </button>\n                        <button className=\"btn-purple end-tour-btn\" onClick={() => finishTour()}>\n                            End Tour\n                        </button>\n                    </div>\n                </div>\n            ),\n        },\n        {\n            selector: '[data=\"quote-showcase-tour\"]',\n            content: () => (\n                <div className=\"tour-box\">\n                    <h3>Enable Quote Module</h3>\n                    <h4>\n                        Activate the Quote module to let customers request personalized product\n                        quotations. Admins can review the quotes and provide tailored pricing for\n                        customers to proceed with purchases.\n                    </h4>\n                    <div className=\"tour-footer\">\n                        <button\n                            className=\"btn-purple\"\n                            onClick={() => {\n                                const checkbox = document.querySelector<HTMLInputElement>(\n                                    `[id=\"toggle-switch-quote\"]`\n                                );\n    \n                                if (checkbox?.checked) {\n                                    navigateTo(appLocalizer.settings_page_url, 4, '[data=\"quote-permission\"]');\n                                } else {\n                                    navigateTo(appLocalizer.customization_settings_url, 5, \".enquiry-btn\");\n                                }\n                            }}\n                        >\n                            Next\n                        </button>\n                        <button className=\"btn-purple end-tour-btn\" onClick={() => finishTour()}>\n                            End Tour\n                        </button>\n                    </div>\n                </div>\n            ),\n        },\n        {\n            selector: '[data=\"quote-permission\"]',\n            content: () => (\n                <div className=\"tour-box\">\n                    <h3>Configure Quote Settings</h3>\n                    <h4>\n                        Set up your quotation settings by defining whether to limit quote requests\n                        to logged-in users only.\n                    </h4>\n                    <div className=\"tour-footer\">\n                        <button\n                            className=\"btn-purple\"\n                            onClick={() => navigateTo(appLocalizer.customization_settings_url, 5, \".enquiry-btn\")}\n                        >\n                            Next\n                        </button>\n                        <button className=\"btn-purple end-tour-btn\" onClick={() => finishTour()}>\n                            End Tour\n                        </button>\n                    </div>\n                </div>\n            ),\n        },\n        {\n            selector: \".enquiry-btn\",\n            content: () => {\n                const handleImageLoad = () => {\n                    // Recalculate position after the image is loaded\n                    const element = document.querySelector(\".enquiry-btn\");\n                    element?.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n                };\n    \n                return (\n                    <div className=\"tour-box\">\n                        <h3>Arrange Enquiry Button</h3>\n                        <img\n                            // src={gif}\n                            alt=\"Guide\"\n                            width=\"160\"\n                            // onLoad={handleImageLoad} // Handle image load event\n                        />\n                        <h4>\n                            With the Enquiry tab selected, drag and drop to position the Enquiry\n                            button and customize its look.\n                        </h4>\n                        <div className=\"tour-footer\">\n                            <button className=\"btn-purple\" onClick={() => finishTour()}>\n                                Finish\n                            </button>\n                        </div>\n                    </div>\n                );\n            },\n            placement: \"auto\", // Adjust dynamically based on space\n        },\n    ];\n\n    useEffect(() => {\n        // Fetch tour status API call\n        const fetchTourState = async (): Promise<void> => {\n            if (window.location.href === appLocalizer.module_page_url) {\n                try {\n                    const response = await axios.get<{active: string}>(`${appLocalizer.apiurl}/catalogx/v1/tour`);\n                    console.log(response);\n    \n                    if (response.data.active !== '') {\n                        if(setSteps){\n                            setSteps(settingsTourSteps);\n                        }\n                        setIsOpen(true); // Start the tour\n                    }\n                } catch (error) {\n                    console.error(\"Error fetching tour flag:\", error);\n                }\n            }\n        };\n    \n        if (!isNavigating) {\n            fetchTourState();\n        }\n    }, [isNavigating, setSteps]);\n\n    return null;\n}\n\nexport default Tour;"]}